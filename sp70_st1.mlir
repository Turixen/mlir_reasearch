// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
<<<<<<< HEAD
=======
    func.func private @printMemrefF64(%ptr : tensor<?x?xf64>) attributes { llvm.emit_c_interface }
>>>>>>> aca6b08 (builded chiamata 29)

    func.func @matmul(%t : tensor<10x10xf64, #CSR>, %s : tensor<10x10xf64>, %out : tensor<10x10xf64>)
        -> tensor<10x10xf64> {
        %0 = linalg.matmul
            ins(%t, %s: tensor<10x10xf64, #CSR>, tensor<10x10xf64>)
            outs(%out: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %0 : tensor<10x10xf64>
    }

    func.func @main() -> i64 {
        %c = tensor.empty() : tensor<10x10xf64>
        %t_sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %s = arith.constant dense<[
            [5.007282087940533, 2.1420497309468542, 8.436435794621747, 3.3512684114489364, 4.857873717307768, 6.502687329860761, 4.481183080848961, 1.601814284032178, 1.6482067031075565, 2.7697353449463433], 
            [8.279643561010445, 9.795630868869145, 5.066309369035312, 1.0691978274975567, 7.275474719732622, 7.467921675266261, 1.8460472498040226, 1.7245060332115747, 9.828847678500983, 5.852388850362829],
            [4.735129046344202, 0.21389279999051047, 9.982391055358457, 0.22751442405574696, 4.306329853746438, 1.0300462704374436, 7.18851925974961, 1.729713474339346, 7.449415482166591, 8.218091309462856],
            [0.553700972117297, 7.087110512686055, 7.745049854061418, 4.244832766099488, 1.274600051964837, 9.439172989428602, 6.1902689198805465, 6.031287787182142, 8.789069924789843, 3.1611885774377635],
            [8.99037960163434, 3.4471256572948263, 8.493284156417388, 9.937330900608817, 2.6191045587156303, 0.7735100419956764, 1.4024547359632467, 7.454551829233095, 2.6194195569905077, 4.029852004687758],
            [4.764101967556354, 3.812927981864286, 9.074772891976822, 6.492081638175751, 6.788240566846988, 7.006346507216591, 5.738663758559279, 7.52302349613006, 0.9159264138709977, 8.66466396021419],
            [5.686236567853897, 4.875503241707319, 9.585958853670933, 8.118666857620951, 5.381111901158945, 3.828004316955841, 9.998339760613492, 6.183582414956624, 3.4201107815517515, 0.8496821896297169],
            [2.791270331453247, 2.9735813587818685, 3.0654358664150494, 5.4929582569491755, 3.9238922832952996, 9.265793497793327, 5.068159219403057, 9.691034881403471, 2.097243084680296, 0.9678945834765151],
            [3.1989914495545624, 3.7607248895716507, 5.518232313683532, 2.4724154287944913, 7.292067461597712, 9.700922517975847, 9.942151965541004, 2.6109645810252315, 9.048463042047532, 3.6771724535825703],
            [6.305746358135309, 7.694875482371377, 3.6012681436537397, 1.263350310992416, 3.8581878444772943, 7.104702792551791, 2.1904752468927735, 0.3291473476264739, 3.1668377278172235, 2.0518472657841924]
        ]> : tensor<10x10xf64>
        %result_matrix = call @matmul(%t_sparse, %s, %c) :
            (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>

<<<<<<< HEAD
        %c0 = arith.constant 0 : index
        %c10 = arith.constant 10 : index
        %c1 = arith.constant 1 : index
        %f0 = arith.constant 0.0 : f64
=======
        %p = tensor.cast %result_matrix : tensor<10x10xf64> to tensor<?x?xf64>
        func.call @printMemrefF64(%p) : (tensor<?x?xf64>) -> ()
        %c1 = arith.constant 0 : index
>>>>>>> aca6b08 (builded chiamata 29)

        scf.for %i = %c0 to %c10 step %c1 {
            %row = vector.transfer_read %result_matrix[%i, %c0], %f0 : tensor<10x10xf64>, vector<10xf64>
            vector.print %row : vector<10xf64>
        }

        %element_f64 = tensor.extract %result_matrix[%c0, %c0] : tensor<10x10xf64>
        %element_i64 = arith.fptosi %element_f64 : f64 to i64
        return %element_i64 : i64
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[4.756347, 2.102859, 5.423869, 5.577680, 0.300124, 4.835755, 8.859605, 1.592490, 7.372070, 7.246288, 5.919161, 5.959392, 4.695653, 0.632863, 3.159162, 4.708305, 8.435645, 5.430939, 2.119063, 0.154542, 2.595040, 1.465582, 1.321259, 3.702925, 3.542246, 6.831162, 1.723510, 7.872902, 6.008155, 1.047045]> : tensor<30xf64>
        %row_ptr = arith.constant dense<[0, 1, 5, 7, 14, 16, 21, 25, 27, 29, 30]> : tensor<11xindex>
        %col_ind = arith.constant dense<[8, 3, 4, 6, 9, 2, 4, 0, 1, 2, 3, 5, 7, 8, 3, 6, 2, 3, 4, 5, 8, 1, 5, 7, 8, 5, 9, 4, 7, 7]> : tensor<30xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<30xindex>), tensor<30xf64> to tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }
    
}
