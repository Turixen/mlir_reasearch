module {
  llvm.func @malloc(i64) -> !llvm.ptr
  llvm.mlir.global private constant @__constant_101xindex_0(dense<"0xtensor<101xindex>) {addr_space = 0 : i32, alignment = 64 : i64} : !llvm.array<101 x i64>
  llvm.mlir.global private constant @__constant_500xindex(dense<"0xtensor<500xindex>) {addr_space = 0 : i32, alignment = 64 : i64} : !llvm.array<500 x i64>
  llvm.mlir.global private constant @__constant_500xf64(dense<"0x0F62670A9D17F43F4DA088450CAB1A4090F63FC05A3523409B1F7F6951EF224096438B6CE73BF83FDA8EA9BBB2F321401EE1B4E045DF0D40670FB40243D62340B9C15087155E2040F8FC304278B41B40E0BC38F1D52E21409B38B9DFA1A8F43F2DCC423BA789124058E71890BDCE1B40399D64ABCBA9FC3F3468E89FE0721C407EE200FA7DDF09406DE525FF933FEE3FFE7BF0DAA57D1740B0C8AF1F62431F40A33A1DC87A4A104093382BA2269A1B40A4C684984B6AF13FDF52CE177BBF1E403318231285F60D40B1A371A8DF45F63F23111AC1C6F50E407BA35698BE671F403929CC7B9CC91A40944BE3175EA91E4030B95164ADC11C40C43F6CE9D1941940CF68AB92C8BEF93F86AA984A3FE1E83F28D53E1D8FF90B40AAD381ACA7061440B2BD16F4DE181F40693524EEB174EC3F3BFBCA83F494F23F4A0A2C8029E31A406C0A647616DD194032C687D9CB661A40F8E3F6CB278B22403067B62BF441E43F102384471B671140D07B6308008EFF3F2123A0C211640E40C79BFC169DCC1C40F6B4C35F93F52140D1C952EBFD16204066A208A9DB691E40F790F0BDBF011640BDA772DA53E21C4058FFE7305F1EF83FB1FB8EE1B11F2240A019C407769C1E4060B1868BDCA313402CF015DD7ABD12402330D63730D91240529D0E643D551440AE0D15E3FC6D104098DEFE5C345421408940F50F22390740257497C459D10040FFEA71DF6A5DFD3FDB5207793DB80E4085B4C6A013820E40081F4AB4E4C111402F52280B5F7F0C40ED0DBE3099822040E6965643E25E0540E78BBD175F141F40A036AAD3815C114033E197FA7913F03F395E81E849590E40990E9D9E77B31940F5F1D077B7520140ACC5A7001867234002B859BC58B81840A69883A0A3B51C40C4B29943527B1040744694F6064F1D40DEFFC70913861F40E9F010C64F63FD3FB51666A19D330F40E063B0E2547B1D40D13E56F0DB082140A33EC91D3611EB3F97E65608ABB1FC3F334E4354E1EF1A400AF2B391EB661B40BD8DCD8E54DFB13F624A24D1CBE80540170FEF39B05C0B407A1B9B1DA9BE0D40DAE4F04927122340910DA48B4D6B1440198D7C5EF1042040E8F9D34675BA1A406BEF535568D01C402C80290307B41C402272FA7ABE460240A62897C62F3CFC3F94A3005130D31E407D3ECA880B5017403546EBA86A72154061360186E5FF114059164CFC51C41640F4A5B73F17CD0440A2B8E34D7EBB2040703E75AC52EA1440FD8348861C4B15402D05A4FD0FA01940F5BC1B0B0A83E83F70D1C952EB3DFA3FD89E5912A026F13F8099EFE027FE1E408736001B10211E404832AB77B87D2240F03499F1B6D2DF3FDE921CB0AB89F83F07077B1343221E40D47E6B274A42EF3F5F5FEB5223D4054055151A88652B2340A7EB89AE0BEF1E40B43BA41820D11E407D03931B45061E40FCA71B28F07622404AB8904770630840342C465D6B9F1A4038842A357BB0214018EDF1423AF421404966F50EB7331E40965CC5E237ED2240EFC9C342AD8921400186E5CFB76517407DAD4B8DD0CFE53FB85B9203765D2040E97FB9162DA02340D71533C2DB630D401F317A6EA133214093020B60CAC00140A1BFD02346C72240C2A6CEA3E23FF73FC37FBA81029F1D403370404B577020409C3237DF88DE1F401A4D2EC6C05A0A409C8713984E6B0240A4C519C39C400340CBDAA6785C941F40111956F14676134024D1CB2896EB2340D55A988576AE02403160C9552C7EA33F4359F8FA5A471140D27135B22B2D0A4025034015376ED73F5001309E41C30440D7A19A92AC3B20406876DD5B91180540221B48179B96FB3F5D52B5DD042F1F404963B48EAA4E2240404CC2853C421D40BF0D315EF3CA1C40174A26A7762622405854C4E924EB1C404EB4AB90F2E314402E7590D783791040040473F4F88D1C4012C0CDE2C5C2EF3F2FBFD364C6DBC63FB3075A8121ABB33F5B7B9FAA42531340622CD32F113F1240B18BA2073EA607401FF5D72B2C981740AB93331477EC1440C87A6AF5D5CD2040B47570B037B1E33F0989B48D3F310240506F46CD57C9FF3FF0A2AF20CDB81C407BD7A02FBDAD1A40DC679599D23AF33F1BA034D4280C214032B08EE3878AF93F27BC04A73E68234016A5846055FD10405401F73C7F6A1E40085740A19EEE17405CE333D93F4FF33F36785F950B55FD3FA7C98CB7953E0A40F2B6D26BB3512340D55A9885764EE23F2DE8BD3104102040B6A1629CBF691B404A27124C3573FB3FA514747B493323405B0A48FB1F60E03F00E1438996BCEC3F80457EFD107B104088D860E1242D0B40431F2C6343B70D403E4162BB7B00F93F05E09F5225CA06405E9CF86A473120400E4FAF94658811409EEFA7C64B77FD3F72C3EFA65BF61740653733FAD1C82140A1DAE044F4F32240A7B0524145451140103E9468C9E3D03F42CD902A8A170C40B9E34D7E8B8E0F40FA27B8585183FA3FA296E65608AB194014252191B6D11540A9BC1DE1B420F73FF836FDD98F44204021C9ACDEE1760740B83EAC376A651940247D5A457F0022405C397B67B455DB3FEDD45C6E30E41840ACFD9DEDD1DBF93FFE80070610EE14401EFD2FD7A2F51840392A37514BF305400342EBE1CB342040F5D555815A3422408849B8904770EB3F6FD575A8A60410403EE8D9ACFADCE63F664D2CF015552140B900344A97AE2240E84A04AA7FB01B406760E4654D2CB83FE04A766C04521F40397F130A11500A4050ABE80FCDFCF03F552E54FEB5EC16402D27A1F485501B404A27124C35FB224047E5266A697E1B40B11A4B581B331440356090F469A514402B8716D9CE271E40855B3E92921E0F40F3C64961DE8315403293A8177CEA13405A8121AB5B7D1D407CB94F8E02640540111956F1460606406214048F6F1F1940ED0C535BEAA006403F1D8F19A8AC1D40DD0A613596B01440B5A679C7293A074005DEC9A7C736EB3FE92ADD5D67F313402BBD361B2B611C40AE282504AB6A1040BCB1A030283321407FDFBF7971DA23400E4E44BFB69E1540ADDD76A1B9CE004083A5BA80977121406072A3C85A2317403ECDC98B4C400C40001FBC7669430B40726DA818E7BF14405A46EA3D95231840F0C16B97360C1240116E32AA0C030F40069E7B0F97CC11407522C15433EB1F408DB62A89EC83ED3FC5E74EB0FF7A0E40527C7C42767E14403ECC5EB69D761640354069A8511811402CD32F116F9D2240A298BC01663E0E40DBA50D87A5911440D53C47E4BB14FD3F34D8D479548C1140E95F92CA14E31F40E9633E20D00123407F1475E61E920C4096E7C1DD598B1140D2C265153643214064B2B8FFC8A4124068E89FE0629511403B8BDEA9801B1D40ACE3F8A1D2C8104003CFBD874BEE0140E1B37570B0F7F93F4D10751F80241B40A37895B54D711A40766EDA8CD310CD3F6878B306EF6B0D4021E868554B0A1C40328E91EC11EAF73F1409A69A592B05408063CF9ECB54154011E335AFEA9C18401FF30181CE94234094675E0EBBEFCC3FFA0D130D52A019405858703FE0210740E561A1D634EF22402F19C748F6381940676325E65909F43F0DA5F622DAAE07401478279F1E9B19402849D74CBE79114007D15AD1E638204063096B63ECC4F93F95D233BDC4D8E53FE292E34EE9701740B1A6B228ECA2FB3F88F2052D2460CC3FC537143E5B971A403A5D16139BEF2140B2632310AFCB15407F6ABC7493402340A4FB3905F999F53FB8239C16BC581F4001A777F17EFC1E40CB4DD4D2DC8A0240A5828AAA5FB91A403CF71E2E390E1C404A61DEE34C031A40454B1E4FCB4F1D401135D1E7A31C1940DE550F9887AC0740F0332E1C08191940F04DD367075CD83F61FD9FC37C990B40E7FD7F9C30712340B6662B2FF9BF0040D1217024D0600140D1CE691668E71C40725298F73853F93F04C6FA0626B72040925852EE3E67224048DC63E94317F23F72F8A41309C61140C0ED0912DB35224054ABAFAE0A341E4030630AD6387B1C40793C2D3F70451340EEAF1EF7AD361840FAEFC16B974622404A41B79734A60240295DFA97A47A204069FE98D6A6211140D7DCD1FF72BD1C40618907944D491E4076A73B4F3C371A40C100C28712652340430070ECD99310407F69519FE4D6234035EF384547F2F93FA4880CAB78D31D40F67D384888C22240994BAAB69B401040A4FB3905F999FE3F56293DD34B1C2140AD31E884D08122407407B133850622407EACE0B721662040451328621123164072C3EFA65B5E2340552E54FEB56C16402366F6798C021B404D2D5BEB8BA40B40E960FD9FC38C1E40D575A8A624F32240016DAB59672C1F4092E68F696D3A02409DB81CAF40441D405245F12A6B5B03408693347F4CCB06406E5166834C520340AA44D95BCA291140B2D826158D750F40DC63E94317C41040B398D87C5C9BF83FD13FC1C58A32204016342DB132FA0240C2DF2F664BA61C4043C70E2A71DD094095641D8EAE720F40A228D027F2D41B4006D49B51F3951B40C85EEFFE78CF134076C1E09A3B5A1A40DEE34C13B68F194028D192C7D3B2F83F98C0ADBB79BA1F40AE669DF17D712340CB64389ECF601F407365506D70220A40B54FC76306AAFB3FB80721205F2221409A07B0C8AF6F1940FF03AC55BB060C40313F3734656707401D554D10751F0F408F705AF0A20F1940446E861BF0491240EA5BE674591C2340FAEFC16B970E224050FC1873D79A2340378C82E0F17D23400F62670A9DD71640C0AE264F59ED18402B8A5759DB441A40B22B2D23F576214026C79DD2C1DA1340EAE74D452A6423409E62D520CC0D17404FB2D5E594B02240309DD66D5043234011AB3FC2300018404BB0389CF97508401E19ABCDFFAB0740B7D5AC33BE172240F25CDF8783D4214059DE550F987722401FF5D72B2C5801400726378AAC9516400DFAD2DB9FAB114089D1730B5DA90740E17A14AE47012140B7442E3883DF1D40ECF82F100448EA3FB1FD648C0FB3084063D174763238FA3F753DD175E1D7194075ADBD4F55C115404E2844C021C41B4093020B60CAE02040E54350357A451C40CDE847C32973EE3FBBD573D2FB3618408A3E1F65C4FD2340352905DD5EE21440BA313D61895F2140A48E8EAB91ED2340207EFE7BF01A01409293895B05D10C40293E3E213B3F1140B4CC22145B411C4087DD770C8F4D18401F662FDB4E6B20404B0169FF03FC1440FC00A43671D22140D106600322CC2040C9C859D8D32E1C402A3BFDA02EA21940CEA8F92AF9F805403BDF4F8D97AEF73FCBD765F84FB7EF3F14200A664CC11B4001A4367172D72040C6FB71FBE5831840C7F2AE7AC06C1240728A8EE4F2AF204011ACAA97DF391E405DC2A1B7788816408E59F624B0390440CF13CFD90242E43FECF7C43A5516214011E15F048D99E93F37548CF337010340889D29745EE3F53FD9243FE2576C014059FB3BDBA3FF22408658FD118601234033A9A10DC086F63FB8239C16BC4020401956F146E6710F40354415FE0CAF184056BABBCE864C1840F4BF5C8B16801140D25625917D30044062156F641ED90640BB7D5699291D1440073F7100FDAE14404EB9C2BB5CD414409D9FE238F05A1640CBF6216FB93A0E40B8AF03E78C281E40"> : tensor<500xf64>) {addr_space = 0 : i32, alignment = 64 : i64} : !llvm.array<500 x f64>
  llvm.mlir.global private constant @__constant_101xindex(dense<"0xtensor<101xindex>) {addr_space = 0 : i32, alignment = 64 : i64} : !llvm.array<101 x i64>
  llvm.mlir.global private constant @__constant_1999xindex(dense<"0xtensor<1999xindex>) {addr_space = 0 : i32, alignment = 64 : i64} : !llvm.array<1999 x i64>
  llvm.mlir.global private constant @__constant_1999xf64(dense<""> : tensor<1999xf64>) {addr_space = 0 : i32, alignment = 64 : i64} : !llvm.array<1999 x f64>
  llvm.func @compute_sum(%arg0: !llvm.ptr, %arg1: !llvm.ptr, %arg2: i64, %arg3: i64, %arg4: i64, %arg5: i64, %arg6: i64) -> f64 {
    %0 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>
    %1 = llvm.insertvalue %arg0, %0[0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %2 = llvm.insertvalue %arg1, %1[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %3 = llvm.insertvalue %arg2, %2[2] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %4 = llvm.insertvalue %arg3, %3[3, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %5 = llvm.insertvalue %arg5, %4[4, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %6 = llvm.insertvalue %arg4, %5[3, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %7 = llvm.insertvalue %arg6, %6[4, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %8 = llvm.mlir.constant(100 : index) : i64
    %9 = llvm.mlir.constant(0.000000e+00 : f64) : f64
    %10 = llvm.mlir.constant(100 : index) : i64
    %11 = llvm.mlir.constant(1 : index) : i64
    %12 = llvm.mlir.constant(0 : index) : i64
    llvm.br ^bb1(%12, %9 : i64, f64)
  ^bb1(%13: i64, %14: f64):  // 2 preds: ^bb0, ^bb5
    %15 = llvm.icmp "slt" %13, %10 : i64
    llvm.cond_br %15, ^bb2, ^bb6
  ^bb2:  // pred: ^bb1
    llvm.br ^bb3(%12, %14 : i64, f64)
  ^bb3(%16: i64, %17: f64):  // 2 preds: ^bb2, ^bb4
    %18 = llvm.icmp "slt" %16, %10 : i64
    llvm.cond_br %18, ^bb4, ^bb5
  ^bb4:  // pred: ^bb3
    %19 = llvm.extractvalue %7[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %20 = llvm.mul %13, %8 : i64
    %21 = llvm.add %20, %16 : i64
    %22 = llvm.getelementptr %19[%21] : (!llvm.ptr, i64) -> !llvm.ptr, f64
    %23 = llvm.load %22 : !llvm.ptr -> f64
    %24 = llvm.fadd %17, %23 : f64
    %25 = llvm.add %16, %11 : i64
    llvm.br ^bb3(%25, %24 : i64, f64)
  ^bb5:  // pred: ^bb3
    %26 = llvm.add %13, %11 : i64
    llvm.br ^bb1(%26, %17 : i64, f64)
  ^bb6:  // pred: ^bb1
    llvm.return %14 : f64
  }
  llvm.func @sparse_sparse_matmul(%arg0: !llvm.ptr, %arg1: !llvm.ptr, %arg2: i64, %arg3: i64, %arg4: i64, %arg5: !llvm.ptr, %arg6: !llvm.ptr, %arg7: i64, %arg8: i64, %arg9: i64, %arg10: !llvm.ptr, %arg11: !llvm.ptr, %arg12: i64, %arg13: i64, %arg14: i64, %arg15: !llvm.struct<(array<2 x i64>, array<3 x i64>)>, %arg16: !llvm.ptr, %arg17: !llvm.ptr, %arg18: i64, %arg19: i64, %arg20: i64, %arg21: !llvm.ptr, %arg22: !llvm.ptr, %arg23: i64, %arg24: i64, %arg25: i64, %arg26: !llvm.ptr, %arg27: !llvm.ptr, %arg28: i64, %arg29: i64, %arg30: i64, %arg31: !llvm.struct<(array<2 x i64>, array<3 x i64>)>, %arg32: !llvm.ptr, %arg33: !llvm.ptr, %arg34: i64, %arg35: i64, %arg36: i64, %arg37: i64, %arg38: i64) -> !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> {
    %0 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>
    %1 = llvm.insertvalue %arg26, %0[0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %2 = llvm.insertvalue %arg27, %1[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %3 = llvm.insertvalue %arg28, %2[2] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %4 = llvm.insertvalue %arg29, %3[3, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %5 = llvm.insertvalue %arg30, %4[4, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %6 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>
    %7 = llvm.insertvalue %arg21, %6[0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %8 = llvm.insertvalue %arg22, %7[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %9 = llvm.insertvalue %arg23, %8[2] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %10 = llvm.insertvalue %arg24, %9[3, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %11 = llvm.insertvalue %arg25, %10[4, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %12 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>
    %13 = llvm.insertvalue %arg16, %12[0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %14 = llvm.insertvalue %arg17, %13[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %15 = llvm.insertvalue %arg18, %14[2] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %16 = llvm.insertvalue %arg19, %15[3, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %17 = llvm.insertvalue %arg20, %16[4, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %18 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>
    %19 = llvm.insertvalue %arg10, %18[0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %20 = llvm.insertvalue %arg11, %19[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %21 = llvm.insertvalue %arg12, %20[2] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %22 = llvm.insertvalue %arg13, %21[3, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %23 = llvm.insertvalue %arg14, %22[4, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %24 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>
    %25 = llvm.insertvalue %arg5, %24[0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %26 = llvm.insertvalue %arg6, %25[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %27 = llvm.insertvalue %arg7, %26[2] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %28 = llvm.insertvalue %arg8, %27[3, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %29 = llvm.insertvalue %arg9, %28[4, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %30 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>
    %31 = llvm.insertvalue %arg0, %30[0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %32 = llvm.insertvalue %arg1, %31[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %33 = llvm.insertvalue %arg2, %32[2] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %34 = llvm.insertvalue %arg3, %33[3, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %35 = llvm.insertvalue %arg4, %34[4, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %36 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>
    %37 = llvm.insertvalue %arg32, %36[0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %38 = llvm.insertvalue %arg33, %37[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %39 = llvm.insertvalue %arg34, %38[2] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %40 = llvm.insertvalue %arg35, %39[3, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %41 = llvm.insertvalue %arg37, %40[4, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %42 = llvm.insertvalue %arg36, %41[3, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %43 = llvm.insertvalue %arg38, %42[4, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %44 = llvm.mlir.undef : vector<[32]xf64>
    %45 = llvm.mlir.constant(100 : index) : i64
    %46 = llvm.mlir.constant(0 : i32) : i32
    %47 = llvm.mlir.undef : vector<[32]xi32>
    %48 = llvm.mlir.constant(100 : index) : i64
    %49 = llvm.mlir.constant(0 : index) : i64
    %50 = llvm.mlir.constant(1 : index) : i64
    %51 = llvm.mlir.constant(32 : index) : i64
    %52 = llvm.mlir.constant(dense<0> : vector<[32]xindex>) : vector<[32]xi64>
    %53 = llvm.mlir.constant(dense<0.000000e+00> : vector<[32]xf64>) : vector<[32]xf64>
    %54 = llvm.mlir.constant(-1 : index) : i64
    %55 = llvm.extractvalue %23[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %56 = llvm.extractvalue %5[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %57 = llvm.extractvalue %35[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %58 = llvm.extractvalue %29[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %59 = llvm.extractvalue %17[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %60 = llvm.extractvalue %11[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    llvm.br ^bb1(%49 : i64)
  ^bb1(%61: i64):  // 2 preds: ^bb0, ^bb8
    %62 = llvm.icmp "slt" %61, %48 : i64
    llvm.cond_br %62, ^bb2, ^bb9
  ^bb2:  // pred: ^bb1
    %63 = llvm.getelementptr %57[%61] : (!llvm.ptr, i64) -> !llvm.ptr, i64
    %64 = llvm.load %63 : !llvm.ptr -> i64
    %65 = llvm.add %61, %50 : i64
    %66 = llvm.getelementptr %57[%65] : (!llvm.ptr, i64) -> !llvm.ptr, i64
    %67 = llvm.load %66 : !llvm.ptr -> i64
    llvm.br ^bb3(%64 : i64)
  ^bb3(%68: i64):  // 2 preds: ^bb2, ^bb7
    %69 = llvm.icmp "slt" %68, %67 : i64
    llvm.cond_br %69, ^bb4, ^bb8
  ^bb4:  // pred: ^bb3
    %70 = llvm.getelementptr %58[%68] : (!llvm.ptr, i64) -> !llvm.ptr, i64
    %71 = llvm.load %70 : !llvm.ptr -> i64
    %72 = llvm.getelementptr %55[%68] : (!llvm.ptr, i64) -> !llvm.ptr, f64
    %73 = llvm.load %72 : !llvm.ptr -> f64
    %74 = llvm.getelementptr %59[%71] : (!llvm.ptr, i64) -> !llvm.ptr, i64
    %75 = llvm.load %74 : !llvm.ptr -> i64
    %76 = llvm.add %71, %50 : i64
    %77 = llvm.getelementptr %59[%76] : (!llvm.ptr, i64) -> !llvm.ptr, i64
    %78 = llvm.load %77 : !llvm.ptr -> i64
    %79 = "llvm.intr.vscale"() : () -> i64
    %80 = llvm.mul %79, %51 : i64
    llvm.br ^bb5(%75 : i64)
  ^bb5(%81: i64):  // 2 preds: ^bb4, ^bb6
    %82 = llvm.icmp "slt" %81, %78 : i64
    llvm.cond_br %82, ^bb6, ^bb7
  ^bb6:  // pred: ^bb5
    %83 = llvm.mul %81, %54 overflow<nsw> : i64
    %84 = llvm.add %78, %83 : i64
    %85 = llvm.icmp "slt" %80, %84 : i64
    %86 = llvm.select %85, %80, %84 : i1, i64
    %87 = llvm.intr.stepvector : vector<[32]xi32>
    %88 = llvm.trunc %86 : i64 to i32
    %89 = llvm.insertelement %88, %47[%46 : i32] : vector<[32]xi32>
    %90 = llvm.shufflevector %89, %47 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] : vector<[32]xi32> 
    %91 = llvm.icmp "slt" %87, %90 : vector<[32]xi32>
    %92 = llvm.getelementptr %60[%81] : (!llvm.ptr, i64) -> !llvm.ptr, i64
    %93 = llvm.intr.masked.load %92, %91, %52 {alignment = 8 : i32} : (!llvm.ptr, vector<[32]xi1>, vector<[32]xi64>) -> vector<[32]xi64>
    %94 = llvm.getelementptr %60[%81] : (!llvm.ptr, i64) -> !llvm.ptr, i64
    %95 = llvm.intr.masked.load %94, %91, %52 {alignment = 8 : i32} : (!llvm.ptr, vector<[32]xi1>, vector<[32]xi64>) -> vector<[32]xi64>
    %96 = llvm.extractvalue %43[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %97 = llvm.mul %61, %45 : i64
    %98 = llvm.add %97, %49 : i64
    %99 = llvm.getelementptr %96[%98] : (!llvm.ptr, i64) -> !llvm.ptr, f64
    %100 = llvm.getelementptr %99[%95] : (!llvm.ptr, vector<[32]xi64>) -> !llvm.vec<? x 32 x  ptr>, f64
    %101 = llvm.intr.masked.gather %100, %91, %53 {alignment = 8 : i32} : (!llvm.vec<? x 32 x  ptr>, vector<[32]xi1>, vector<[32]xf64>) -> vector<[32]xf64>
    %102 = llvm.insertelement %73, %44[%46 : i32] : vector<[32]xf64>
    %103 = llvm.shufflevector %102, %44 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] : vector<[32]xf64> 
    %104 = llvm.getelementptr %56[%81] : (!llvm.ptr, i64) -> !llvm.ptr, f64
    %105 = llvm.intr.masked.load %104, %91, %53 {alignment = 8 : i32} : (!llvm.ptr, vector<[32]xi1>, vector<[32]xf64>) -> vector<[32]xf64>
    %106 = llvm.fmul %103, %105 : vector<[32]xf64>
    %107 = llvm.fadd %101, %106 : vector<[32]xf64>
    %108 = llvm.extractvalue %43[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %109 = llvm.mul %61, %45 : i64
    %110 = llvm.add %109, %49 : i64
    %111 = llvm.getelementptr %108[%110] : (!llvm.ptr, i64) -> !llvm.ptr, f64
    %112 = llvm.getelementptr %111[%93] : (!llvm.ptr, vector<[32]xi64>) -> !llvm.vec<? x 32 x  ptr>, f64
    llvm.intr.masked.scatter %107, %112, %91 {alignment = 8 : i32} : vector<[32]xf64>, vector<[32]xi1> into !llvm.vec<? x 32 x  ptr>
    %113 = llvm.add %81, %80 : i64
    llvm.br ^bb5(%113 : i64)
  ^bb7:  // pred: ^bb5
    %114 = llvm.add %68, %50 : i64
    llvm.br ^bb3(%114 : i64)
  ^bb8:  // pred: ^bb3
    %115 = llvm.add %61, %50 : i64
    llvm.br ^bb1(%115 : i64)
  ^bb9:  // pred: ^bb1
    llvm.return %43 : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>
  }
  llvm.func @main() -> i32 {
    %0 = llvm.mlir.constant(0 : index) : i64
    %1 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>
    %2 = llvm.mlir.constant(64 : index) : i64
    %3 = llvm.mlir.constant(true) : i1
    %4 = llvm.mlir.constant(256956.87259700001 : f64) : f64
    %5 = llvm.mlir.constant(100 : index) : i64
    %6 = llvm.mlir.constant(1 : index) : i64
    %7 = llvm.mlir.zero : !llvm.ptr
    %8 = llvm.getelementptr %7[10000] : (!llvm.ptr) -> !llvm.ptr, f64
    %9 = llvm.ptrtoint %8 : !llvm.ptr to i64
    %10 = llvm.add %9, %2 : i64
    %11 = llvm.call @malloc(%10) : (i64) -> !llvm.ptr
    %12 = llvm.ptrtoint %11 : !llvm.ptr to i64
    %13 = llvm.sub %2, %6 : i64
    %14 = llvm.add %12, %13 : i64
    %15 = llvm.urem %14, %2 : i64
    %16 = llvm.sub %14, %15 : i64
    %17 = llvm.inttoptr %16 : i64 to !llvm.ptr
    %18 = llvm.insertvalue %11, %1[0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %19 = llvm.insertvalue %17, %18[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %20 = llvm.insertvalue %0, %19[2] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %21 = llvm.insertvalue %5, %20[3, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %22 = llvm.insertvalue %5, %21[3, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %23 = llvm.insertvalue %5, %22[4, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %24 = llvm.insertvalue %6, %23[4, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %25 = llvm.call @assemble_sparse_tensor1() : () -> !llvm.struct<(struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>, struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>, struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>, struct<(array<2 x i64>, array<3 x i64>)>)>
    %26 = llvm.extractvalue %25[0] : !llvm.struct<(struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>, struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>, struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>, struct<(array<2 x i64>, array<3 x i64>)>)> 
    %27 = llvm.extractvalue %25[1] : !llvm.struct<(struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>, struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>, struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>, struct<(array<2 x i64>, array<3 x i64>)>)> 
    %28 = llvm.extractvalue %25[2] : !llvm.struct<(struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>, struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>, struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>, struct<(array<2 x i64>, array<3 x i64>)>)> 
    %29 = llvm.extractvalue %25[3] : !llvm.struct<(struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>, struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>, struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>, struct<(array<2 x i64>, array<3 x i64>)>)> 
    %30 = llvm.call @assemble_sparse_tensor2() : () -> !llvm.struct<(struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>, struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>, struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>, struct<(array<2 x i64>, array<3 x i64>)>)>
    %31 = llvm.extractvalue %30[0] : !llvm.struct<(struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>, struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>, struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>, struct<(array<2 x i64>, array<3 x i64>)>)> 
    %32 = llvm.extractvalue %30[1] : !llvm.struct<(struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>, struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>, struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>, struct<(array<2 x i64>, array<3 x i64>)>)> 
    %33 = llvm.extractvalue %30[2] : !llvm.struct<(struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>, struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>, struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>, struct<(array<2 x i64>, array<3 x i64>)>)> 
    %34 = llvm.extractvalue %30[3] : !llvm.struct<(struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>, struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>, struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>, struct<(array<2 x i64>, array<3 x i64>)>)> 
    %35 = llvm.extractvalue %26[0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %36 = llvm.extractvalue %26[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %37 = llvm.extractvalue %26[2] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %38 = llvm.extractvalue %26[3, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %39 = llvm.extractvalue %26[4, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %40 = llvm.extractvalue %27[0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %41 = llvm.extractvalue %27[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %42 = llvm.extractvalue %27[2] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %43 = llvm.extractvalue %27[3, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %44 = llvm.extractvalue %27[4, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %45 = llvm.extractvalue %28[0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %46 = llvm.extractvalue %28[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %47 = llvm.extractvalue %28[2] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %48 = llvm.extractvalue %28[3, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %49 = llvm.extractvalue %28[4, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %50 = llvm.extractvalue %31[0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %51 = llvm.extractvalue %31[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %52 = llvm.extractvalue %31[2] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %53 = llvm.extractvalue %31[3, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %54 = llvm.extractvalue %31[4, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %55 = llvm.extractvalue %32[0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %56 = llvm.extractvalue %32[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %57 = llvm.extractvalue %32[2] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %58 = llvm.extractvalue %32[3, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %59 = llvm.extractvalue %32[4, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %60 = llvm.extractvalue %33[0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %61 = llvm.extractvalue %33[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %62 = llvm.extractvalue %33[2] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %63 = llvm.extractvalue %33[3, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %64 = llvm.extractvalue %33[4, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %65 = llvm.extractvalue %24[0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %66 = llvm.extractvalue %24[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %67 = llvm.extractvalue %24[2] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %68 = llvm.extractvalue %24[3, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %69 = llvm.extractvalue %24[3, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %70 = llvm.extractvalue %24[4, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %71 = llvm.extractvalue %24[4, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %72 = llvm.call @sparse_sparse_matmul(%35, %36, %37, %38, %39, %40, %41, %42, %43, %44, %45, %46, %47, %48, %49, %29, %50, %51, %52, %53, %54, %55, %56, %57, %58, %59, %60, %61, %62, %63, %64, %34, %65, %66, %67, %68, %69, %70, %71) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, !llvm.ptr, !llvm.ptr, i64, i64, i64, !llvm.ptr, !llvm.ptr, i64, i64, i64, !llvm.struct<(array<2 x i64>, array<3 x i64>)>, !llvm.ptr, !llvm.ptr, i64, i64, i64, !llvm.ptr, !llvm.ptr, i64, i64, i64, !llvm.ptr, !llvm.ptr, i64, i64, i64, !llvm.struct<(array<2 x i64>, array<3 x i64>)>, !llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64) -> !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>
    %73 = llvm.extractvalue %72[0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %74 = llvm.extractvalue %72[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %75 = llvm.extractvalue %72[2] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %76 = llvm.extractvalue %72[3, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %77 = llvm.extractvalue %72[3, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %78 = llvm.extractvalue %72[4, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %79 = llvm.extractvalue %72[4, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %80 = llvm.call @compute_sum(%73, %74, %75, %76, %77, %78, %79) : (!llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64) -> f64
    %81 = llvm.fcmp "oeq" %80, %4 : f64
    %82 = llvm.xor %81, %3 : i1
    %83 = llvm.zext %82 : i1 to i32
    llvm.return %83 : i32
  }
  llvm.func @assemble_sparse_tensor1() -> !llvm.struct<(struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>, struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>, struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>, struct<(array<2 x i64>, array<3 x i64>)>)> attributes {sym_visibility = "private"} {
    %0 = llvm.mlir.addressof @__constant_101xindex_0 : !llvm.ptr
    %1 = llvm.mlir.constant(101 : index) : i64
    %2 = llvm.mlir.addressof @__constant_500xindex : !llvm.ptr
    %3 = llvm.mlir.constant(0 : index) : i64
    %4 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>
    %5 = llvm.mlir.constant(3735928559 : index) : i64
    %6 = llvm.mlir.addressof @__constant_500xf64 : !llvm.ptr
    %7 = llvm.mlir.constant(1 : index) : i64
    %8 = llvm.mlir.constant(500 : index) : i64
    %9 = llvm.mlir.constant(101 : i64) : i64
    %10 = llvm.mlir.constant(100 : i64) : i64
    %11 = llvm.mlir.constant(0 : i64) : i64
    %12 = llvm.mlir.undef : !llvm.struct<(array<2 x i64>, array<3 x i64>)>
    %13 = llvm.mlir.constant(100 : index) : i64
    %14 = llvm.getelementptr %6[0, 0] : (!llvm.ptr) -> !llvm.ptr, !llvm.array<500 x f64>
    %15 = llvm.inttoptr %5 : i64 to !llvm.ptr
    %16 = llvm.insertvalue %15, %4[0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %17 = llvm.insertvalue %14, %16[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %18 = llvm.insertvalue %3, %17[2] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %19 = llvm.insertvalue %8, %18[3, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %20 = llvm.insertvalue %7, %19[4, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %21 = llvm.getelementptr %2[0, 0] : (!llvm.ptr) -> !llvm.ptr, !llvm.array<500 x i64>
    %22 = llvm.inttoptr %5 : i64 to !llvm.ptr
    %23 = llvm.insertvalue %22, %4[0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %24 = llvm.insertvalue %21, %23[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %25 = llvm.insertvalue %3, %24[2] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %26 = llvm.insertvalue %8, %25[3, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %27 = llvm.insertvalue %7, %26[4, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %28 = llvm.getelementptr %0[0, 0] : (!llvm.ptr) -> !llvm.ptr, !llvm.array<101 x i64>
    %29 = llvm.inttoptr %5 : i64 to !llvm.ptr
    %30 = llvm.insertvalue %29, %4[0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %31 = llvm.insertvalue %28, %30[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %32 = llvm.insertvalue %3, %31[2] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %33 = llvm.insertvalue %1, %32[3, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %34 = llvm.insertvalue %7, %33[4, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %35 = llvm.insertvalue %11, %12[1, 0] : !llvm.struct<(array<2 x i64>, array<3 x i64>)> 
    %36 = llvm.insertvalue %11, %35[1, 1] : !llvm.struct<(array<2 x i64>, array<3 x i64>)> 
    %37 = llvm.insertvalue %11, %36[1, 2] : !llvm.struct<(array<2 x i64>, array<3 x i64>)> 
    %38 = llvm.insertvalue %10, %37[0, 0] : !llvm.struct<(array<2 x i64>, array<3 x i64>)> 
    %39 = llvm.insertvalue %10, %38[0, 1] : !llvm.struct<(array<2 x i64>, array<3 x i64>)> 
    %40 = llvm.insertvalue %9, %39[1, 0] : !llvm.struct<(array<2 x i64>, array<3 x i64>)> 
    %41 = llvm.getelementptr %28[%13] : (!llvm.ptr, i64) -> !llvm.ptr, i64
    %42 = llvm.load %41 : !llvm.ptr -> i64
    %43 = llvm.insertvalue %42, %40[1, 1] : !llvm.struct<(array<2 x i64>, array<3 x i64>)> 
    %44 = llvm.insertvalue %42, %43[1, 2] : !llvm.struct<(array<2 x i64>, array<3 x i64>)> 
    %45 = llvm.mlir.undef : !llvm.struct<(struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>, struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>, struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>, struct<(array<2 x i64>, array<3 x i64>)>)>
    %46 = llvm.insertvalue %34, %45[0] : !llvm.struct<(struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>, struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>, struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>, struct<(array<2 x i64>, array<3 x i64>)>)> 
    %47 = llvm.insertvalue %27, %46[1] : !llvm.struct<(struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>, struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>, struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>, struct<(array<2 x i64>, array<3 x i64>)>)> 
    %48 = llvm.insertvalue %20, %47[2] : !llvm.struct<(struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>, struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>, struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>, struct<(array<2 x i64>, array<3 x i64>)>)> 
    %49 = llvm.insertvalue %44, %48[3] : !llvm.struct<(struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>, struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>, struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>, struct<(array<2 x i64>, array<3 x i64>)>)> 
    llvm.return %49 : !llvm.struct<(struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>, struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>, struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>, struct<(array<2 x i64>, array<3 x i64>)>)>
  }
  llvm.func @assemble_sparse_tensor2() -> !llvm.struct<(struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>, struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>, struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>, struct<(array<2 x i64>, array<3 x i64>)>)> attributes {sym_visibility = "private"} {
    %0 = llvm.mlir.addressof @__constant_101xindex : !llvm.ptr
    %1 = llvm.mlir.constant(101 : index) : i64
    %2 = llvm.mlir.addressof @__constant_1999xindex : !llvm.ptr
    %3 = llvm.mlir.constant(0 : index) : i64
    %4 = llvm.mlir.undef : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>
    %5 = llvm.mlir.constant(3735928559 : index) : i64
    %6 = llvm.mlir.addressof @__constant_1999xf64 : !llvm.ptr
    %7 = llvm.mlir.constant(1 : index) : i64
    %8 = llvm.mlir.constant(1999 : index) : i64
    %9 = llvm.mlir.constant(101 : i64) : i64
    %10 = llvm.mlir.constant(100 : i64) : i64
    %11 = llvm.mlir.constant(0 : i64) : i64
    %12 = llvm.mlir.undef : !llvm.struct<(array<2 x i64>, array<3 x i64>)>
    %13 = llvm.mlir.constant(100 : index) : i64
    %14 = llvm.getelementptr %6[0, 0] : (!llvm.ptr) -> !llvm.ptr, !llvm.array<1999 x f64>
    %15 = llvm.inttoptr %5 : i64 to !llvm.ptr
    %16 = llvm.insertvalue %15, %4[0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %17 = llvm.insertvalue %14, %16[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %18 = llvm.insertvalue %3, %17[2] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %19 = llvm.insertvalue %8, %18[3, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %20 = llvm.insertvalue %7, %19[4, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %21 = llvm.getelementptr %2[0, 0] : (!llvm.ptr) -> !llvm.ptr, !llvm.array<1999 x i64>
    %22 = llvm.inttoptr %5 : i64 to !llvm.ptr
    %23 = llvm.insertvalue %22, %4[0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %24 = llvm.insertvalue %21, %23[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %25 = llvm.insertvalue %3, %24[2] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %26 = llvm.insertvalue %8, %25[3, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %27 = llvm.insertvalue %7, %26[4, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %28 = llvm.getelementptr %0[0, 0] : (!llvm.ptr) -> !llvm.ptr, !llvm.array<101 x i64>
    %29 = llvm.inttoptr %5 : i64 to !llvm.ptr
    %30 = llvm.insertvalue %29, %4[0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %31 = llvm.insertvalue %28, %30[1] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %32 = llvm.insertvalue %3, %31[2] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %33 = llvm.insertvalue %1, %32[3, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %34 = llvm.insertvalue %7, %33[4, 0] : !llvm.struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)> 
    %35 = llvm.insertvalue %11, %12[1, 0] : !llvm.struct<(array<2 x i64>, array<3 x i64>)> 
    %36 = llvm.insertvalue %11, %35[1, 1] : !llvm.struct<(array<2 x i64>, array<3 x i64>)> 
    %37 = llvm.insertvalue %11, %36[1, 2] : !llvm.struct<(array<2 x i64>, array<3 x i64>)> 
    %38 = llvm.insertvalue %10, %37[0, 0] : !llvm.struct<(array<2 x i64>, array<3 x i64>)> 
    %39 = llvm.insertvalue %10, %38[0, 1] : !llvm.struct<(array<2 x i64>, array<3 x i64>)> 
    %40 = llvm.insertvalue %9, %39[1, 0] : !llvm.struct<(array<2 x i64>, array<3 x i64>)> 
    %41 = llvm.getelementptr %28[%13] : (!llvm.ptr, i64) -> !llvm.ptr, i64
    %42 = llvm.load %41 : !llvm.ptr -> i64
    %43 = llvm.insertvalue %42, %40[1, 1] : !llvm.struct<(array<2 x i64>, array<3 x i64>)> 
    %44 = llvm.insertvalue %42, %43[1, 2] : !llvm.struct<(array<2 x i64>, array<3 x i64>)> 
    %45 = llvm.mlir.undef : !llvm.struct<(struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>, struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>, struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>, struct<(array<2 x i64>, array<3 x i64>)>)>
    %46 = llvm.insertvalue %34, %45[0] : !llvm.struct<(struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>, struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>, struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>, struct<(array<2 x i64>, array<3 x i64>)>)> 
    %47 = llvm.insertvalue %27, %46[1] : !llvm.struct<(struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>, struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>, struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>, struct<(array<2 x i64>, array<3 x i64>)>)> 
    %48 = llvm.insertvalue %20, %47[2] : !llvm.struct<(struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>, struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>, struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>, struct<(array<2 x i64>, array<3 x i64>)>)> 
    %49 = llvm.insertvalue %44, %48[3] : !llvm.struct<(struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>, struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>, struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>, struct<(array<2 x i64>, array<3 x i64>)>)> 
    llvm.return %49 : !llvm.struct<(struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>, struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>, struct<(ptr, ptr, i64, array<1 x i64>, array<1 x i64>)>, struct<(array<2 x i64>, array<3 x i64>)>)>
  }
}

