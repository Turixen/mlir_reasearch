// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @matmul(%t : tensor<10x10xf64, #CSR>, %s : tensor<10x10xf64>, %out : tensor<10x10xf64>)
        -> tensor<10x10xf64> {
        %0 = linalg.matmul
            ins(%t, %s: tensor<10x10xf64, #CSR>, tensor<10x10xf64>)
            outs(%out: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %0 : tensor<10x10xf64>
    }

    func.func @main() -> i64 {
        %c = tensor.empty() : tensor<10x10xf64>
        %t_sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %s = arith.constant dense<[
            [5.932167475827402, 9.448248224674423, 2.2780429122646186, 0.0005201612076155548, 6.315767867520039, 1.4820902032714123, 0.13812951368177506, 3.9725713784240346, 3.3634644157789664, 5.432109757199321], [8.521497429248035, 7.38743553392495, 6.553978403971444, 9.842165724281532, 1.8968110065087784, 8.72779521487471, 1.453574044017486, 0.022090877201269565, 7.13413195230967, 1.7924466299819175], [7.9171890083941845, 0.7948562698170847, 7.253780159922959, 2.136440673460104, 3.828104894607435, 1.2701861089982425, 5.066556300144276, 0.33606538998541935, 1.4158472880114759, 3.4852315589593976], [3.305385048782432, 4.202595164223669, 7.694025490253667, 1.3059497612448534, 8.034640892920514, 2.1888821356523813, 9.064890965323361, 0.7395564337555494, 0.5580250386227381, 7.74215556044405], [1.5050839275719452, 7.919167679358018, 9.636454169640624, 8.561438922842497, 5.36581711296977, 9.65496695839986, 1.356584356356716, 7.782169246661084, 3.1967272048445396, 8.263138695934716], [5.57252958334589, 4.632457911639514, 1.5651367010228456, 0.37486480100578756, 7.65652053875991, 0.30728702005387576, 9.984759346223683, 8.015241683737415, 6.544837839789785, 5.48725280863871], [1.3258854243690577, 3.471781842008368, 0.7391224268412255, 4.672771155427603, 9.858313981675872, 9.870829431290236, 9.123203367134359, 2.471515255155823, 7.4362272410869314, 8.33880755205514], [0.7446687469111657, 1.086071469555685, 0.9226422691412639, 9.257194463968917, 6.443572756157985, 0.21958630244713895, 6.282109609810024, 7.192381760654546, 0.3349999758190403, 9.981975150967035], [0.7137053717533748, 0.6854605703849193, 3.089147568151115, 2.8039348082006343, 6.327293269202967, 1.71829063148499, 3.327592399054957, 2.527788528226025, 7.572186379426383, 5.3129068596273985], [0.2746002392096514, 2.1851250032775402, 8.79048097494713, 0.386858407837688, 5.217259026996789, 6.556982623810756, 5.963101939204973, 6.853947217188432, 6.557506505326116, 5.911615261766686]
        ]> : tensor<10x10xf64>
        %result_matrix = call @matmul(%t_sparse, %s, %c) :
            (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %c1 = arith.constant 1 : index
        %element_f64 = tensor.extract %result_matrix[%c1, %c1] : tensor<10x10xf64>
        %element_i64 = arith.fptosi %element_f64 : f64 to i64
        return %element_i64 : i64
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[6.258147, 0.644039, 5.249245, 6.787295, 2.190110, 2.274311, 7.511082, 7.863319, 6.836221, 6.753196, 2.963033, 6.463634, 2.809486, 8.481253, 2.320383]> : tensor<15xf64>
        %row_ptr = arith.constant dense<[0, 4, 4, 4, 8, 8, 8, 11, 11, 11, 15]> : tensor<11xindex>
        %col_ind = arith.constant dense<[0, 3, 6, 9, 0, 3, 6, 9, 0, 3, 6, 0, 3, 6, 9]> : tensor<15xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<15xindex>), tensor<15xf64> to tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }
    
}
