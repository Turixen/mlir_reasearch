// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @matmul(%t : tensor<10x10xf64, #CSR>, %s : tensor<10x10xf64>, %out : tensor<10x10xf64>)
        -> tensor<10x10xf64> {
        %0 = linalg.matmul
            ins(%t, %s: tensor<10x10xf64, #CSR>, tensor<10x10xf64>)
            outs(%out: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %0 : tensor<10x10xf64>
    }

    func.func @main() -> i64 {
        %c = tensor.empty() : tensor<10x10xf64>
        %t_sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %s = arith.constant dense<[
            [7.614611418490851, 5.2141679273501005, 6.301054731753116, 6.664502146505214, 8.595291180273176, 8.749737891331531, 5.5038623393054475, 3.230562688442392, 9.021834186414745, 4.572022684096215], [8.702764179259251, 7.200232757185509, 5.805480874895432, 9.333294874794602, 2.234002992102261, 1.8352639105800606, 2.5931323813953755, 3.4591925524175435, 2.8356531458490664, 7.9754673987629765], [6.200038277460922, 6.401056642639573, 6.129034185730391, 8.898066321752879, 4.62170486708573, 0.41843234491322323, 6.65179090525235, 4.2502544730975265, 8.355376287050813, 8.80971526460117], [8.160728783003462, 6.787960065779871, 5.157378924565058, 0.8561737139251524, 6.10273054110691, 6.639585122567549, 7.331292403575052, 7.512846307036307, 9.179025144748108, 9.84497143011222], [6.088423409267376, 5.04930348056649, 2.619447870063439, 6.624986975616736, 0.47561313524833393, 6.215047792927848, 6.643378983148665, 3.087909615094863, 2.2207986059267606, 1.2893440102084697], [9.359692715599724, 1.2625047366074849, 1.1757476006494894, 7.132137979161596, 0.7673634011048536, 4.143477340625836, 3.8234432947691754, 1.4305476760495217, 8.9598845656653, 9.097824916758348], [2.679545590630007, 4.095219137461216, 2.099271815356216, 9.19057348700932, 9.150907824052933, 1.2684523132014358, 3.911961570659188, 4.558004841118281, 2.873878280537008, 7.093367061131307], [9.59533407262038, 4.8313517344292585, 1.0059938914423772, 1.3894643902846504, 0.2955580878387476, 4.530918346168608, 7.853378192108412, 6.795777667595759, 3.5808314742656746, 3.8663907945221565], [4.834614335912376, 9.19752246161637, 2.661324389836267, 8.757744824959348, 5.126092610146379, 3.25870580304633, 5.102593452196864, 2.6761275759213454, 8.938816961253234, 2.0078818233442766], [2.8495058430985143, 3.9987386142297785, 4.59952511013406, 5.77446929591572, 6.4198235559437915, 8.793572452485765, 9.45749652328834, 3.879909720993542, 1.3540915629563044, 5.225077590940236]
        ]> : tensor<10x10xf64>
        %result_matrix = call @matmul(%t_sparse, %s, %c) :
            (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %c1 = arith.constant 1 : index

        %element_f64 = tensor.extract %result_matrix[%c1, %c1] : tensor<10x10xf64>
        %element_i64 = arith.fptosi %element_f64 : f64 to i64
        return %element_i64 : i64
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[0.478089, 2.380990, 4.037475, 8.336871, 5.003693, 1.847647, 9.491521, 3.871175, 4.550335, 9.532426, 6.093060, 9.400656, 7.825170, 5.448105, 5.208180]> : tensor<15xf64>
        %row_ptr = arith.constant dense<[0, 4, 4, 4, 8, 8, 8, 11, 11, 11, 15]> : tensor<11xindex>
        %col_ind = arith.constant dense<[0, 3, 6, 9, 0, 3, 6, 9, 0, 6, 9, 0, 3, 6, 9]> : tensor<15xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<15xindex>), tensor<15xf64> to tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }
    
}
