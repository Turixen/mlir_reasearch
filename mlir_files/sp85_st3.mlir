// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @matmul(%t : tensor<10x10xf64, #CSR>, %s : tensor<10x10xf64>, %out : tensor<10x10xf64>)
        -> tensor<10x10xf64> {
        %0 = linalg.matmul
            ins(%t, %s: tensor<10x10xf64, #CSR>, tensor<10x10xf64>)
            outs(%out: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %0 : tensor<10x10xf64>
    }

    func.func @main() -> i64 {
        %c = tensor.empty() : tensor<10x10xf64>
        %t_sparse = call @test_assemble() : () -> tensor<10x10xf64, #CSR>
        %s = arith.constant dense<[
            [7.151626447160595, 3.5869362990292974, 1.396309341817784, 0.2235211914182511, 9.096999558410179, 3.6086825173637873, 3.3810247730114407, 8.53577650944479, 9.989588111041792, 9.545960173200335], [9.242380453222601, 4.045873056917096, 9.108606154962343, 6.830869728435194, 9.299133085312992, 5.587927726340247, 8.393403946743213, 9.604905324738787, 1.7007259731519797, 0.5382031222735972], [2.970084845829455, 8.84706378522944, 7.270318397925544, 2.824522993031815, 6.007389268837166, 9.811602209339163, 7.113903656236821, 1.9066436593982172, 9.488719628331992, 6.223210722010246], [4.495900724743297, 8.344819018348083, 2.1186825699806624, 3.158261534028899, 6.838814075431422, 3.708810737245426, 7.072792077380598, 6.582847842830784, 6.554393186669265, 5.609917373630973], [7.593281054526793, 5.62991586805417, 1.3944495060073736, 4.861323943673509, 1.7387941092184211, 1.5651068052455108, 1.0068876053383724, 9.074047599286692, 4.298695904991893, 5.305472350025261], [4.424524051305002, 6.919210901431629, 8.63159753970578, 1.6788517774534628, 5.595058880188489, 3.4282326101818295, 6.44756618214064, 2.459401218607055, 9.383546652166379, 2.9991746985939463], [6.739825932817781, 2.9089275094421274, 4.613823835819508, 2.379888267489041, 8.540322395645543, 0.09592770917899784, 2.6122706235076167, 8.664518276657203, 7.164043955463702, 4.798482216121037], [8.313748507440671, 6.89938775060673, 7.361728748938985, 1.5324760043834484, 2.7149033286513404, 8.777620230574295, 0.5153007619729832, 4.390981283864226, 3.427128681034195, 8.09962470720812], [3.8578377117860696, 4.58590071692277, 3.0525067849284127, 6.542572448348205, 5.8085887677746175, 5.763142597981352, 5.545933715800166, 2.102657717444696, 8.840059166410025, 5.937756300329978], [4.489929823660196, 3.8626664441450096, 4.837696214744502, 4.137976522527572, 5.4233016914074605, 2.6631352399479735, 1.071491868746196, 4.729917916036284, 4.090661466013808, 6.197190513192553]
        ]> : tensor<10x10xf64>
        %result_matrix = call @matmul(%t_sparse, %s, %c) :
            (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %c1 = arith.constant 1 : index
        %element_f64 = tensor.extract %result_matrix[%c1, %c1] : tensor<10x10xf64>
        %element_i64 = arith.fptosi %element_f64 : f64 to i64
        return %element_i64 : i64
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[4.613487, 8.485233, 2.849199, 4.259534, 4.684206, 2.178542, 3.219614, 1.374844, 5.908427, 6.242515, 4.294654, 8.491246, 8.322716, 7.778194, 5.269567]> : tensor<15xf64>
        %row_ptr = arith.constant dense<[0, 4, 4, 4, 8, 8, 8, 11, 11, 11, 15]> : tensor<11xindex>
        %col_ind = arith.constant dense<[0, 3, 6, 9, 0, 3, 6, 9, 3, 6, 9, 0, 3, 6, 9]> : tensor<15xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<15xindex>), tensor<15xf64> to tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }
    
}
