// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @matmul(%t : tensor<10x10xf64, #CSR>, %s : tensor<10x10xf64>, %out : tensor<10x10xf64>)
        -> tensor<10x10xf64> {
        %0 = linalg.matmul
            ins(%t, %s: tensor<10x10xf64, #CSR>, tensor<10x10xf64>)
            outs(%out: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %0 : tensor<10x10xf64>
    }

    func.func @main() -> i64 {
        %c = tensor.empty() : tensor<10x10xf64>
        %t_sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %s = arith.constant dense<[
            [[3.632578, 9.926135, 8.226202, 7.113836, 4.521381, 8.273153, 3.027419, 5.610165, 8.399729, 8.585048], [4.004300, 0.642692, 6.124816, 0.722809, 6.330346, 2.974309, 0.540449, 2.040809, 7.373944, 4.124593], [4.072510, 6.934862, 7.553000, 1.089356, 9.855963, 9.468208, 5.591592, 4.589873, 9.165382, 8.052477], [9.419572, 5.837853, 6.777076, 2.226101, 0.845610, 8.845253, 2.600624, 4.885309, 1.351244, 2.956311], [8.871905, 5.906317, 0.108554, 0.364834, 2.180731, 4.064696, 8.021814, 1.225080, 5.059436, 0.337139], [8.764981, 0.624754, 9.026311, 0.051285, 8.879069, 0.672558, 8.269796, 2.946592, 0.142540, 8.181483], [3.994736, 1.497482, 9.744533, 2.750218, 7.243701, 1.530435, 7.280525, 7.364993, 5.613044, 0.676879], [0.127320, 7.334160, 2.340732, 3.208443, 5.291219, 4.730524, 3.136342, 2.117196, 2.440477, 2.048920], [4.668183, 4.688055, 2.207740, 0.827091, 5.393635, 9.434145, 5.747785, 2.172163, 6.175084, 3.662661], [9.755581, 1.355868, 9.565191, 2.656243, 7.376469, 1.327623, 9.337714, 0.475270, 7.834539, 5.618918]]
        ]> : tensor<10x10xf64>
        %result_matrix = call @matmul(%t_sparse, %s, %c) :
            (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %c1 = arith.constant 1 : index

        %element_f64 = tensor.extract %result_matrix[%c1, %c1] : tensor<10x10xf64>
        %element_i64 = arith.fptosi %element_f64 : f64 to i64
        return %element_i64 : i64
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[9.880166, 7.821479, 8.537541, 9.296388, 6.631125, 7.128313, 9.928376, 4.120836, 8.770755, 3.898124, 8.523685, 1.772156, 5.086806, 3.946433, 6.019454, 5.503002, 9.328737, 8.123723, 4.754521, 3.595678, 6.010278, 7.920857, 3.073579, 7.326414, 0.915184, 1.103315, 9.149879, 1.763691, 7.003847, 4.273013, 3.181247, 4.643351, 7.498581, 4.013966, 4.766261, 0.064806, 2.380174, 0.157128, 5.867039, 0.379320, 8.075632, 4.495904, 9.077324, 8.475270, 9.905898]> : tensor<45xf64>
        %row_ptr = arith.constant dense<[0, 4, 6, 10, 15, 20, 24, 31, 34, 40, 45]> : tensor<11xindex>
        %col_ind = arith.constant dense<[1, 3, 6, 8, 1, 6, 0, 2, 3, 5, 1, 2, 3, 5, 9, 1, 2, 3, 6, 9, 2, 5, 7, 8, 0, 1, 3, 5, 6, 7, 9, 1, 2, 3, 1, 3, 4, 7, 8, 9, 0, 1, 4, 8, 9]> : tensor<45xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<45xindex>), tensor<45xf64> to tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }
    
}
