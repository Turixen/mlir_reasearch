// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @sparse_dense_matmul(%sparse: tensor<10x10xf64, #CSR>,%dense: tensor<10x10xf64>,%init: tensor<10x10xf64>
    ) -> tensor<10x10xf64> {
        %res = linalg.matmul ins(%sparse, %dense: tensor<10x10xf64, #CSR>, tensor<10x10xf64>) 
            outs(%init: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %res : tensor<10x10xf64>
    }

    func.func @main() -> i32 {
        %c0 = arith.constant 0 : index
        %c1 = arith.constant 1 : index
        %rows = arith.constant 10 : index
        %cols = arith.constant 10 : index
        %zero_f64 = arith.constant 0.0 : f64

        %init = tensor.empty() : tensor<10x10xf64>
        %sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %dense = arith.constant dense<[[4.237887, 9.028003, 2.972949, 7.148211, 9.531279, 7.538707, 1.888281, 5.143334, 4.947687, 3.432629], [7.231827, 2.658611, 4.807751, 1.570250, 9.699922, 9.130921, 9.094026, 3.021969, 0.422691, 3.853755], [8.444167, 5.059383, 5.321696, 5.650246, 9.568390, 4.128655, 0.820490, 7.124095, 1.612672, 5.377565], [4.966117, 2.947078, 6.194062, 0.037965, 5.272473, 1.497658, 7.721856, 0.801753, 9.787423, 8.983214], [7.421341, 5.373333, 7.655123, 5.411066, 6.814538, 5.706064, 5.325353, 0.884069, 7.928542, 9.583833], [9.502861, 6.654281, 6.642770, 3.292611, 9.268592, 0.411937, 0.989329, 9.286295, 2.473268, 3.804279], [9.340301, 4.064765, 1.576627, 7.895087, 9.007154, 2.276075, 4.306574, 4.503280, 9.391054, 4.253967], [1.983587, 5.049695, 6.802881, 1.032848, 7.811325, 8.471955, 7.012336, 6.994465, 4.692906, 0.651053], [1.233604, 9.735160, 0.671269, 0.569466, 9.691371, 7.470112, 1.266665, 9.888066, 5.503520, 1.098919], [3.278664, 0.860113, 9.944740, 4.620194, 4.888582, 1.689690, 2.017521, 6.648614, 0.289925, 4.685798]]> : tensor<10x10xf64>

        %computed = call @sparse_dense_matmul(%sparse, %dense, %init) : (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %expected = arith.constant dense<[[199.254630, 119.855392, 234.880018, 124.210085, 216.920939, 86.324432, 105.955400, 154.429736, 130.686998, 203.852770], [172.944201, 227.297061, 120.684499, 133.481344, 269.205728, 151.084925, 68.683746, 193.537648, 159.027584, 122.584199], [48.858364, 27.568742, 83.120506, 44.197234, 54.488976, 32.013235, 36.103596, 36.500699, 39.404638, 66.956559], [94.511676, 98.371916, 155.390475, 57.032303, 191.140005, 145.843355, 119.132527, 156.573050, 65.588839, 85.191757], [150.273881, 175.408119, 158.014579, 111.126071, 226.129107, 115.276460, 59.201243, 189.555070, 110.607569, 121.076076], [158.609133, 98.316053, 142.128646, 47.679974, 200.508816, 121.375775, 147.690822, 109.977043, 97.214014, 122.989349], [30.522447, 58.117614, 20.544717, 11.163924, 64.927536, 32.042390, 7.892156, 65.789579, 29.409375, 14.725214], [160.867972, 176.184683, 115.125811, 120.899911, 251.097075, 165.437548, 121.828673, 168.179632, 199.362907, 116.737164], [43.111745, 101.814463, 62.834007, 60.874258, 121.940222, 85.867234, 25.377370, 107.607581, 55.874192, 44.359767], [211.911476, 173.750197, 116.972627, 177.761043, 248.507590, 117.590832, 85.128957, 140.539331, 174.530725, 140.365928]]> : tensor<10x10xf64>

        // Validate each element
        %false = arith.constant "false" : i1
        %flag = scf.for %i = %c0 to %rows step %c1 iter_args(%f_iter = %false) -> (i1) {
            %flag_row = scf.for %j = %c0 to %cols step %c1 iter_args(%f_in = %f_iter) -> (i1) {
                %cmp_c = tensor.extract %computed[%i, %j] : tensor<10x10xf64>
                %cmp_e = tensor.extract %expected[%i, %j] : tensor<10x10xf64>
                %neq = arith.cmpf une, %cmp_c, %cmp_e : f64
                %new_f = arith.ori %f_in, %neq : i1
                scf.yield %new_f : i1
            }
            scf.yield %flag_row : i1
        }

        %zero_i32 = arith.constant 0 : i32
        %one_i32 = arith.constant 1 : i32
        %status = scf.if %flag -> (i32) {
            scf.yield %one_i32 : i32
        } else {
            scf.yield %zero_i32 : i32
        }
        return %status : i32
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[0.017443, 5.879881, 5.769627, 6.379034, 4.686637, 8.829114, 8.337096, 5.073599, 7.348624, 2.324357, 6.822674, 0.644503, 3.995882, 4.880917, 6.218592, 1.362057, 3.992618, 5.155319, 8.691475, 4.513840, 4.682491, 7.499142, 5.631637, 5.546117, 7.509698, 3.398652, 6.474891, 0.101112, 3.829659, 3.177750, 2.674240, 4.141942, 1.703248, 6.208620, 8.549512, 5.917684, 7.146474, 5.261875, 5.190474, 4.394938, 7.829209, 1.950973, 5.082538, 4.641064, 8.611629]> : tensor<45xf64>
        %row_ptr = arith.constant dense<[0, 6, 11, 14, 19, 24, 30, 32, 37, 40, 45]> : tensor<11xindex>
        %col_ind = arith.constant dense<[1, 2, 3, 4, 5, 9, 0, 4, 5, 6, 8, 3, 4, 9, 1, 3, 7, 8, 9, 0, 4, 5, 8, 9, 1, 2, 3, 4, 5, 7, 5, 8, 2, 4, 6, 7, 8, 0, 8, 9, 0, 2, 4, 5, 6]> : tensor<45xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<45xindex>), tensor<45xf64> to tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }

}
