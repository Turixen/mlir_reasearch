// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @sparse_dense_matmul(%sparse: tensor<10x10xf64, #CSR>,%dense: tensor<10x10xf64>,%init: tensor<10x10xf64>
    ) -> tensor<10x10xf64> {
        %res = linalg.matmul ins(%sparse, %dense: tensor<10x10xf64, #CSR>, tensor<10x10xf64>) 
            outs(%init: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %res : tensor<10x10xf64>
    }

    func.func @main() -> i32 {
        %c0 = arith.constant 0 : index
        %c1 = arith.constant 1 : index
        %rows = arith.constant 10 : index
        %cols = arith.constant 10 : index
        %zero_f64 = arith.constant 0.0 : f64

        %init = tensor.empty() : tensor<10x10xf64>
        %sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %dense = arith.constant dense<[[3.817554, 8.884029, 3.725528, 3.762556, 4.296372, 8.266308, 3.192987, 2.690781, 0.708756, 2.794019], [6.995841, 9.303668, 1.844326, 1.294250, 0.267485, 4.243963, 5.619243, 7.207961, 5.912964, 1.189305], [2.030809, 9.942697, 8.801673, 2.735413, 5.737619, 1.025004, 7.937160, 6.288763, 0.809421, 9.875072], [2.744940, 6.269235, 2.887706, 3.870433, 8.593682, 0.003612, 4.170626, 3.043631, 0.774430, 7.254779], [3.547538, 5.898700, 2.160792, 7.307785, 1.885717, 9.265505, 8.764884, 4.952745, 0.859461, 1.636893], [9.987363, 6.875236, 9.945709, 5.706060, 8.974790, 8.723978, 3.666442, 3.213606, 2.378489, 8.123903], [0.108953, 1.912313, 5.960091, 4.094569, 0.265562, 4.407832, 0.718996, 9.928018, 3.595707, 7.212179], [7.298025, 8.293325, 0.327177, 1.255704, 4.248989, 7.840139, 9.815186, 3.949059, 8.627578, 8.876899], [7.036295, 5.521972, 8.243328, 8.929582, 4.052541, 6.279880, 3.566877, 7.774992, 8.428445, 1.261634], [1.890876, 2.301990, 0.042181, 4.086060, 3.574131, 5.070926, 3.729220, 4.322207, 2.681075, 7.915813]]> : tensor<10x10xf64>

        %computed = call @sparse_dense_matmul(%sparse, %dense, %init) : (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %expected = arith.constant dense<[[46.777042, 114.148154, 58.918208, 50.294721, 61.937612, 83.428808, 66.217477, 60.080082, 21.006215, 78.305994], [109.100345, 189.993580, 132.809387, 64.661504, 109.603718, 69.597289, 130.422766, 121.887576, 57.077429, 143.582914], [44.100351, 66.569369, 62.082219, 61.692168, 54.514252, 53.165923, 58.786950, 69.965992, 45.123714, 80.125512], [66.080229, 76.679136, 92.053474, 90.799438, 64.803921, 119.889172, 62.398660, 109.938444, 46.624141, 119.233825], [59.962942, 74.910165, 80.317592, 78.288458, 87.840797, 67.422723, 51.193460, 88.881157, 45.887182, 114.470806], [115.691734, 192.917052, 66.365494, 82.824295, 165.086310, 109.763194, 188.272361, 117.367611, 109.919395, 239.758615], [197.479074, 241.968864, 169.643156, 110.429976, 160.746707, 161.738736, 173.520230, 148.778553, 98.969116, 185.140936], [26.125218, 37.954961, 23.688925, 22.712842, 12.931458, 43.676237, 36.874242, 51.926746, 38.595004, 48.381430], [154.124656, 164.148891, 90.578720, 69.017904, 121.641982, 170.366965, 129.084065, 70.702044, 97.886257, 150.449615], [189.764314, 220.548673, 126.488946, 184.318455, 140.224573, 255.889399, 200.207635, 176.504958, 179.805077, 167.162150]]> : tensor<10x10xf64>

        // Validate each element
        %false = arith.constant false : i1
        %flag = scf.for %i = %c0 to %rows step %c1 iter_args(%f_iter = %false) -> (i1) {
            %flag_row = scf.for %j = %c0 to %cols step %c1 iter_args(%f_in = %f_iter) -> (i1) {
                %cmp_c = tensor.extract %computed[%i, %j] : tensor<10x10xf64>
                %cmp_e = tensor.extract %expected[%i, %j] : tensor<10x10xf64>
                %neq = arith.cmpf une, %cmp_c, %cmp_e : f64
                %new_f = arith.or %f_in, %neq : i1
                scf.yield %new_f : i1
            }
            scf.yield %flag_row : i1
        }

        %zero_i32 = arith.constant 0 : i32
        %one_i32 = arith.constant 1 : i32
        %status = scf.if %flag -> (i32) {
            scf.yield %one_i32 : i32
        } else {
            scf.yield %zero_i32 : i32
        }
        return %status : i32
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[7.420402, 0.863892, 3.357927, 2.954346, 6.587941, 8.475056, 2.947184, 3.775881, 3.399047, 0.440496, 3.345413, 4.896585, 0.997097, 2.757507, 4.470897, 6.334575, 3.780654, 5.111150, 2.929709, 3.976940, 1.527864, 2.903032, 4.113807, 9.256240, 9.734770, 5.756570, 7.998035, 4.765155, 3.390278, 2.020269, 9.857155, 2.319654, 0.746477, 0.660879, 3.367165, 2.492678, 4.568787, 7.099409, 9.013218, 5.548307, 4.573928, 1.276123, 8.116409, 9.744151, 6.248739]> : tensor<45xf64>
        %row_ptr = arith.constant dense<[0, 4, 8, 12, 17, 22, 26, 32, 36, 39, 45]> : tensor<11xindex>
        %col_ind = arith.constant dense<[0, 1, 2, 9, 1, 2, 3, 5, 2, 5, 8, 9, 0, 4, 5, 6, 9, 3, 5, 6, 8, 9, 2, 3, 7, 9, 1, 2, 3, 4, 5, 7, 1, 4, 6, 7, 0, 5, 7, 0, 4, 5, 7, 8, 9]> : tensor<45xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<45xindex>), tensor<45xf64> -> tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }

}
