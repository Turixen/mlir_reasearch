// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @matmul(%t : tensor<10x10xf64, #CSR>, %s : tensor<10x10xf64>, %out : tensor<10x10xf64>)
        -> tensor<10x10xf64> {
        %0 = linalg.matmul
            ins(%t, %s: tensor<10x10xf64, #CSR>, tensor<10x10xf64>)
            outs(%out: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %0 : tensor<10x10xf64>
    }

    func.func @main() -> i64 {
        %c = tensor.empty() : tensor<10x10xf64>
        %t_sparse = call @test_assemble() : () -> tensor<10x10xf64, #CSR>
        %s = arith.constant dense<[
            [7.9740929311073, 3.631573254360613, 4.754880491350404, 2.0208529246981866, 6.458346519743621, 8.305111534761943, 8.019821441165117, 7.718289178658583, 1.5206084972411316, 4.044703692186465], [4.200754617205775, 9.587651151270405, 9.542545192161223, 9.41233668389768, 7.57387608465422, 4.394537952646752, 2.979371300555047, 7.291382548599152, 0.34509226592874254, 7.946699013621016], [3.2455345542621448, 3.9147473086915685, 2.2666250460525648, 7.025929797949923, 9.512782498745576, 5.487538718892725, 7.980702141044582, 9.012232581424431, 6.867849549769476, 6.197321927348595], [0.2622407531760429, 0.4695523878070329, 3.0411487057590394, 0.8214939054143056, 7.613405924320601, 5.135245377879537, 4.790901630904151, 9.986346972368498, 0.29637276093376963, 8.177835008162985], [9.991947170761295, 9.048709345615043, 2.772176870553663, 0.11935105469290885, 2.8222190617786156, 8.733056461619132, 5.190644810258127, 8.93952367986104, 2.1944434351433317, 3.022508464528282], [2.3484404326421005, 6.1380436056430945, 8.939596031377409, 7.864970609531006, 8.09163316254006, 1.8068996570408724, 7.791989834986363, 1.5313624407762971, 8.482177230281522, 5.87509116966042], [4.052573966946511, 9.8406859692956, 0.7668104622985106, 9.606288988516496, 1.304662865659394, 4.69798115872535, 2.186382069444799, 7.973469818945873, 1.414949465457157, 8.975463277021063], [7.243861693086914, 0.42103884766915955, 5.302047933750874, 8.56678595243659, 7.283294864205271, 2.895417069822166, 8.840352827754641, 6.080885022141169, 7.3555218578220325, 5.4817185457964985], [5.8365127282838145, 6.9595628898952455, 3.191690289549504, 5.645531087027912, 5.330267861081924, 4.081439635384271, 5.764406166022699, 8.59074473091766, 4.261555369023469, 4.012493492586188], [7.10170918355902, 8.065622555715068, 4.297931008048904, 2.419088522847085, 1.3147422386207464, 5.962739407379534, 8.739015164326547, 8.931608285994708, 5.520947553839476, 2.199988546939063]
        ]> : tensor<10x10xf64>
        %result_matrix = call @matmul(%t_sparse, %s, %c) :
            (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %c1 = arith.constant 1 : index
        %element_f64 = tensor.extract %result_matrix[%c1, %c1] : tensor<10x10xf64>
        %element_i64 = arith.fptosi %element_f64 : f64 to i64
        return %element_i64 : i64
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[5.105988, 7.088069, 6.472771, 7.707949, 8.892861, 3.688659, 1.244772, 6.682280, 7.465714, 3.488923, 1.440682, 4.910128, 6.912108, 6.162214, 4.833226, 2.789898, 2.021948, 1.056633, 7.963054, 0.496382, 2.967930, 6.680104, 7.066953, 3.467710, 5.342382, 7.759228, 5.511628, 7.641029, 1.070014, 9.816865, 6.640451, 1.236746, 9.916332, 9.323023, 1.847845, 1.181508, 1.825886, 7.276920, 0.802250, 6.944351, 4.079487, 3.706604, 3.291096, 4.704561, 8.383296]> : tensor<45xf64>
        %row_ptr = arith.constant dense<[0, 6, 11, 14, 20, 23, 26, 30, 37, 40, 45]> : tensor<11xindex>
        %col_ind = arith.constant dense<[1, 4, 6, 7, 8, 9, 0, 1, 3, 6, 9, 0, 4, 8, 0, 1, 2, 3, 4, 9, 5, 6, 9, 1, 3, 4, 0, 4, 6, 8, 0, 1, 3, 4, 6, 8, 9, 3, 6, 7, 0, 2, 6, 7, 8]> : tensor<45xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<45xindex>), tensor<45xf64> to tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }
    
}
