// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @sparse_dense_matmul(%sparse: tensor<10x10xf64, #CSR>,%dense: tensor<10x10xf64>,%init: tensor<10x10xf64>
    ) -> tensor<10x10xf64> {
        %res = linalg.matmul ins(%sparse, %dense: tensor<10x10xf64, #CSR>, tensor<10x10xf64>) 
            outs(%init: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %res : tensor<10x10xf64>
    }

    func.func @main() -> i32 {
        %c0 = arith.constant 0 : index
        %c1 = arith.constant 1 : index
        %rows = arith.constant 10 : index
        %cols = arith.constant 10 : index
        %zero_f64 = arith.constant 0.0 : f64

        %init = tensor.empty() : tensor<10x10xf64>
        %sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %dense = arith.constant dense<[[2.600141, 0.181706, 4.365920, 3.814929, 3.973166, 3.797769, 0.201305, 2.399109, 0.487899, 3.939521], [7.990365, 3.017591, 2.977035, 9.147325, 4.716648, 3.997122, 4.893361, 8.407351, 2.791597, 9.862891], [5.242386, 3.138413, 4.488762, 9.282670, 8.857921, 9.276496, 7.584510, 3.008144, 7.460413, 8.012773], [2.131329, 3.945794, 6.175734, 9.141824, 0.193683, 2.768175, 0.737157, 2.571728, 8.364034, 5.142091], [8.032732, 5.639974, 6.755324, 1.872453, 3.851092, 7.442147, 6.619556, 7.468252, 7.666815, 5.843620], [6.563764, 3.456215, 5.180407, 6.359204, 9.598699, 2.167451, 4.340640, 5.924437, 7.699451, 2.253933], [8.892622, 9.896808, 6.942474, 1.876890, 1.609551, 4.973217, 9.202037, 2.110272, 8.074769, 9.872204], [8.538205, 1.328090, 0.579507, 2.775526, 4.451244, 5.913039, 0.049966, 9.093394, 7.065312, 8.023251], [6.255390, 1.449804, 4.882807, 3.114755, 0.452018, 7.506782, 6.453520, 1.272750, 7.215839, 2.318266], [1.282709, 0.055660, 7.874173, 8.652555, 8.833707, 6.967300, 8.224609, 4.842171, 0.299246, 4.593292]]> : tensor<10x10xf64>

        %computed = call @sparse_dense_matmul(%sparse, %dense, %init) : (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %expected = arith.constant dense<[[81.862220, 52.051939, 76.894864, 71.624497, 48.143980, 71.130788, 35.649026, 60.149296, 79.436152, 102.992414], [80.590462, 33.872334, 38.465439, 79.576274, 83.910249, 95.336291, 59.404740, 63.349098, 89.319519, 98.557298], [104.872954, 34.827956, 93.605602, 69.010102, 52.515535, 113.991785, 71.263685, 52.984095, 88.530250, 88.530013], [96.667035, 77.091254, 140.844480, 142.012438, 135.221512, 138.323370, 171.931070, 82.083870, 83.641949, 147.808548], [122.715983, 90.531626, 86.686467, 93.429913, 79.634729, 106.143185, 118.537658, 80.672115, 108.086612, 140.229022], [261.511603, 132.297767, 158.671557, 253.867731, 160.909732, 218.052491, 139.133088, 259.874944, 258.687974, 298.711118], [47.531877, 17.573925, 66.710037, 84.185205, 76.472046, 89.602224, 77.345736, 37.110504, 52.113717, 63.054754], [93.436233, 66.972526, 186.222318, 224.995680, 169.492126, 121.484205, 118.699902, 121.685563, 141.454458, 124.660376], [157.922953, 87.109887, 95.164285, 120.212476, 91.058028, 115.772083, 119.120983, 149.307143, 105.490928, 163.588349], [220.887178, 112.665035, 245.840048, 199.214554, 218.073855, 235.643761, 250.054986, 185.315561, 216.322040, 168.853579]]> : tensor<10x10xf64>

        // Validate each element
        %false = arith.constant "false" : i1
        %flag = scf.for %i = %c0 to %rows step %c1 iter_args(%f_iter = %false) -> (i1) {
            %flag_row = scf.for %j = %c0 to %cols step %c1 iter_args(%f_in = %f_iter) -> (i1) {
                %cmp_c = tensor.extract %computed[%i, %j] : tensor<10x10xf64>
                %cmp_e = tensor.extract %expected[%i, %j] : tensor<10x10xf64>
                %neq = arith.cmpf une, %cmp_c, %cmp_e : f64
                %new_f = arith.ori %f_in, %neq : i1
                scf.yield %new_f : i1
            }
            scf.yield %flag_row : i1
        }

        %zero_i32 = arith.constant 0 : i32
        %one_i32 = arith.constant 1 : i32
        %status = scf.if %flag -> (i32) {
            scf.yield %one_i32 : i32
        } else {
            scf.yield %zero_i32 : i32
        }
        return %status : i32
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[7.194848, 3.211932, 3.443001, 3.009018, 7.118833, 0.563788, 4.480712, 9.125528, 1.986960, 1.784659, 7.673215, 0.186535, 1.212927, 3.640226, 6.209757, 9.878164, 3.850437, 4.674698, 3.278178, 4.622966, 9.803638, 4.827160, 8.685339, 7.201273, 9.546961, 1.858648, 4.247131, 2.563089, 3.430951, 3.785516, 9.130626, 7.425248, 0.412767, 9.140682, 9.976423, 1.349276, 7.999309, 0.773445, 2.603112, 0.644329, 8.217948, 8.554769, 2.105283, 8.945957, 9.452109]> : tensor<45xf64>
        %row_ptr = arith.constant dense<[0, 4, 7, 12, 16, 20, 25, 29, 34, 38, 45]> : tensor<11xindex>
        %col_ind = arith.constant dense<[0, 3, 6, 7, 2, 6, 7, 0, 6, 7, 8, 9, 1, 2, 6, 9, 1, 2, 4, 6, 1, 2, 3, 4, 7, 0, 2, 8, 9, 0, 3, 5, 6, 9, 1, 2, 4, 6, 0, 1, 4, 5, 6, 8, 9]> : tensor<45xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<45xindex>), tensor<45xf64> -> tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }

}
