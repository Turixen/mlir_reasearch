// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @matmul(%t : tensor<10x10xf64, #CSR>, %s : tensor<10x10xf64>, %out : tensor<10x10xf64>)
        -> tensor<10x10xf64> {
        %0 = linalg.matmul
            ins(%t, %s: tensor<10x10xf64, #CSR>, tensor<10x10xf64>)
            outs(%out: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %0 : tensor<10x10xf64>
    }

    func.func @main() -> i64 {
        %c = tensor.empty() : tensor<10x10xf64>
        %t_sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %s = arith.constant dense<[
            [5.890768920428213, 9.28424144244173, 2.904588839174335, 7.049075724643612, 0.4457431746452034, 4.411980450399647, 4.9062091201467215, 9.788969410708233, 2.4069709788463745, 2.8022862766371945], [2.916156892441677, 8.510524679173967, 8.832865810191084, 3.417265427106914, 7.162328888839684, 5.966037622508614, 0.9672780769704803, 8.827879558126071, 0.7303067367922045, 0.14621318449919207], [3.9240764260238628, 2.191733222658744, 6.264274421637245, 5.094648293819253, 6.051792087544092, 4.893894742220745, 5.894574936186981, 1.0484196415143388, 4.1082738882332235, 1.2971144332647555], [6.132307850941055, 7.909662686888605, 3.9987350374125508, 5.460044526086825, 3.6928360191491603, 7.2962158366223795, 9.624943579854818, 8.376982847419711, 5.351737868536473, 1.563978320368563], [7.950354066975988, 0.1356407937297377, 8.220433218804859, 7.160022172346171, 1.949772113425059, 0.3833735192232357, 1.2710325974388326, 6.645530510371157, 0.9381987558356142, 4.706361774393331], [1.8720644394587405, 5.800578466981871, 2.0603004295538154, 4.733158245868459, 5.0984806669219935, 0.9808504314976385, 6.0875598512537055, 3.40156180131764, 0.6166376917084493, 3.6969499312350598], [8.56377715754888, 5.630948680185913, 2.8581399530644536, 1.6706578415449391, 3.311143241190837, 2.00770923996929, 5.816136278633193, 9.205831203129215, 6.911026919970631, 9.318464759854708], [9.060671417858224, 4.662970231588286, 0.5760437867523782, 5.381016695211254, 3.0522113583667307, 7.952554237735933, 3.554475037037159, 3.712430406945556, 6.331983592226905, 9.540394605056859], [5.68604046197116, 7.694098441225905, 4.393418672999983, 9.070227172864605, 3.6039920432731565, 8.204717283333796, 5.827750387545655, 5.845051581744388, 9.673665628682743, 4.697042290501924], [3.8922632039094527, 5.990721670135525, 4.377143995436896, 5.300291604233864, 2.453485228742951, 0.2768013160482852, 5.503438563701857, 3.4074803831988456, 0.34263685199842464, 8.100307982132026]
        ]> : tensor<10x10xf64>
        %result_matrix = call @matmul(%t_sparse, %s, %c) :
            (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %c1 = arith.constant 1 : index
        %element_f64 = tensor.extract %result_matrix[%c1, %c1] : tensor<10x10xf64>
        %element_i64 = arith.fptosi %element_f64 : f64 to i64
        return %element_i64 : i64
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[7.992251, 3.024634, 4.446178, 9.520912, 2.473960, 0.949378, 6.461034, 7.132040, 7.462267, 3.284296, 0.443999, 9.415576, 3.574014, 4.994940, 5.940749, 7.734600, 9.790338, 6.011753, 5.048234, 5.627017, 3.246192, 6.101096, 2.610069, 6.052146, 7.250955, 8.058062, 9.051129, 9.881515, 2.163496, 3.195927, 7.106724, 5.876046, 1.046158, 2.197642, 3.131682, 8.222063, 8.083105, 4.675012, 0.108658, 6.894308, 5.428114, 0.000296, 4.536030, 6.994713, 7.296558]> : tensor<45xf64>
        %row_ptr = arith.constant dense<[0, 5, 9, 15, 20, 26, 30, 33, 36, 39, 45]> : tensor<11xindex>
        %col_ind = arith.constant dense<[0, 4, 5, 6, 7, 1, 3, 5, 7, 1, 3, 4, 5, 6, 7, 0, 1, 4, 6, 7, 0, 1, 4, 6, 7, 8, 2, 3, 4, 9, 0, 3, 4, 4, 6, 8, 2, 3, 6, 3, 4, 5, 6, 7, 9]> : tensor<45xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<45xindex>), tensor<45xf64> to tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }
    
}
