// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @matmul(%t : tensor<10x10xf64, #CSR>, %s : tensor<10x10xf64>, %out : tensor<10x10xf64>)
        -> tensor<10x10xf64> {
        %0 = linalg.matmul
            ins(%t, %s: tensor<10x10xf64, #CSR>, tensor<10x10xf64>)
            outs(%out: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %0 : tensor<10x10xf64>
    }

    func.func @main() -> i64 {
        %c = tensor.empty() : tensor<10x10xf64>
        %t_sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %s = arith.constant dense<[
            [6.988478310557803, 9.618906203896154, 7.048281989721479, 2.856648923388627, 1.0379860170810984, 2.2752686166213296, 4.52752124222076, 3.0881371720995077, 6.1630265043987915, 6.512255115975649], [5.08638430977917, 8.023826216327933, 2.369753104678826, 1.8133837507777972, 5.811512768216862, 7.082222823151803, 3.8420606178930994, 6.362297257177646, 6.297957832102799, 1.208385549822768], [7.750727741506312, 3.0559734178627274, 8.223215304244235, 8.00731431773186, 3.1363009428033983, 5.4441834152131605, 3.5818339506483934, 3.153807563864557, 2.5877932615883283, 7.660203067174141], [1.5373082378689773, 6.727063245232852, 7.782505378263172, 4.7889427680345324, 6.359205731855565, 2.1364235289352007, 8.948169000942194, 9.555395790675226, 6.941602076675572, 2.1841064037406523], [8.40047200301509, 4.561874615894465, 5.45003626977469, 2.0133769729215754, 1.4631093750271862, 4.353785902303782, 7.030700097253378, 9.237561605196243, 1.2912709824410018, 3.6655420760244315], [5.294356314853047, 7.630395425694479, 9.873014104267183, 1.9124489898052344, 5.11426914056573, 9.454018930571898, 9.664961640764002, 8.792251054019374, 0.1275027212164248, 2.9156891972907015], [1.9235519754563957, 2.975536989542534, 7.559004586067667, 4.446241126972955, 0.6242339052902379, 7.058662386314084, 4.454012412072272, 0.13874687827006515, 5.0852018085036255, 2.53782639593531], [5.73624752323211, 3.7100395957812338, 1.2026567957924517, 3.0938717681418915, 2.0853540748682207, 2.6099442239903525, 0.22215073725892265, 5.780353851367753, 0.11217901680743658, 3.4905057134735875], [3.5947153286615174, 9.475553497275722, 3.7788584742358977, 8.540827614301412, 5.359413384687538, 2.150349698807986, 0.7560838764987288, 3.833619958005884, 0.9448640356963933, 0.16367872285530383], [2.2517230740232264, 5.038983234184718, 9.683094648667147, 8.59122973304499, 6.61639533882288, 8.184121935565962, 9.905536991781206, 9.474571767577512, 2.8937800485478595, 8.06529250501656]
        ]> : tensor<10x10xf64>
        %result_matrix = call @matmul(%t_sparse, %s, %c) :
            (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %c1 = arith.constant 1 : index

        %element_f64 = tensor.extract %result_matrix[%c1, %c1] : tensor<10x10xf64>
        %element_i64 = arith.fptosi %element_f64 : f64 to i64
        return %element_i64 : i64
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[8.054703, 2.561480, 7.936840, 6.877492, 0.132331, 9.787241, 7.394210, 9.366997, 4.984406, 2.437734, 7.614681, 9.221043, 6.439186, 0.977830, 5.004079, 1.886917, 5.897480, 1.528008, 5.430020, 0.718783, 3.404220, 9.375543, 6.392283, 5.429601, 5.632116, 9.494519, 8.644279, 8.192432, 9.384656, 9.533786, 1.644141, 7.400808, 5.580909, 6.082427, 1.640556, 9.920165, 3.042582, 2.416756, 2.742382, 8.398131, 5.740480, 8.319866, 6.306138, 9.847730, 7.678204]> : tensor<45xf64>
        %row_ptr = arith.constant dense<[0, 4, 10, 16, 18, 24, 31, 33, 38, 40, 45]> : tensor<11xindex>
        %col_ind = arith.constant dense<[0, 3, 4, 6, 0, 3, 4, 5, 8, 9, 0, 2, 3, 5, 8, 9, 1, 9, 0, 2, 4, 5, 6, 7, 0, 1, 2, 4, 5, 7, 9, 4, 8, 0, 2, 3, 4, 5, 1, 7, 0, 2, 3, 6, 7]> : tensor<45xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<45xindex>), tensor<45xf64> to tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }
    
}
