// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @sparse_dense_matmul(%sparse: tensor<10x10xf64, #CSR>,%dense: tensor<10x10xf64>,%init: tensor<10x10xf64>
    ) -> tensor<10x10xf64> {
        %res = linalg.matmul ins(%sparse, %dense: tensor<10x10xf64, #CSR>, tensor<10x10xf64>) 
            outs(%init: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %res : tensor<10x10xf64>
    }

    func.func @main() -> i32 {
        %c0 = arith.constant 0 : index
        %c1 = arith.constant 1 : index
        %rows = arith.constant 10 : index
        %cols = arith.constant 10 : index
        %zero_f64 = arith.constant 0.0 : f64

        %init = tensor.empty() : tensor<10x10xf64>
        %sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %dense = arith.constant dense<[[8.757771, 3.638855, 5.396642, 2.274963, 8.998831, 6.320734, 8.393618, 4.606765, 7.870324, 5.875818], [9.258130, 4.728757, 9.569670, 0.959863, 5.990367, 6.197747, 5.073916, 9.677415, 5.467622, 8.252516], [3.157150, 9.014980, 4.256886, 4.423513, 0.377730, 1.129062, 9.297914, 1.618830, 0.393332, 3.993521], [5.365424, 7.409518, 1.885844, 8.074719, 0.353352, 5.781591, 9.866314, 1.184845, 8.840724, 4.057908], [5.041400, 3.227473, 1.671389, 2.584679, 0.001251, 9.163604, 2.057177, 3.749729, 3.900949, 2.941359], [3.848729, 8.596122, 5.986843, 7.531584, 5.789564, 3.702893, 9.062757, 2.113125, 3.686367, 1.761484], [1.423443, 5.269862, 7.608476, 9.483884, 0.975201, 0.972917, 4.197254, 2.060308, 1.425834, 0.466155], [4.123817, 8.058427, 5.989439, 9.564382, 9.990934, 0.756849, 9.428574, 6.450482, 9.130300, 3.316514], [5.641605, 6.653161, 7.940902, 0.474710, 6.182877, 1.993499, 1.564069, 9.263556, 6.080026, 9.674132], [3.063561, 8.602925, 0.062369, 4.708516, 3.492795, 3.361150, 6.095892, 0.896700, 5.852934, 0.671201]]> : tensor<10x10xf64>

        %computed = call @sparse_dense_matmul(%sparse, %dense, %init) : (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %expected = arith.constant dense<[[106.482331, 142.676699, 58.675168, 115.261187, 44.531292, 111.059026, 145.184832, 57.293688, 137.776983, 71.834726], [96.126011, 163.856519, 64.721798, 112.169359, 106.796707, 96.325536, 157.038604, 45.956174, 117.486642, 44.293789], [96.405309, 168.466343, 103.647711, 128.368250, 124.339665, 52.788019, 165.325742, 103.418593, 129.908845, 81.695288], [128.568315, 159.232843, 100.835022, 142.030856, 74.341834, 133.170502, 185.590840, 71.677311, 143.020273, 89.177615], [103.964992, 108.214430, 94.184312, 102.492198, 86.825850, 73.587949, 135.211834, 87.802380, 127.257191, 83.893671], [90.552246, 107.028288, 86.764222, 53.244385, 58.367369, 68.248196, 70.839922, 98.993787, 110.309591, 115.875252], [19.077306, 37.279314, 27.707912, 44.246053, 46.219340, 3.501281, 43.617790, 29.840753, 42.237937, 15.342619], [185.624934, 183.163695, 147.426168, 90.428925, 174.457637, 129.354535, 177.861445, 150.906069, 206.675481, 176.209092], [127.442705, 230.192782, 169.209538, 156.473694, 113.308620, 86.876040, 204.184099, 113.755620, 130.523164, 135.894235], [14.567567, 9.097918, 5.118681, 7.211843, 1.046688, 25.366243, 6.503219, 10.614055, 11.398939, 8.588146]]> : tensor<10x10xf64>

        // Validate each element
        %false = arith.constant "false" : i1
        %flag = scf.for %i = %c0 to %rows step %c1 iter_args(%f_iter = %false) -> (i1) {
            %flag_row = scf.for %j = %c0 to %cols step %c1 iter_args(%f_in = %f_iter) -> (i1) {
                %cmp_c = tensor.extract %computed[%i, %j] : tensor<10x10xf64>
                %cmp_e = tensor.extract %expected[%i, %j] : tensor<10x10xf64>
                %neq = arith.cmpf une, %cmp_c, %cmp_e : f64
                %new_f = arith.or %f_in, %neq : i1
                scf.yield %new_f : i1
            }
            scf.yield %flag_row : i1
        }

        %zero_i32 = arith.constant 0 : i32
        %one_i32 = arith.constant 1 : i32
        %status = scf.if %flag -> (i32) {
            scf.yield %one_i32 : i32
        } else {
            scf.yield %zero_i32 : i32
        }
        return %status : i32
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[3.208995, 8.363689, 2.321302, 1.042626, 6.107782, 3.456915, 1.634125, 7.135818, 9.841170, 2.482673, 4.363298, 0.998065, 8.656889, 0.947115, 4.429644, 1.087903, 2.679971, 8.776148, 3.305980, 7.631998, 0.195188, 1.300913, 4.629097, 5.637535, 0.714466, 4.474095, 5.238426, 2.146134, 0.112603, 9.122592, 4.626128, 9.744458, 0.482378, 3.947919, 0.262614, 0.926611, 9.630803, 5.031274, 5.233926, 4.493976, 9.997790, 1.886785, 8.090216, 0.115940, 2.688180]> : tensor<45xf64>
        %row_ptr = arith.constant dense<[0, 5, 9, 15, 21, 26, 30, 31, 38, 43, 45]> : tensor<11xindex>
        %col_ind = arith.constant dense<[1, 3, 4, 6, 9, 0, 4, 5, 9, 1, 2, 4, 7, 8, 9, 0, 1, 3, 4, 5, 8, 0, 1, 3, 6, 7, 3, 4, 6, 8, 7, 0, 1, 3, 4, 5, 8, 9, 2, 3, 5, 6, 8, 0, 4]> : tensor<45xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<45xindex>), tensor<45xf64> -> tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }

}
