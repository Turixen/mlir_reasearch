// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @matmul(%t : tensor<10x10xf64, #CSR>, %s : tensor<10x10xf64>, %out : tensor<10x10xf64>)
        -> tensor<10x10xf64> {
        %0 = linalg.matmul
            ins(%t, %s: tensor<10x10xf64, #CSR>, tensor<10x10xf64>)
            outs(%out: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %0 : tensor<10x10xf64>
    }

    func.func @main() -> i64 {
        %c = tensor.empty() : tensor<10x10xf64>
        %t_sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %s = arith.constant dense<[
            [5.671881302937631, 5.666784432827551, 3.363512793904845, 4.286702251456495, 2.9053849544431296, 9.10811318267658, 3.966102977894441, 4.540193508848272, 7.409544689290017, 3.745943184884654], [8.140998960534706, 5.752171336325683, 8.855541770413588, 3.9383641781681513, 1.8455847439564066, 9.402572378547466, 5.876518774086365, 4.399746237095611, 6.9100629396277355, 4.160890115701392], [0.9567678505281585, 6.735454184635175, 9.27173546506678, 3.0294985818710254, 9.294625729310072, 5.257796897891831, 1.613824562978412, 7.393120559145117, 0.518917601275064, 0.0674676571607502], [7.317247058812587, 7.066180742122874, 9.477569517001479, 4.193919507104998, 5.294588489545524, 6.992829020316154, 6.630605747067587, 9.98857098673043, 2.0206886181157726, 3.0866717459610573], [6.184306215019815, 8.235838280511974, 5.131668941825946, 8.420876884899743, 4.357960416161598, 6.54154732040938, 4.532424281246808, 0.9947266007057565, 5.428009073432004, 0.3138858449019366], [2.4558681567545615, 2.9988303644028544, 1.6148298501915226, 2.5167835568414, 7.042228488973885, 7.838398030358789, 5.1694738966714056, 5.528927308906608, 8.442302499891673, 6.231521686740855], [3.4525287330004106, 5.84555100874832, 2.866877207716678, 5.501793687844482, 2.915386618595248, 1.471681328785549, 0.056280967951193306, 1.0321190696006466, 5.2665130627220735, 1.8464104631895506], [0.3756437447642369, 2.064394802916958, 2.41512401394111, 0.45808269010234826, 7.101500822530211, 6.088251836319781, 2.9559819074683826, 7.483748484396645, 7.817875154075881, 4.695624108049956], [5.204112166248786, 4.326734470886126, 0.5310479151077474, 5.2426563730871845, 8.360959460976176, 1.5385051067825817, 7.629450844873751, 6.5966695196253085, 0.5411308330702336, 2.7841838233936023], [2.65746794646033, 7.701282343990007, 4.660425728901101, 9.820954485938048, 8.716218756205233, 5.922081537698636, 7.078247373870007, 7.3967287065906895, 5.99520436362806, 9.205815881248926]
        ]> : tensor<10x10xf64>
        %result_matrix = call @matmul(%t_sparse, %s, %c) :
            (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %c1 = arith.constant 1 : index

        %element_f64 = tensor.extract %result_matrix[%c1, %c1] : tensor<10x10xf64>
        %element_i64 = arith.fptosi %element_f64 : f64 to i64
        return %element_i64 : i64
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[2.153103, 2.994153, 6.180302, 9.875494, 1.437303]> : tensor<5xf64>
        %row_ptr = arith.constant dense<[0, 1, 1, 1, 4, 4, 4, 5, 5, 5, 5]> : tensor<11xindex>
        %col_ind = arith.constant dense<[9, 0, 3, 9, 0]> : tensor<5xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<5xindex>), tensor<5xf64> to tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }
    
}
