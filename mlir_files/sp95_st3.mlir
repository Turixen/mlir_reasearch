// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @matmul(%t : tensor<10x10xf64, #CSR>, %s : tensor<10x10xf64>, %out : tensor<10x10xf64>)
        -> tensor<10x10xf64> {
        %0 = linalg.matmul
            ins(%t, %s: tensor<10x10xf64, #CSR>, tensor<10x10xf64>)
            outs(%out: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %0 : tensor<10x10xf64>
    }

    func.func @main() -> i64 {
        %c = tensor.empty() : tensor<10x10xf64>
        %t_sparse = call @test_assemble() : () -> tensor<10x10xf64, #CSR>
        %s = arith.constant dense<[
            [2.795435280507328, 8.846497497515703, 1.9563610024189748, 7.62907178246971, 5.265486336732579, 9.129799713153947, 3.6265516695312003, 5.985744363731773, 0.19492078334993446, 2.972657468888996], [9.575580059579693, 3.951115195448013, 6.832671701953178, 2.6532032326998802, 9.62664176995121, 0.5578847176901869, 8.83288892970546, 0.2810283031599803, 8.391692763996728, 4.222114688044901], [4.420949858109897, 6.534655161851903, 9.830297351225848, 7.846737067411187, 1.232839252460074, 6.563850989848982, 7.641511014843182, 2.5017295814971954, 7.31484337481667, 5.526177231663128], [0.8165918468165401, 9.713192440682379, 5.04350466318031, 9.500033123006359, 9.897088937083657, 6.9661834845021655, 6.185226749953067, 1.3235809176360658, 2.4470730899780335, 6.778657182002411], [0.9842172693680373, 4.54393004571124, 0.23212982977604546, 2.359376503036815, 5.079885185898036, 1.5051644037946654, 5.178156888930095, 4.106840466621598, 1.998680175278832, 5.181377509310319], [2.473294450118062, 0.47244920253082023, 8.141700021737037, 8.874626836515272, 8.65422026622763, 3.691153099477461, 9.21771699154973, 7.460522777900492, 4.522000275627789, 4.182318004973828], [0.1479568596026426, 8.292247428202993, 1.9124550229384452, 9.986976647312325, 9.414946567408776, 5.311154387670269, 1.459599375821552, 3.579932855405578, 8.856494582757557, 1.2676799423247098], [7.818964260753031, 2.0223384181873993, 6.9304663180681025, 0.7342078041826872, 3.910549153288072, 3.553530378227806, 1.731462336466859, 9.029070179827528, 5.468901947812549, 0.7718734336851663], [3.303705420415036, 7.739949085139111, 1.6221579945445308, 0.4997989281217008, 4.561210326769299, 5.236951263269446, 6.179633546489837, 9.60518315119311, 1.2224431150818205, 1.041659209152842], [9.90236600784167, 4.543871381157699, 9.67656631318364, 3.8838642352141353, 1.5276173260545145, 0.6436677314182848, 0.7031133346175356, 4.544081395442829, 6.9364057369232714, 2.827613512792566]
        ]> : tensor<10x10xf64>
        %result_matrix = call @matmul(%t_sparse, %s, %c) :
            (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %c1 = arith.constant 1 : index
        %element_f64 = tensor.extract %result_matrix[%c1, %c1] : tensor<10x10xf64>
        %element_i64 = arith.fptosi %element_f64 : f64 to i64
        return %element_i64 : i64
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[6.265610, 4.192361, 8.948111, 0.088692, 2.129617]> : tensor<5xf64>
        %row_ptr = arith.constant dense<[0, 2, 2, 2, 3, 3, 3, 5, 5, 5, 5]> : tensor<11xindex>
        %col_ind = arith.constant dense<[3, 9, 3, 0, 9]> : tensor<5xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<5xindex>), tensor<5xf64> to tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }
    
}
