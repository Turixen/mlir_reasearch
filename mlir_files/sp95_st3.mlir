// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @matmul(%t : tensor<10x10xf64, #CSR>, %s : tensor<10x10xf64>, %out : tensor<10x10xf64>)
        -> tensor<10x10xf64> {
        %0 = linalg.matmul
            ins(%t, %s: tensor<10x10xf64, #CSR>, tensor<10x10xf64>)
            outs(%out: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %0 : tensor<10x10xf64>
    }

    func.func @main() -> i64 {
        %c = tensor.empty() : tensor<10x10xf64>
        %t_sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %s = arith.constant dense<[
            [6.78314138305829, 7.676056248349673, 0.9562898104389839, 3.56150585820994, 9.638567542035533, 3.7349218896381764, 0.3318373041837219, 0.2473062352911748, 8.525456576503686, 1.2326115160335016], [3.824505078099998, 9.527751101714149, 8.003216385578524, 5.810769130603416, 6.512268333489972, 2.1051731422192854, 3.12638483800883, 2.7850421162603425, 6.365096565743025, 7.217406884561291], [5.403729116179025, 2.9874592733539296, 5.732241355060484, 6.300536900345749, 0.6846559479853431, 5.929419954766155, 9.55301035139107, 7.813794451025941, 4.980118082985529, 3.810377776447933], [2.9828161776510864, 0.9366979575381074, 0.49757643347079217, 7.447298119645447, 1.656585167264607, 5.863976766608047, 3.4558059534715158, 6.884549051018426, 0.3788511480589496, 7.704520167483674], [5.462556548249875, 7.184715463179372, 3.740797920283602, 4.309378656566789, 5.615034884004987, 8.10425526802111, 8.507907994019359, 6.614660569208222, 6.82522607454811, 5.372890298178605], [2.2292821386614525, 7.208798448820901, 9.610278384729632, 7.718966890275592, 5.800815063162502, 1.5807951632905581, 6.6455699473425245, 3.057763998583878, 9.050422831043695, 3.9714881601414067], [3.637707934488633, 3.697846868457262, 7.562469518652168, 1.0149798082318817, 5.644505487761742, 4.349069860313245, 6.047005130279012, 3.08462499082218, 1.792547699823055, 7.144888354657402], [0.5146610097069504, 1.3374131287583535, 9.31925191549447, 9.119408386060886, 5.527583205103389, 8.443328401182953, 6.959187458988981, 9.782723311853681, 5.969141781391819, 1.124388070628577], [1.840553753624944, 2.219282469108216, 3.016260987968322, 0.29691749559799696, 7.923977206927649, 6.32789208583567, 9.39701175217972, 1.8318660886029803, 7.464773401894411, 1.144503111433267], [6.760039512175997, 5.860684608351024, 3.110473947158827, 5.0026386144808175, 2.066112448005706, 5.289760848609615, 1.0675460143917848, 9.60165902149132, 0.21529226311083782, 8.678196892276809]
        ]> : tensor<10x10xf64>
        %result_matrix = call @matmul(%t_sparse, %s, %c) :
            (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %c1 = arith.constant 1 : index
        %element_f64 = tensor.extract %result_matrix[%c1, %c1] : tensor<10x10xf64>
        %element_i64 = arith.fptosi %element_f64 : f64 to i64
        return %element_i64 : i64
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[3.118869, 0.013613, 4.320626, 7.964497, 4.471591]> : tensor<5xf64>
        %row_ptr = arith.constant dense<[0, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5]> : tensor<11xindex>
        %col_ind = arith.constant dense<[3, 9, 3, 6, 6]> : tensor<5xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<5xindex>), tensor<5xf64> to tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }
    
}
