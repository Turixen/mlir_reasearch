// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @sparse_dense_matmul(%sparse: tensor<10x10xf64, #CSR>,%dense: tensor<10x10xf64>,%init: tensor<10x10xf64>
    ) -> tensor<10x10xf64> {
        %res = linalg.matmul ins(%sparse, %dense: tensor<10x10xf64, #CSR>, tensor<10x10xf64>) 
            outs(%init: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %res : tensor<10x10xf64>
    }

    func.func @main() -> i32 {
        %c0 = arith.constant 0 : index
        %c1 = arith.constant 1 : index
        %rows = arith.constant 10 : index
        %cols = arith.constant 10 : index
        %zero_f64 = arith.constant 0.0 : f64

        %init = tensor.empty() : tensor<10x10xf64>
        %sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %dense = arith.constant dense<[[9.604376, 9.465208, 4.144311, 2.904588, 8.979183, 7.586249, 0.736836, 3.978429, 6.270962, 2.117184], [6.636922, 6.804076, 9.109088, 8.472112, 0.416959, 3.077618, 4.552400, 4.288455, 4.037592, 2.113726], [6.128205, 3.367675, 1.689115, 6.037961, 9.558890, 8.005622, 2.486151, 2.468759, 1.580790, 7.860842], [8.643979, 1.214899, 4.258330, 6.342296, 9.667041, 2.515884, 4.281640, 6.927309, 4.593097, 7.452471], [6.273279, 1.241264, 1.639290, 4.764115, 4.564501, 3.052330, 2.803788, 8.119206, 9.184912, 7.361720], [5.297678, 0.807059, 3.454977, 2.372708, 0.141865, 1.262811, 3.471318, 1.271047, 6.024541, 4.623761], [7.660008, 9.995427, 9.726423, 7.210731, 5.000117, 2.203525, 2.470482, 6.896137, 8.230555, 4.069247], [6.758808, 3.227792, 0.427206, 4.949880, 7.235811, 9.711376, 6.420990, 8.893843, 3.666254, 8.482695], [3.531007, 7.615634, 7.690077, 5.614049, 8.115466, 4.760914, 5.292659, 1.059753, 3.609943, 7.010054], [0.916381, 4.230982, 6.044938, 2.151715, 0.389771, 2.266613, 3.527117, 5.246945, 4.261427, 7.436536]]> : tensor<10x10xf64>

        %computed = call @sparse_dense_matmul(%sparse, %dense, %init) : (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %expected = arith.constant dense<[[123.107651, 88.426750, 65.270009, 112.094901, 110.543489, 130.081240, 87.844857, 119.552534, 72.204287, 119.687561], [40.904691, 61.394659, 67.015155, 45.514203, 34.598412, 32.046127, 30.496141, 54.465069, 52.597916, 64.599540], [40.277934, 5.661006, 19.842336, 29.552890, 45.045046, 11.723145, 19.950953, 32.278848, 21.402235, 34.725922], [150.499294, 93.254336, 55.206288, 76.786387, 140.223277, 122.321448, 64.956330, 106.639891, 96.337433, 100.378358], [57.088220, 33.058033, 25.494776, 55.943307, 71.097434, 63.542220, 26.350272, 24.043299, 21.291837, 64.290626], [70.647053, 58.597577, 62.670663, 60.080377, 60.160495, 28.510002, 31.330483, 64.176993, 59.210417, 50.523767], [5.484834, 3.014119, 1.511783, 5.404064, 8.555348, 7.165150, 2.225142, 2.209576, 1.414831, 7.035570], [76.294640, 67.637386, 95.983204, 87.348068, 4.356276, 32.647608, 51.960364, 44.374455, 52.823698, 31.016490], [176.659382, 98.894233, 121.563529, 114.677593, 160.116731, 95.589258, 90.472660, 156.201758, 153.845993, 174.223868], [84.321100, 15.773071, 41.464522, 63.192486, 91.463896, 30.923177, 44.598502, 69.869501, 45.051586, 73.407625]]> : tensor<10x10xf64>

        // Validate each element
        %false = arith.constant "false" : i1
        %flag = scf.for %i = %c0 to %rows step %c1 iter_args(%f_iter = %false) -> (i1) {
            %flag_row = scf.for %j = %c0 to %cols step %c1 iter_args(%f_in = %f_iter) -> (i1) {
                %cmp_c = tensor.extract %computed[%i, %j] : tensor<10x10xf64>
                %cmp_e = tensor.extract %expected[%i, %j] : tensor<10x10xf64>
                %neq = arith.cmpf une, %cmp_c, %cmp_e : f64
                %new_f = arith.ori %f_in, %neq : i1
                scf.yield %new_f : i1
            }
            scf.yield %flag_row : i1
        }

        %zero_i32 = arith.constant 0 : i32
        %one_i32 = arith.constant 1 : i32
        %status = scf.if %flag -> (i32) {
            scf.yield %one_i32 : i32
        } else {
            scf.yield %zero_i32 : i32
        }
        return %status : i32
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[3.550370, 3.397515, 2.403600, 8.923447, 1.611995, 3.440234, 5.100324, 4.659652, 7.257600, 3.438858, 2.325804, 5.732934, 1.105663, 7.376878, 0.857547, 2.757487, 5.190244, 1.043688, 0.895015, 9.669354, 2.287775, 5.276356, 9.751605, 3.024305, 2.785052, 0.202538, 7.196862, 0.369515, 8.869658, 0.769296]> : tensor<30xf64>
        %row_ptr = arith.constant dense<[0, 4, 7, 8, 12, 15, 18, 19, 21, 27, 30]> : tensor<11xindex>
        %col_ind = arith.constant dense<[1, 2, 6, 7, 2, 6, 9, 3, 0, 3, 5, 7, 1, 2, 5, 3, 6, 7, 2, 1, 5, 0, 3, 4, 5, 7, 9, 1, 3, 7]> : tensor<30xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<30xindex>), tensor<30xf64> -> tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }

}
