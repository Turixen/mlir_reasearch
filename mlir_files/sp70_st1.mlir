// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @sparse_dense_matmul(%sparse: tensor<10x10xf64, #CSR>,%dense: tensor<10x10xf64>,%init: tensor<10x10xf64>
    ) -> tensor<10x10xf64> {
        %res = linalg.matmul ins(%sparse, %dense: tensor<10x10xf64, #CSR>, tensor<10x10xf64>) 
            outs(%init: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %res : tensor<10x10xf64>
    }

    func.func @main() -> i32 {
        %c0 = arith.constant 0 : index
        %c1 = arith.constant 1 : index
        %rows = arith.constant 10 : index
        %cols = arith.constant 10 : index
        %zero_f64 = arith.constant 0.0 : f64

        %init = tensor.empty() : tensor<10x10xf64>
        %sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %dense = arith.constant dense<[[3.894633, 0.327856, 3.443343, 0.029015, 9.954089, 6.127231, 3.252501, 1.296419, 8.560767, 7.106406], [7.592510, 5.794625, 4.859076, 7.784231, 2.860943, 9.350843, 8.695268, 6.231825, 9.698239, 5.935462], [6.711502, 6.390547, 3.808837, 2.380649, 8.874283, 1.663523, 5.451076, 7.239291, 6.753466, 4.167727], [7.827931, 2.311990, 4.016290, 3.048908, 9.038449, 6.998436, 8.648109, 3.133047, 0.524346, 4.424246], [6.875859, 2.065242, 3.314336, 0.746114, 9.978146, 8.592006, 7.652236, 2.040309, 6.181797, 5.608776], [8.291239, 5.609599, 4.306873, 5.485875, 7.453887, 7.633509, 8.759142, 7.505963, 6.760154, 9.861535], [0.127499, 9.585166, 0.489238, 2.963855, 8.267215, 6.971768, 9.792482, 8.307007, 3.284726, 6.043478], [8.242261, 4.382536, 2.281594, 6.885719, 1.757702, 2.707464, 3.576059, 9.822790, 8.539407, 5.452304], [4.352292, 1.629173, 5.365017, 4.048384, 4.805615, 0.214378, 2.080086, 3.216574, 7.627194, 2.881687], [4.280675, 1.129255, 0.577777, 7.282142, 9.039947, 4.705979, 2.561620, 9.903443, 8.356716, 5.217172]]> : tensor<10x10xf64>

        %computed = call @sparse_dense_matmul(%sparse, %dense, %init) : (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %expected = arith.constant dense<[[146.893117, 63.623647, 84.849320, 80.999712, 145.095236, 150.479788, 160.344892, 76.532406, 92.709958, 101.115045], [37.261047, 14.894248, 44.841704, 33.716636, 41.499286, 2.160650, 18.355652, 28.094113, 64.076053, 24.603473], [10.122459, 7.294037, 5.335781, 6.201371, 9.784290, 8.231941, 10.298927, 9.443947, 8.561809, 11.120805], [176.810222, 101.619878, 82.095990, 88.623040, 185.074138, 175.044581, 183.155399, 138.353976, 160.984308, 175.602784], [68.778177, 45.579549, 50.868812, 64.857679, 43.078491, 74.897679, 70.889089, 53.391596, 96.722816, 57.471352], [126.558847, 54.813784, 74.823137, 94.524297, 94.377036, 54.207243, 63.110673, 122.239156, 172.999972, 103.577851], [69.300816, 42.022956, 22.761171, 51.978987, 28.427166, 21.772076, 34.723575, 81.197713, 71.432479, 45.344173], [47.141124, 18.837202, 19.275033, 27.631825, 34.859660, 30.388019, 38.132219, 35.323429, 23.304610, 28.646024], [90.053840, 39.428231, 22.686529, 106.516881, 102.174606, 67.494505, 53.845178, 147.032531, 125.909939, 88.322534], [74.535641, 50.342941, 37.547655, 45.590508, 122.862527, 46.618667, 57.816093, 92.988347, 101.047043, 67.248108]]> : tensor<10x10xf64>

        // Validate each element
        %false = arith.constant false : i1
        %flag = scf.for %i = %c0 to %rows step %c1 iter_args(%f_iter = %false) -> (i1) {
            %flag_row = scf.for %j = %c0 to %cols step %c1 iter_args(%f_in = %f_iter) -> (i1) {
                %cmp_c = tensor.extract %computed[%i, %j] : tensor<10x10xf64>
                %cmp_e = tensor.extract %expected[%i, %j] : tensor<10x10xf64>
                %neq = arith.cmpf une, %cmp_c, %cmp_e : f64
                %new_f = arith.or %f_in, %neq : i1
                scf.yield %new_f : i1
            }
            scf.yield %flag_row : i1
        }

        %zero_i32 = arith.constant 0 : i32
        %one_i32 = arith.constant 1 : i32
        %status = scf.if %flag -> (i32) {
            scf.yield %one_i32 : i32
        } else {
            scf.yield %zero_i32 : i32
        }
        return %status : i32
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[0.672394, 5.713894, 9.742074, 2.851896, 1.153895, 0.244052, 8.184905, 0.240838, 1.025911, 9.888609, 9.253926, 1.284325, 3.873607, 1.195899, 7.175311, 2.215378, 4.379588, 9.549867, 7.074310, 1.833722, 6.914824, 3.366296, 2.522365, 1.624024, 4.580099, 9.072937, 2.224623, 6.959448, 0.332561, 3.942498]> : tensor<30xf64>
        %row_ptr = arith.constant dense<[0, 5, 7, 9, 13, 16, 19, 21, 23, 26, 30]> : tensor<11xindex>
        %col_ind = arith.constant dense<[0, 1, 3, 4, 8, 2, 8, 2, 5, 4, 5, 6, 7, 0, 1, 8, 0, 7, 8, 2, 7, 3, 7, 5, 7, 9, 0, 2, 4, 9]> : tensor<30xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<30xindex>), tensor<30xf64> -> tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }

}
