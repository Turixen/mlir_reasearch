// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @matmul(%t : tensor<10x10xf64, #CSR>, %s : tensor<10x10xf64>, %out : tensor<10x10xf64>)
        -> tensor<10x10xf64> {
        %0 = linalg.matmul
            ins(%t, %s: tensor<10x10xf64, #CSR>, tensor<10x10xf64>)
            outs(%out: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %0 : tensor<10x10xf64>
    }

    func.func @main() -> i64 {
        %c = tensor.empty() : tensor<10x10xf64>
        %t_sparse = call @test_assemble() : () -> tensor<10x10xf64, #CSR>
        %s = arith.constant dense<[
            [3.55713662286544, 8.399919328245238, 4.985207598028646, 1.1601008446515415, 3.670472959015789, 4.453449122689596, 6.22736749006438, 5.619477845906785, 5.789517456019891, 1.014170717467412], [1.9540935086163025, 7.372500276395552, 8.039267390235963, 0.034006965294587355, 5.037572884879705, 5.950466781116198, 8.66320457778208, 9.552596845519906, 0.14747077648155527, 2.451755737754855], [3.5305895080585668, 8.792385579255198, 7.277930965210531, 2.119426439945278, 6.424271340022533, 3.133042872347799, 0.6402586236284069, 6.358873785002666, 3.544203036814636, 3.2190642600931927], [3.500678367328919, 4.807079872810122, 1.1595575056210883, 5.297526731157188, 4.653329694253328, 5.740821481031119, 4.497560903048847, 9.272678920145589, 9.818456658264024, 4.2070206920362505], [1.722112919807477, 4.871518693929544, 4.21504070374638, 0.9436515034491977, 9.18762628045555, 6.332761080128153, 9.634231388334767, 8.111251062482877, 9.688779534749125, 8.575939993796828], [6.36834599235738, 0.5198569329310732, 9.835987369169514, 5.887407028657149, 2.8959014670117877, 3.6159481691844197, 2.058742597412598, 0.01598233962836093, 5.657417738359792, 6.583667696820372], [6.967303760231925, 6.925592176027547, 1.9892133855676253, 1.3333996533858716, 8.362446510737543, 5.4631408580023795, 1.4443463656828248, 3.4921756161861817, 7.280580120436582, 3.896610872550701], [0.8339722091966273, 2.9630181000840627, 0.6839884822046138, 7.736796118175253, 5.471015341792366, 8.004120218722818, 1.3740329726946232, 4.618031162814508, 9.15187002474231, 6.417381711044559], [4.420523941705047, 6.812995264345841, 9.92217074892812, 6.271072240288471, 7.275508811819591, 9.367000578232657, 6.8914207119321595, 0.18007301759384697, 1.2379468923032921, 7.739782474306097], [1.6730038679161674, 9.24384444951013, 1.2877160958051481, 2.67953062436146, 7.3036453502716645, 2.883159783567434, 5.928215315830996, 6.822803235544682, 2.3849950034665235, 9.114810591692358]
        ]> : tensor<10x10xf64>
        %result_matrix = call @matmul(%t_sparse, %s, %c) :
            (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %c1 = arith.constant 1 : index
        %element_f64 = tensor.extract %result_matrix[%c1, %c1] : tensor<10x10xf64>
        %element_i64 = arith.fptosi %element_f64 : f64 to i64
        return %element_i64 : i64
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[1.298820, 4.222304, 8.923837, 3.229858, 3.721839, 6.527939, 1.578849, 3.914354, 0.396235, 9.295685, 4.682198, 4.996789, 9.959956, 8.395244, 0.515438, 7.624307, 4.584582, 4.608133, 4.273188, 2.582864, 6.718034, 8.916061, 1.261330, 3.134849, 4.100569, 2.922530, 1.911662, 4.446648, 2.420622, 0.149504]> : tensor<30xf64>
        %row_ptr = arith.constant dense<[0, 2, 3, 9, 13, 15, 20, 23, 23, 26, 30]> : tensor<11xindex>
        %col_ind = arith.constant dense<[3, 7, 8, 2, 3, 4, 5, 7, 8, 0, 6, 8, 9, 1, 4, 0, 2, 4, 5, 6, 3, 4, 7, 0, 2, 6, 1, 3, 6, 7]> : tensor<30xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<30xindex>), tensor<30xf64> to tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }
    
}
