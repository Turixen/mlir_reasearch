// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @matmul(%t : tensor<10x10xf64, #CSR>, %s : tensor<10x10xf64>, %out : tensor<10x10xf64>)
        -> tensor<10x10xf64> {
        %0 = linalg.matmul
            ins(%t, %s: tensor<10x10xf64, #CSR>, tensor<10x10xf64>)
            outs(%out: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %0 : tensor<10x10xf64>
    }

    func.func @main() -> i64 {
        %c = tensor.empty() : tensor<10x10xf64>
        %t_sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %s = arith.constant dense<[
            [1.9190586696254852, 5.677035998588754, 8.403661610566184, 1.3119567025744405, 1.576664909869615, 8.72004282634163, 2.9985999629855065, 3.4616942686855623, 3.4416971748461744, 3.7973220966700962], [9.005772110078308, 3.3818687265609872, 3.567666929323128, 3.6356236413671628, 7.2318498743633945, 2.7877281866641357, 9.68535670483645, 2.676275176952431, 3.7349964296001725, 2.445131862297416], [9.006186498644295, 7.71156600349809, 7.882529198823192, 0.5835551311957732, 5.185892968517827, 7.592231407299539, 0.7009527122247428, 4.755113713421688, 3.0708790194217017, 9.42183444973354], [3.018197884524482, 1.9449126754250168, 4.403227110859824, 4.395593217590916, 9.97812419696749, 0.2694371424992148, 9.216201029367792, 6.865759489697535, 6.407775410695972, 6.909917955474891], [4.469996231132556, 2.952257432530778, 3.020132598313854, 8.191736778675565, 7.751523503595099, 8.781792127920433, 2.7108746745570467, 3.259118338651982, 7.020877680459337, 3.6360184512711213], [0.7323516233328264, 5.8555641181489495, 7.31292696649162, 7.797880449071157, 6.776873189849313, 9.33260066741349, 9.50386691919858, 1.9713578567576373, 6.674926443100897, 8.487280716087112], [7.946346706562858, 1.0520640505628054, 9.927839178604522, 8.876183503694833, 2.9346873006605945, 7.697087599139644, 6.486890238854467, 5.305162783352378, 2.373220147428526, 9.696541551051354], [4.621917038140543, 9.18757369034899, 3.9081888455747116, 3.7733554558284057, 7.106523471372808, 1.6539957656256488, 5.332964612213866, 5.280991892263447, 8.984826239724036, 7.718204275723202], [7.735206142955583, 8.503050660286416, 2.571802720087221, 9.835004229751815, 4.839278588962604, 1.8834604158548363, 6.510426549771928, 8.562426149181096, 6.164653670294362, 6.692620761883225], [2.475697688923079, 9.640503353980467, 6.204095283744973, 3.750353256867819, 9.01199560651413, 1.9051843106273736, 4.857111401120412, 8.525406488047242, 9.076729303787584, 8.621525890935384]
        ]> : tensor<10x10xf64>
        %result_matrix = call @matmul(%t_sparse, %s, %c) :
            (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %c1 = arith.constant 1 : index
        %element_f64 = tensor.extract %result_matrix[%c1, %c1] : tensor<10x10xf64>
        %element_i64 = arith.fptosi %element_f64 : f64 to i64
        return %element_i64 : i64
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[3.464856, 5.757993, 3.385053, 0.942788, 2.889201, 1.792730, 1.153303, 2.333983, 8.422354, 8.017297, 4.407669, 6.159355, 7.031704, 1.831047, 0.690997, 6.346989, 3.115388, 5.505956, 5.559695, 6.237975, 4.547088, 0.180092, 5.019172, 0.578632, 7.146053, 4.923627, 6.700706, 2.739531, 8.200569, 7.575610]> : tensor<30xf64>
        %row_ptr = arith.constant dense<[0, 3, 6, 10, 14, 17, 20, 22, 26, 27, 30]> : tensor<11xindex>
        %col_ind = arith.constant dense<[4, 8, 9, 3, 5, 9, 0, 1, 3, 7, 4, 6, 7, 9, 2, 4, 8, 0, 2, 9, 0, 3, 1, 2, 5, 9, 5, 4, 6, 7]> : tensor<30xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<30xindex>), tensor<30xf64> to tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }
    
}
