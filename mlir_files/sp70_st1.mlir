// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @sparse_dense_matmul(%sparse: tensor<10x10xf64, #CSR>,%dense: tensor<10x10xf64>,%init: tensor<10x10xf64>
    ) -> tensor<10x10xf64> {
        %res = linalg.matmul ins(%sparse, %dense: tensor<10x10xf64, #CSR>, tensor<10x10xf64>) 
            outs(%init: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %res : tensor<10x10xf64>
    }

    func.func @main() -> i32 {
        %c0 = arith.constant 0 : index
        %c1 = arith.constant 1 : index
        %rows = arith.constant 10 : index
        %cols = arith.constant 10 : index
        %zero_f64 = arith.constant 0.0 : f64

        %init = tensor.empty() : tensor<10x10xf64>
        %sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %dense = arith.constant dense<[[2.532597, 5.027904, 3.569557, 1.917673, 6.010881, 5.285272, 4.113649, 1.884212, 5.390229, 6.157083], [4.540616, 5.253075, 5.014727, 3.566383, 3.439414, 1.475994, 5.692749, 4.284386, 1.007442, 7.909428], [0.478005, 2.574800, 1.638259, 4.213598, 1.252789, 8.321512, 0.016317, 5.594145, 6.078000, 0.403744], [3.179171, 7.889042, 6.172609, 1.753940, 5.356597, 1.928848, 8.853093, 3.583300, 4.972533, 1.811591], [9.622992, 3.409485, 6.007317, 0.264769, 8.134038, 7.981931, 0.715004, 2.123927, 8.330362, 8.884287], [5.573301, 3.104676, 6.678948, 1.278141, 0.109371, 9.133583, 1.828514, 4.713662, 4.450244, 5.868736], [0.380615, 7.836648, 3.959420, 7.121108, 0.321011, 6.564743, 7.641957, 9.773251, 5.996374, 7.951536], [2.730178, 9.449187, 9.683976, 2.807925, 6.131579, 5.113007, 2.475736, 2.879014, 7.302950, 8.811592], [9.008170, 9.361024, 1.278848, 3.926178, 6.257867, 5.237336, 3.993223, 4.562777, 5.255879, 4.620648], [2.319348, 3.596459, 1.830443, 1.208436, 2.739065, 9.665386, 9.791594, 2.918331, 4.016229, 5.328794]]> : tensor<10x10xf64>

        %computed = call @sparse_dense_matmul(%sparse, %dense, %init) : (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %expected = arith.constant dense<[[18.419313, 35.175493, 23.974722, 13.190700, 39.897761, 45.101578, 38.236256, 15.350604, 37.932087, 44.351983], [52.936364, 98.361067, 71.795070, 86.936770, 51.202720, 153.992496, 73.045453, 127.387808, 130.606703, 111.609549], [141.942830, 171.255912, 166.340717, 50.996138, 146.875787, 212.552620, 119.486671, 87.702737, 178.777437, 209.343519], [18.550850, 25.182642, 18.984913, 12.876690, 19.159312, 32.704402, 42.352782, 19.164429, 16.448210, 36.833817], [150.886254, 155.279162, 178.487221, 56.652331, 155.406388, 154.105115, 83.761367, 85.448903, 156.480793, 224.809887], [74.180818, 59.142380, 88.901758, 37.379607, 20.246814, 107.218604, 44.579757, 75.075861, 57.613047, 93.188075], [31.010071, 86.058647, 75.135992, 21.541321, 57.464752, 30.586216, 68.893239, 34.276931, 58.831126, 42.381615], [38.080497, 86.100848, 70.824225, 27.982921, 56.255203, 46.949981, 25.785761, 29.816583, 62.399321, 71.684996], [36.176922, 20.152802, 43.353801, 8.296557, 0.709938, 59.287113, 11.869090, 30.596906, 28.887032, 38.094623], [66.238986, 73.919425, 92.049064, 61.182576, 36.855843, 187.891004, 33.110137, 106.601229, 122.613433, 82.342447]]> : tensor<10x10xf64>

        // Validate each element
        %false = arith.constant "false" : i1
        %flag = scf.for %i = %c0 to %rows step %c1 iter_args(%f_iter = %false) -> (i1) {
            %flag_row = scf.for %j = %c0 to %cols step %c1 iter_args(%f_in = %f_iter) -> (i1) {
                %cmp_c = tensor.extract %computed[%i, %j] : tensor<10x10xf64>
                %cmp_e = tensor.extract %expected[%i, %j] : tensor<10x10xf64>
                %neq = arith.cmpf une, %cmp_c, %cmp_e : f64
                %new_f = arith.ori %f_in, %neq : i1
                scf.yield %new_f : i1
            }
            scf.yield %flag_row : i1
        }

        %zero_i32 = arith.constant 0 : i32
        %one_i32 = arith.constant 1 : i32
        %status = scf.if %flag -> (i32) {
            scf.yield %one_i32 : i32
        } else {
            scf.yield %zero_i32 : i32
        }
        return %status : i32
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[6.008399, 1.380757, 6.738070, 4.624094, 7.887313, 0.955388, 6.305467, 2.732058, 9.583448, 2.411544, 7.825765, 0.601955, 2.374791, 2.691846, 4.476867, 6.803307, 7.942080, 2.570133, 6.558636, 4.881579, 1.959363, 9.164920, 6.829440, 3.405680, 7.036941, 2.094587, 6.491112, 3.891464, 9.939006, 9.264272]> : tensor<30xf64>
        %row_ptr = arith.constant dense<[0, 2, 6, 11, 14, 19, 22, 24, 26, 27, 30]> : tensor<11xindex>
        %col_ind = arith.constant dense<[0, 9, 2, 4, 6, 9, 4, 5, 7, 8, 9, 0, 1, 9, 0, 1, 4, 5, 7, 1, 2, 5, 3, 7, 7, 8, 5, 0, 2, 5]> : tensor<30xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<30xindex>), tensor<30xf64> to tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }

}
