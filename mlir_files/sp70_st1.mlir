// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @sparse_dense_matmul(%sparse: tensor<10x10xf64, #CSR>,%dense: tensor<10x10xf64>,%init: tensor<10x10xf64>
    ) -> tensor<10x10xf64> {
        %res = linalg.matmul ins(%sparse, %dense: tensor<10x10xf64, #CSR>, tensor<10x10xf64>) 
            outs(%init: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %res : tensor<10x10xf64>
    }

    func.func @main() -> i32 {
        %c0 = arith.constant 0 : index
        %c1 = arith.constant 1 : index
        %rows = arith.constant 10 : index
        %cols = arith.constant 10 : index
        %zero_f64 = arith.constant 0.0 : f64

        %init = tensor.empty() : tensor<10x10xf64>
        %sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %dense = arith.constant dense<[[6.921916, 3.832467, 0.916480, 1.418719, 9.067272, 8.366420, 6.896588, 5.691363, 2.046466, 8.223244], [4.287117, 1.487326, 7.981863, 3.716670, 7.537117, 9.856369, 2.527193, 0.344816, 1.988560, 3.049365], [9.933331, 9.281863, 8.051494, 2.604530, 8.123596, 1.353341, 6.882593, 3.517704, 4.937147, 5.420896], [9.655111, 1.012697, 9.624221, 5.405471, 3.549796, 9.554115, 8.591907, 6.945567, 4.063125, 8.620505], [1.039074, 9.233989, 6.241774, 4.748429, 4.190720, 0.557193, 6.821065, 0.156118, 5.431091, 4.514854], [1.898237, 0.494211, 1.503098, 4.857216, 7.006380, 6.985706, 9.145365, 4.998148, 6.755288, 3.977367], [9.291259, 8.606159, 7.929524, 8.832440, 8.092282, 0.261530, 8.583040, 3.919717, 2.850619, 2.921392], [8.872856, 1.513977, 7.584700, 7.818112, 2.809195, 1.998313, 3.736459, 4.601160, 0.198979, 8.135283], [5.143040, 2.284134, 6.930551, 1.702363, 4.182186, 0.225065, 5.581993, 4.753124, 3.714797, 9.966839], [2.957984, 6.198523, 1.471715, 9.916419, 0.407403, 3.240529, 3.060933, 8.882480, 6.168208, 6.876212]]> : tensor<10x10xf64>

        %computed = call @sparse_dense_matmul(%sparse, %dense, %init) : (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %expected = arith.constant dense<[[75.102776, 19.037070, 62.884001, 90.056202, 82.646499, 73.450688, 105.964192, 72.864972, 63.062968, 86.028783], [62.103587, 37.197285, 87.999144, 100.682392, 119.785820, 149.914647, 98.193574, 67.706223, 86.347480, 78.452147], [31.246745, 12.748255, 48.081109, 16.568790, 36.386153, 27.567481, 28.153129, 19.075816, 19.566954, 46.303917], [188.346366, 126.904870, 196.406539, 141.748397, 166.014376, 113.465513, 160.114578, 81.377775, 75.506691, 104.884021], [71.290598, 63.829946, 51.350981, 129.147625, 17.769835, 39.415426, 46.493256, 103.649885, 56.967206, 103.149672], [48.284088, 112.184956, 84.881856, 76.571055, 68.851185, 5.664925, 92.406518, 18.067795, 56.508850, 49.339422], [110.302483, 46.859643, 102.848079, 130.004273, 51.615444, 63.916775, 56.873710, 84.574696, 35.864137, 117.210990], [175.441527, 115.052093, 200.256881, 125.188100, 184.739023, 95.385708, 159.545744, 91.662668, 79.511199, 158.273700], [132.721581, 62.335263, 85.897887, 53.126186, 115.240437, 119.912431, 126.254957, 92.897000, 60.412076, 123.592792], [56.383231, 89.797082, 111.718692, 51.175684, 70.546863, 6.244774, 103.221777, 46.172354, 75.275968, 127.729749]]> : tensor<10x10xf64>

        // Validate each element
        %false = arith.constant "false" : i1
        %flag = scf.for %i = %c0 to %rows step %c1 iter_args(%f_iter = %false) -> (i1) {
            %flag_row = scf.for %j = %c0 to %cols step %c1 iter_args(%f_in = %f_iter) -> (i1) {
                %cmp_c = tensor.extract %computed[%i, %j] : tensor<10x10xf64>
                %cmp_e = tensor.extract %expected[%i, %j] : tensor<10x10xf64>
                %neq = arith.cmpf une, %cmp_c, %cmp_e : f64
                %new_f = arith.or %f_in, %neq : i1
                scf.yield %new_f : i1
            }
            scf.yield %flag_row : i1
        }

        %zero_i32 = arith.constant 0 : i32
        %one_i32 = arith.constant 1 : i32
        %status = scf.if %flag -> (i32) {
            scf.yield %one_i32 : i32
        } else {
            scf.yield %zero_i32 : i32
        }
        return %status : i32
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[0.624719, 8.704905, 5.902639, 9.080755, 7.138904, 3.252891, 2.709767, 3.816742, 6.345142, 2.878617, 4.632253, 0.569252, 9.388753, 5.009640, 9.074012, 8.155821, 4.284628, 3.087769, 9.434493, 4.514546, 1.586459, 7.879568, 8.753904, 9.594476, 6.641611, 3.324806, 5.306786, 1.309057, 7.381702, 9.471653]> : tensor<30xf64>
        %row_ptr = arith.constant dense<[0, 3, 6, 8, 13, 15, 17, 20, 24, 28, 30]> : tensor<11xindex>
        %col_ind = arith.constant dense<[2, 5, 7, 1, 5, 9, 1, 8, 1, 2, 3, 4, 6, 7, 9, 4, 6, 1, 7, 9, 0, 1, 6, 8, 0, 2, 3, 5, 4, 8]> : tensor<30xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<30xindex>), tensor<30xf64> -> tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }

}
