// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @sparse_dense_matmul(%sparse: tensor<10x10xf64, #CSR>,%dense: tensor<10x10xf64>,%init: tensor<10x10xf64>
    ) -> tensor<10x10xf64> {
        %res = linalg.matmul ins(%sparse, %dense: tensor<10x10xf64, #CSR>, tensor<10x10xf64>) 
            outs(%init: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %res : tensor<10x10xf64>
    }

    func.func @main() -> i32 {
        %c0 = arith.constant 0 : index
        %c1 = arith.constant 1 : index
        %rows = arith.constant 10 : index
        %cols = arith.constant 10 : index
        %zero_f64 = arith.constant 0.0 : f64

        %init = tensor.empty() : tensor<10x10xf64>
        %sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %dense = arith.constant dense<[[2.802649, 5.268067, 9.567108, 1.486110, 5.964439, 9.103271, 1.945002, 3.699198, 1.864205, 6.508990], [8.048532, 4.344331, 3.701452, 2.286623, 1.291809, 1.878602, 8.919395, 4.040662, 0.049832, 1.229556], [0.955443, 8.106994, 7.576797, 4.933275, 1.022815, 3.824939, 9.065691, 7.628675, 7.002069, 1.547494], [0.721691, 9.338777, 7.004539, 9.794458, 8.546650, 3.921915, 7.699036, 1.181446, 3.252987, 2.187006], [2.115161, 1.122442, 9.025895, 8.009978, 2.375023, 4.508215, 8.288343, 9.193073, 9.892475, 6.486826], [4.010834, 0.031771, 5.121731, 0.775282, 9.197804, 9.286292, 9.081272, 6.624364, 7.962657, 3.223377], [8.425390, 4.948250, 7.532041, 2.142698, 0.441504, 6.241832, 9.899190, 7.521062, 2.244824, 6.044920], [0.525347, 6.378823, 4.100722, 2.183543, 5.004290, 8.461960, 6.228881, 7.728943, 6.528542, 2.294326], [3.547950, 6.912212, 4.830236, 6.711819, 9.949871, 3.780591, 6.753168, 5.516595, 6.207743, 7.345963], [1.264350, 6.298237, 9.747117, 1.603922, 3.455654, 6.105149, 9.874369, 4.716582, 7.676632, 8.315306]]> : tensor<10x10xf64>

        %computed = call @sparse_dense_matmul(%sparse, %dense, %init) : (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %expected = arith.constant dense<[[38.823152, 149.007316, 181.664757, 150.235700, 134.355621, 129.350938, 170.029725, 104.467592, 121.018924, 103.574093], [57.272749, 120.851303, 98.109105, 113.765907, 130.424608, 69.718704, 124.665088, 74.022139, 76.094425, 90.812552], [92.553632, 68.188144, 121.619660, 76.400717, 44.739008, 85.991405, 144.051197, 124.368084, 84.721895, 104.354416], [105.390188, 126.800724, 175.901220, 89.423794, 125.496463, 167.337186, 230.441238, 152.190150, 130.917610, 104.110287], [39.507572, 32.666134, 87.381560, 13.460948, 87.746653, 107.595266, 62.311646, 59.517558, 55.615494, 58.002918], [65.357877, 166.902584, 211.335735, 160.395812, 193.583873, 166.709658, 160.005973, 135.020474, 137.105451, 157.759310], [49.484890, 61.097389, 112.482294, 74.116038, 88.951196, 97.777249, 121.322609, 85.495765, 87.298305, 69.506280], [91.701592, 36.451986, 93.483846, 21.488076, 72.119922, 115.232677, 140.463712, 104.657755, 76.066742, 68.382178], [136.964831, 98.941133, 268.248863, 114.516520, 187.742830, 257.232396, 246.295804, 230.850813, 205.172701, 195.258738], [132.458702, 193.864424, 280.612368, 99.498792, 209.568731, 294.935399, 303.756080, 223.895751, 201.974442, 192.244753]]> : tensor<10x10xf64>

        // Validate each element
        %false = arith.constant "false" : i1
        %flag = scf.for %i = %c0 to %rows step %c1 iter_args(%f_iter = %false) -> (i1) {
            %flag_row = scf.for %j = %c0 to %cols step %c1 iter_args(%f_in = %f_iter) -> (i1) {
                %cmp_c = tensor.extract %computed[%i, %j] : tensor<10x10xf64>
                %cmp_e = tensor.extract %expected[%i, %j] : tensor<10x10xf64>
                %neq = arith.cmpf une, %cmp_c, %cmp_e : f64
                %new_f = arith.or %f_in, %neq : i1
                scf.yield %new_f : i1
            }
            scf.yield %flag_row : i1
        }

        %zero_i32 = arith.constant 0 : i32
        %one_i32 = arith.constant 1 : i32
        %status = scf.if %flag -> (i32) {
            scf.yield %one_i32 : i32
        } else {
            scf.yield %zero_i32 : i32
        }
        return %status : i32
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[3.024130, 9.844127, 4.729078, 1.064125, 2.465813, 2.356409, 5.141395, 2.748437, 8.569906, 4.755870, 8.535211, 2.982488, 0.342946, 3.048986, 4.762632, 7.148637, 7.933917, 0.945875, 1.632059, 6.167367, 5.540645, 9.020162, 5.953934, 4.771234, 1.564505, 7.008779, 1.644387, 3.786147, 3.263569, 4.000860, 2.223731, 0.362452, 7.489695, 7.318553, 9.356558, 8.623863, 9.910073, 5.504785, 1.796309, 6.145836, 4.328275, 8.458976, 7.921964, 6.545948, 6.326040]> : tensor<45xf64>
        %row_ptr = arith.constant dense<[0, 6, 9, 12, 19, 21, 26, 32, 34, 39, 45]> : tensor<11xindex>
        %col_ind = arith.constant dense<[0, 3, 4, 6, 7, 9, 3, 6, 8, 4, 6, 8, 0, 2, 3, 5, 6, 7, 9, 0, 5, 0, 3, 4, 7, 8, 0, 3, 4, 5, 6, 9, 5, 6, 0, 4, 5, 6, 8, 0, 3, 5, 6, 7, 9]> : tensor<45xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<45xindex>), tensor<45xf64> -> tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }

}
