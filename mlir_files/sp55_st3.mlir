// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @matmul(%t : tensor<10x10xf64, #CSR>, %s : tensor<10x10xf64>, %out : tensor<10x10xf64>)
        -> tensor<10x10xf64> {
        %0 = linalg.matmul
            ins(%t, %s: tensor<10x10xf64, #CSR>, tensor<10x10xf64>)
            outs(%out: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %0 : tensor<10x10xf64>
    }

    func.func @main() -> i64 {
        %c = tensor.empty() : tensor<10x10xf64>
        %t_sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %s = arith.constant dense<[
            [0.3739899188509088, 0.8761798840195556, 9.294960878087078, 9.288053059356512, 5.223655926606606, 8.315769473520465, 6.112070936777477, 9.054650255903805, 5.602447416723752, 9.173064906697991], [2.8285678313137295, 2.347703958185521, 0.8625891902201288, 0.5835632813916214, 0.8971796770784835, 4.909254577221317, 0.6993447981376522, 1.8254858434209564, 0.3483831229448464, 0.2526919120044713], [8.892494983546772, 9.89062197695615, 5.660749127648776, 4.162486465873796, 7.4615539231991885, 8.80518357063364, 0.5926435550396125, 2.280066106446105, 9.308180960589937, 5.409232133136533], [7.406954350642703, 6.585680192563625, 2.820496873122673, 7.966794134281491, 9.185586321355423, 7.373230173907455, 1.9659104026000518, 8.665238624092437, 4.804194754885352, 8.183161850198262], [5.31797006818074, 6.824973923379385, 8.812500480829845, 6.6072108531159905, 1.8223222582680176, 3.1454648939878274, 9.556522345780591, 6.902157495424306, 0.18792888783909945, 7.536413405705239], [4.693227799234645, 4.464884900083323, 3.4985345847572544, 2.0274037162765346, 8.317722080027254, 8.116176873789197, 0.19275584473250507, 7.445647120233524, 2.252145175506178, 6.670393620127061], [6.128300388856539, 9.806547009498319, 5.685763607175186, 1.9356880787733999, 8.404747595013683, 1.7879250959753001, 5.318941420329384, 4.2024867740522565, 0.33432434759920304, 7.827533267164316], [3.8606258164682683, 3.8920831710219828, 0.5416515101581354, 0.37321249114143584, 0.4177131303276138, 3.274674001915878, 7.513219510516364, 5.500015348000793, 5.793326067699061, 1.5929840048582355], [8.661357810950568, 3.8140845573309754, 2.6415121501440844, 9.158357599776588, 0.08779375493546238, 7.649751842883418, 8.313153208598079, 5.126205886048388, 7.303381966372528, 3.0315835244024756], [6.998408387479259, 2.621047036534611, 3.9428158068145116, 1.0321168143636328, 2.8210578608668015, 7.7944199083234365, 2.3717637796167814, 9.281029551791505, 3.464901428988527, 4.912721246625597]
        ]> : tensor<10x10xf64>
        %result_matrix = call @matmul(%t_sparse, %s, %c) :
            (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %c1 = arith.constant 1 : index

        %element_f64 = tensor.extract %result_matrix[%c1, %c1] : tensor<10x10xf64>
        %element_i64 = arith.fptosi %element_f64 : f64 to i64
        return %element_i64 : i64
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[6.712827, 7.608709, 4.888069, 8.595850, 3.136931, 0.365594, 9.686800, 9.865809, 0.372293, 3.373883, 4.199573, 7.711091, 5.348539, 3.271278, 7.752027, 9.345512, 3.813646, 4.882878, 3.104699, 3.433770, 8.943388, 5.770969, 9.737659, 6.796508, 2.166343, 3.816944, 5.278882, 3.586204, 8.693833, 5.670931, 6.532257, 4.393636, 0.359367, 9.584404, 8.505215, 0.677520, 4.100466, 3.378406, 0.777240, 4.377214, 7.450790, 1.864563, 9.971328, 1.418478, 2.492016]> : tensor<45xf64>
        %row_ptr = arith.constant dense<[0, 4, 6, 10, 17, 22, 25, 31, 37, 40, 45]> : tensor<11xindex>
        %col_ind = arith.constant dense<[0, 3, 6, 9, 0, 3, 0, 1, 3, 5, 0, 3, 4, 6, 7, 8, 9, 3, 4, 5, 7, 9, 0, 6, 8, 0, 1, 3, 6, 7, 9, 1, 4, 5, 7, 8, 9, 4, 7, 9, 0, 3, 6, 8, 9]> : tensor<45xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<45xindex>), tensor<45xf64> to tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }
    
}
