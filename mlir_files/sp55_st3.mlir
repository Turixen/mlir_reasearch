// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @sparse_dense_matmul(%sparse: tensor<10x10xf64, #CSR>,%dense: tensor<10x10xf64>,%init: tensor<10x10xf64>
    ) -> tensor<10x10xf64> {
        %res = linalg.matmul ins(%sparse, %dense: tensor<10x10xf64, #CSR>, tensor<10x10xf64>) 
            outs(%init: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %res : tensor<10x10xf64>
    }

    func.func @main() -> i32 {
        %c0 = arith.constant 0 : index
        %c1 = arith.constant 1 : index
        %rows = arith.constant 10 : index
        %cols = arith.constant 10 : index
        %zero_f64 = arith.constant 0.0 : f64

        %init = tensor.empty() : tensor<10x10xf64>
        %sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %dense = arith.constant dense<[[7.084636, 0.723700, 7.202155, 1.577156, 5.563103, 6.753081, 6.603489, 2.246388, 1.815735, 2.571268], [4.053987, 7.131484, 7.187356, 3.039270, 9.246832, 2.528177, 8.422247, 1.178213, 4.995477, 8.448788], [5.156508, 2.509794, 4.924202, 6.063850, 9.899756, 2.273951, 1.632749, 0.866339, 6.268317, 1.305317], [8.081989, 4.958167, 3.587734, 1.067109, 0.200679, 9.902209, 3.053980, 4.083315, 8.736540, 9.815557], [7.909129, 8.779470, 7.277793, 3.607069, 6.701910, 4.636969, 5.063810, 9.944663, 7.267654, 0.281419], [2.477969, 1.919689, 9.644989, 6.178572, 4.124654, 0.248210, 4.742541, 7.036798, 1.680003, 2.613010], [1.909319, 0.786337, 8.204135, 7.739038, 2.450923, 6.963152, 3.562080, 6.685998, 2.754007, 4.454475], [7.512292, 3.633848, 4.632644, 9.348242, 9.721048, 2.558448, 1.778936, 2.733126, 5.184982, 0.365662], [1.881318, 8.002728, 8.804585, 4.307053, 9.303356, 3.458392, 9.997091, 6.606397, 4.900044, 3.436165], [8.077075, 1.030216, 1.615118, 9.922400, 4.518047, 7.445506, 2.125637, 3.491313, 6.184421, 3.177656]]> : tensor<10x10xf64>

        %computed = call @sparse_dense_matmul(%sparse, %dense, %init) : (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %expected = arith.constant dense<[[280.858416, 173.011245, 233.750915, 171.407723, 199.629509, 259.115938, 181.338854, 204.588924, 228.703825, 161.122631], [82.891141, 9.546675, 49.562879, 61.197403, 55.490530, 77.677804, 48.835403, 31.177321, 42.891086, 31.379477], [115.093324, 78.289611, 105.631598, 147.890565, 187.676868, 56.292939, 63.588883, 57.067207, 109.125214, 26.181526], [136.609228, 118.808835, 193.184004, 199.100370, 176.597547, 182.776919, 173.888605, 154.450183, 152.862239, 141.737032], [124.184444, 129.947671, 151.124605, 79.357243, 120.067036, 125.675569, 130.335752, 99.915675, 136.511976, 159.288349], [45.588580, 53.740255, 74.734174, 62.935872, 112.861824, 31.807056, 56.289690, 35.663505, 67.051424, 24.717757], [154.219834, 50.779516, 103.818223, 85.999116, 66.174946, 175.810014, 86.670594, 80.417795, 117.587518, 120.702356], [113.245348, 83.137233, 78.107389, 66.896062, 74.539058, 109.241060, 62.604685, 67.236526, 115.729854, 97.654892], [73.954148, 64.781678, 63.376766, 65.132233, 85.539667, 36.597795, 40.597126, 64.586312, 62.528414, 6.076680], [196.247043, 99.355832, 166.508536, 151.812482, 150.461114, 210.816707, 149.162555, 121.193589, 162.300975, 150.056092]]> : tensor<10x10xf64>

        // Validate each element
        %false = arith.constant "false" : i1
        %flag = scf.for %i = %c0 to %rows step %c1 iter_args(%f_iter = %false) -> (i1) {
            %flag_row = scf.for %j = %c0 to %cols step %c1 iter_args(%f_in = %f_iter) -> (i1) {
                %cmp_c = tensor.extract %computed[%i, %j] : tensor<10x10xf64>
                %cmp_e = tensor.extract %expected[%i, %j] : tensor<10x10xf64>
                %neq = arith.cmpf une, %cmp_c, %cmp_e : f64
                %new_f = arith.ori %f_in, %neq : i1
                scf.yield %new_f : i1
            }
            scf.yield %flag_row : i1
        }

        %zero_i32 = arith.constant 0 : i32
        %one_i32 = arith.constant 1 : i32
        %status = scf.if %flag -> (i32) {
            scf.yield %one_i32 : i32
        } else {
            scf.yield %zero_i32 : i32
        }
        return %status : i32
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[7.994805, 2.367881, 8.532320, 9.579336, 3.839042, 3.436337, 0.481686, 4.437933, 5.701801, 5.261305, 6.082112, 9.342884, 3.522786, 0.856364, 0.881502, 3.396756, 1.810544, 7.936090, 8.715615, 8.717455, 0.042573, 9.071154, 6.485323, 3.201129, 1.229038, 3.315590, 7.216713, 4.451956, 6.587362, 7.881456, 2.471061, 4.845180, 8.823203, 4.907797, 2.693598, 4.592026, 4.788745, 0.882767, 6.899486, 1.796883, 6.875955, 3.049954, 2.007075, 3.819655, 6.985661]> : tensor<45xf64>
        %row_ptr = arith.constant dense<[0, 8, 10, 14, 20, 26, 28, 32, 35, 38, 45]> : tensor<11xindex>
        %col_ind = arith.constant dense<[0, 1, 3, 4, 6, 7, 8, 9, 0, 9, 2, 7, 8, 9, 0, 1, 3, 6, 8, 9, 0, 1, 3, 4, 5, 6, 2, 8, 0, 3, 6, 9, 3, 7, 8, 4, 7, 8, 0, 1, 3, 6, 7, 8, 9]> : tensor<45xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<45xindex>), tensor<45xf64> to tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }

}
