// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @matmul(%t : tensor<10x10xf64, #CSR>, %s : tensor<10x10xf64>, %out : tensor<10x10xf64>)
        -> tensor<10x10xf64> {
        %0 = linalg.matmul
            ins(%t, %s: tensor<10x10xf64, #CSR>, tensor<10x10xf64>)
            outs(%out: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %0 : tensor<10x10xf64>
    }

    func.func @main() -> i64 {
        %c = tensor.empty() : tensor<10x10xf64>
        %t_sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %s = arith.constant dense<[
            [[3.473051, 9.762705, 5.439095, 5.245628, 0.589255, 4.311529, 6.130722, 3.603785, 2.574816, 0.203810], [2.072390, 3.041211, 5.722386, 7.121195, 1.903865, 9.626339, 7.835306, 6.090865, 1.548892, 9.138375], [3.251324, 3.322390, 8.150146, 2.951974, 4.686776, 7.633014, 8.109394, 1.009495, 6.974416, 6.781621], [1.199424, 4.040023, 0.892939, 0.842397, 2.837844, 6.658795, 2.722723, 9.116608, 1.594939, 9.422914], [6.542646, 2.931091, 2.654341, 7.444802, 6.555618, 3.881812, 2.390650, 9.597470, 4.305688, 8.517674], [9.716352, 3.744693, 1.815558, 0.613178, 2.885832, 5.342076, 7.221898, 1.848125, 7.476699, 5.378870], [2.147610, 5.235146, 6.376005, 3.319014, 1.903608, 6.419112, 1.304147, 6.466678, 5.674544, 6.026209], [6.581902, 3.231923, 1.847094, 0.008209, 7.092635, 9.338460, 4.645429, 1.991692, 6.849457, 8.374560], [9.856004, 6.189331, 5.394154, 0.080928, 7.849488, 9.507796, 5.625800, 2.277757, 5.537299, 5.775850], [1.610711, 2.290373, 8.287678, 2.956596, 6.500159, 1.411671, 7.582504, 6.980967, 4.003865, 8.244971]]
        ]> : tensor<10x10xf64>
        %result_matrix = call @matmul(%t_sparse, %s, %c) :
            (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %c1 = arith.constant 1 : index

        %element_f64 = tensor.extract %result_matrix[%c1, %c1] : tensor<10x10xf64>
        %element_i64 = arith.fptosi %element_f64 : f64 to i64
        return %element_i64 : i64
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[5.691578, 1.279599, 1.908038, 5.185909, 7.452860, 5.327780, 3.324208, 1.039637, 2.788716, 7.482535, 7.893058, 9.390863, 6.174443, 9.398539, 3.527142, 4.902176, 6.924313, 6.087323, 9.702826, 7.074201, 8.118110, 1.147803, 2.123123, 4.607046, 3.043940, 3.278388, 7.164639, 1.904838, 4.198723, 1.920094, 2.479438, 9.446136, 4.954134, 9.697092, 7.419935, 7.462237, 1.864506, 3.782899, 7.308435, 3.560880, 3.885363, 3.912082, 6.388698, 3.634708, 6.783828]> : tensor<45xf64>
        %row_ptr = arith.constant dense<[0, 6, 7, 11, 18, 24, 28, 34, 38, 40, 45]> : tensor<11xindex>
        %col_ind = arith.constant dense<[0, 2, 3, 6, 7, 9, 8, 0, 1, 3, 6, 0, 2, 3, 4, 5, 6, 9, 0, 1, 5, 7, 8, 9, 0, 2, 7, 9, 0, 3, 4, 6, 8, 9, 5, 6, 8, 9, 4, 5, 0, 3, 6, 8, 9]> : tensor<45xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<45xindex>), tensor<45xf64> to tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }
    
}
