// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @matmul(%t : tensor<10x10xf64, #CSR>, %s : tensor<10x10xf64>, %out : tensor<10x10xf64>)
        -> tensor<10x10xf64> {
        %0 = linalg.matmul
            ins(%t, %s: tensor<10x10xf64, #CSR>, tensor<10x10xf64>)
            outs(%out: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %0 : tensor<10x10xf64>
    }

    func.func @main() -> i64 {
        %c = tensor.empty() : tensor<10x10xf64>
        %t_sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %s = arith.constant dense<[
            [1.9515441938448574, 3.7880273620400384, 7.690175701884573, 3.667895432692422, 7.415286595369993, 1.4547720935978714, 8.584086055201272, 4.498766236500619, 3.8941945981721124, 7.18802401737358], [6.923631832833534, 3.9165978642085006, 6.428785333975898, 2.2198965860629105, 5.854621511442124, 7.495664671815453, 9.472861887339691, 9.180414504664975, 9.848343775480618, 3.990174477451296], [7.742716187226475, 5.531999499042443, 7.466804571247565, 5.501157937751033, 3.542105923316975, 5.981527494796898, 9.442717847594938, 1.8488704547677348, 8.87602665628468, 2.3918658080917163], [4.241975824878103, 9.112906564791446, 5.4732818165582575, 7.002670755089789, 2.375388091505007, 6.508971221894829, 7.512822558580625, 9.661358107505446, 9.749223256041267, 4.752498838050048], [7.22564362635986, 2.073685472694251, 5.053008692213785, 2.6658178628666205, 5.082958736647404, 0.13911716430845322, 9.007953450729108, 7.796399342087641, 8.035043217960215, 3.469176818148292], [5.77902797255372, 6.331290055284164, 6.6725101548303964, 0.9254367779378403, 7.179038373299664, 0.11197724539988241, 5.375597177318735, 2.947402211041293, 1.676996900598543, 7.569810480202374], [9.161503734561464, 0.3871417075028172, 0.8977814615899427, 8.05964389596433, 8.689725254893755, 4.394585324224773, 6.473355710214194, 9.362029372800693, 0.17022514777628395, 2.1398060163179733], [0.9192527449772192, 9.654685106366363, 0.11769991878135322, 6.595135879019928, 8.89600109125959, 8.901665282965878, 4.2557264975096665, 0.5889834690738827, 4.670391857380238, 8.830042018015945], [7.382507897220379, 2.4124538052576385, 2.5002242361485907, 2.80848119981558, 8.015826107023118, 0.4096909941884386, 8.742251923564544, 6.097043728022886, 1.1698348944996118, 8.528009417286516], [7.635074391911514, 0.2053615832068756, 7.406961128690739, 6.9390526204830305, 8.7549989765081, 6.367323240143294, 3.2003698041863027, 1.086922796809251, 8.49309570875753, 8.30989124143127]
        ]> : tensor<10x10xf64>
        %result_matrix = call @matmul(%t_sparse, %s, %c) :
            (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %c1 = arith.constant 1 : index
        %element_f64 = tensor.extract %result_matrix[%c1, %c1] : tensor<10x10xf64>
        %element_i64 = arith.fptosi %element_f64 : f64 to i64
        return %element_i64 : i64
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[3.636365, 8.624954, 8.333802, 6.314429, 1.117260, 1.884819, 2.194481, 7.428378, 8.388261, 3.028876, 4.196166, 5.340487, 4.396656, 4.462895, 1.828284, 4.904674, 0.087002, 9.980135, 0.286646, 2.642719, 0.960818, 5.590765, 4.083676, 2.402558, 4.269953, 4.548369, 6.145613, 4.660518, 9.017663, 5.301430, 4.708487, 9.038313, 9.791971, 0.481548, 3.658986, 9.082687, 2.178198, 7.870528, 8.492651, 6.348058, 7.601365, 9.729430, 3.674292, 5.912871, 6.712375]> : tensor<45xf64>
        %row_ptr = arith.constant dense<[0, 8, 10, 13, 17, 22, 26, 33, 37, 40, 45]> : tensor<11xindex>
        %col_ind = arith.constant dense<[0, 1, 2, 3, 4, 6, 7, 9, 5, 6, 1, 4, 7, 0, 3, 6, 9, 1, 4, 6, 7, 8, 1, 4, 5, 9, 0, 3, 5, 6, 7, 8, 9, 2, 3, 8, 9, 1, 3, 6, 0, 1, 3, 6, 9]> : tensor<45xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<45xindex>), tensor<45xf64> to tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }
    
}
