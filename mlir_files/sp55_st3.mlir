// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @sparse_dense_matmul(%sparse: tensor<10x10xf64, #CSR>,%dense: tensor<10x10xf64>,%init: tensor<10x10xf64>
    ) -> tensor<10x10xf64> {
        %res = linalg.matmul ins(%sparse, %dense: tensor<10x10xf64, #CSR>, tensor<10x10xf64>) 
            outs(%init: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %res : tensor<10x10xf64>
    }

    func.func @main() -> i32 {
        %c0 = arith.constant 0 : index
        %c1 = arith.constant 1 : index
        %rows = arith.constant 10 : index
        %cols = arith.constant 10 : index
        %zero_f64 = arith.constant 0.0 : f64

        %init = tensor.empty() : tensor<10x10xf64>
        %sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %dense = arith.constant dense<[[0.123084, 1.418586, 2.118643, 6.577949, 7.861812, 3.412031, 1.700327, 9.067288, 0.711906, 6.261773], [5.688010, 7.249964, 4.985748, 6.168498, 5.625661, 2.979857, 1.197024, 0.542293, 9.202089, 6.047720], [1.560566, 5.361146, 8.555486, 7.228364, 7.060950, 2.427832, 7.338022, 8.753555, 7.473619, 6.193190], [1.154713, 4.498227, 7.802972, 5.053491, 2.787391, 5.810651, 8.388105, 0.690804, 6.692105, 2.143426], [0.220672, 5.466128, 0.201776, 1.084252, 5.813248, 6.428099, 0.448978, 7.780247, 8.222645, 3.532390], [9.754534, 7.308090, 0.393684, 0.103230, 7.677206, 7.281005, 4.226282, 8.212422, 9.405115, 1.853703], [1.572909, 5.695530, 9.434562, 7.909755, 2.059760, 0.265057, 5.835886, 9.450330, 7.831281, 5.589200], [2.690866, 7.275612, 6.955924, 7.134105, 4.176673, 3.856592, 5.219612, 8.217455, 5.893419, 2.981491], [1.725311, 4.637990, 0.757591, 8.130249, 4.898934, 1.385350, 7.580863, 6.813429, 3.375458, 8.688531], [9.223071, 3.482898, 1.858051, 5.196463, 0.985966, 3.764444, 5.713752, 4.234395, 2.022395, 1.485920]]> : tensor<10x10xf64>

        %computed = call @sparse_dense_matmul(%sparse, %dense, %init) : (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %expected = arith.constant dense<[[101.766090, 115.913627, 112.328564, 200.326973, 107.086125, 73.733320, 164.299324, 200.359555, 109.891115, 150.024060], [0.135407, 3.354072, 0.123812, 0.665308, 3.567069, 3.944348, 0.275498, 4.774040, 5.045500, 2.167511], [71.739112, 135.479802, 128.325120, 123.786824, 106.040698, 104.413363, 146.253528, 132.502259, 149.538033, 77.848660], [59.730231, 85.997859, 90.667890, 110.203960, 73.948674, 80.558269, 97.392840, 111.212914, 85.214427, 61.804974], [77.831780, 109.592273, 62.530658, 86.561712, 137.708043, 100.360262, 70.680302, 190.846487, 137.556789, 92.575725], [39.453066, 122.283560, 148.977288, 146.852538, 69.781608, 62.232050, 135.491626, 138.838904, 132.909562, 89.562824], [135.832289, 153.659989, 149.670246, 182.223231, 100.369720, 93.550744, 134.157152, 178.670763, 181.246233, 127.502766], [2.811248, 41.758095, 1.970521, 13.558956, 44.385324, 46.129739, 8.698245, 59.591712, 60.181083, 31.149883], [110.463378, 159.351339, 115.902839, 135.686758, 151.189928, 118.003999, 93.377190, 137.582433, 182.657460, 109.972821], [110.143555, 118.308172, 108.702696, 209.002901, 136.618796, 124.708918, 197.210944, 173.540741, 108.262431, 150.606267]]> : tensor<10x10xf64>

        // Validate each element
        %false = arith.constant false : i1
        %flag = scf.for %i = %c0 to %rows step %c1 iter_args(%f_iter = %false) -> (i1) {
            %flag_row = scf.for %j = %c0 to %cols step %c1 iter_args(%f_in = %f_iter) -> (i1) {
                %cmp_c = tensor.extract %computed[%i, %j] : tensor<10x10xf64>
                %cmp_e = tensor.extract %expected[%i, %j] : tensor<10x10xf64>
                %neq = arith.cmpf une, %cmp_c, %cmp_e : f64
                %new_f = arith.or %f_in, %neq : i1
                scf.yield %new_f : i1
            }
            scf.yield %flag_row : i1
        }

        %zero_i32 = arith.constant 0 : i32
        %one_i32 = arith.constant 1 : i32
        %status = scf.if %flag -> (i32) {
            scf.yield %one_i32 : i32
        } else {
            scf.yield %zero_i32 : i32
        }
        return %status : i32
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[5.926713, 1.922062, 6.812170, 6.720578, 8.295195, 0.613610, 2.229011, 6.832430, 3.691033, 7.583347, 2.295831, 3.644630, 4.314368, 1.265563, 0.822279, 4.778094, 4.322847, 6.525670, 3.672388, 6.918484, 4.222559, 0.776662, 4.989750, 6.110176, 7.242661, 2.661294, 2.237078, 5.297247, 1.663507, 3.423660, 9.229223, 9.566558, 7.018568, 0.731719, 4.112005, 7.953286, 3.085818, 0.906749, 4.604582, 5.960908, 8.469825, 8.651204, 0.023964, 7.482410, 9.342249]> : tensor<45xf64>
        %row_ptr = arith.constant dense<[0, 5, 6, 11, 17, 22, 26, 32, 34, 40, 45]> : tensor<11xindex>
        %col_ind = arith.constant dense<[0, 3, 6, 8, 9, 4, 2, 3, 5, 7, 8, 0, 3, 4, 6, 7, 9, 0, 4, 5, 6, 7, 3, 6, 7, 8, 0, 1, 3, 4, 6, 9, 4, 8, 0, 1, 3, 4, 5, 7, 0, 3, 6, 8, 9]> : tensor<45xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<45xindex>), tensor<45xf64> -> tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }

}
