// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @sparse_dense_matmul(%sparse: tensor<10x10xf64, #CSR>,%dense: tensor<10x10xf64>,%init: tensor<10x10xf64>
    ) -> tensor<10x10xf64> {
        %res = linalg.matmul ins(%sparse, %dense: tensor<10x10xf64, #CSR>, tensor<10x10xf64>) 
            outs(%init: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %res : tensor<10x10xf64>
    }

    func.func @main() -> i32 {
        %c0 = arith.constant 0 : index
        %c1 = arith.constant 1 : index
        %rows = arith.constant 10 : index
        %cols = arith.constant 10 : index
        %zero_f64 = arith.constant 0.0 : f64

        %init = tensor.empty() : tensor<10x10xf64>
        %sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %dense = arith.constant dense<[[2.132485, 6.296456, 5.810533, 9.444287, 8.719161, 8.845183, 3.091594, 3.553170, 6.295052, 3.453677], [5.462724, 8.445666, 8.556105, 3.505896, 6.972344, 8.939148, 1.469398, 3.349004, 3.135816, 1.082739], [4.008097, 6.698199, 4.273447, 0.053962, 4.355731, 4.191823, 3.727055, 4.051877, 2.837800, 7.843907], [2.552374, 0.455257, 3.366956, 7.631254, 5.688711, 9.563271, 7.551377, 1.042479, 4.789001, 7.451893], [2.600683, 0.478288, 3.885745, 2.923842, 4.123957, 6.159397, 8.860399, 5.298144, 3.788063, 8.474927], [1.489928, 4.305802, 4.749491, 5.457636, 1.509090, 9.700037, 0.766543, 1.498773, 1.349912, 3.807739], [3.744930, 0.998748, 0.309767, 0.489012, 7.900544, 7.614289, 5.665856, 7.815156, 1.656396, 6.532990], [0.659984, 9.331612, 9.062831, 9.096057, 5.206173, 4.321034, 5.102710, 5.621880, 9.719154, 6.608468], [7.205520, 8.065692, 4.640037, 8.159958, 7.885334, 1.113183, 9.528485, 8.032951, 4.366965, 3.096015], [0.838419, 1.015163, 7.495137, 8.668573, 1.715991, 3.597978, 2.061218, 7.205294, 5.076473, 1.766428]]> : tensor<10x10xf64>

        %computed = call @sparse_dense_matmul(%sparse, %dense, %init) : (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %expected = arith.constant dense<[[106.189021, 113.446852, 179.222454, 181.289371, 198.864802, 260.939360, 185.908112, 209.596306, 150.023427, 221.624994], [35.834674, 33.451352, 42.738498, 45.269347, 61.356133, 117.268821, 59.300930, 64.298452, 27.907075, 81.625255], [23.733226, 127.052089, 127.872982, 143.038063, 74.806707, 143.008999, 54.149286, 65.977874, 103.075614, 94.572530], [81.278683, 121.572258, 118.039165, 181.739644, 162.804759, 135.472183, 120.516331, 121.832776, 116.679377, 89.153459], [70.483355, 98.216671, 102.328091, 75.056905, 87.085994, 85.146016, 48.062585, 70.078327, 51.493309, 23.040996], [17.059373, 44.293779, 48.339796, 51.232919, 18.260430, 92.904828, 7.862138, 15.696960, 14.219369, 34.814931], [62.377070, 52.988350, 59.740241, 96.056664, 102.196035, 85.829475, 100.579290, 99.076688, 62.248582, 73.824466], [51.493665, 84.883578, 67.596593, 45.556997, 81.809004, 89.160972, 64.918636, 55.016004, 57.883497, 105.247745], [90.866443, 82.136657, 69.140442, 113.931727, 129.750574, 105.951846, 146.957137, 97.610065, 76.933102, 112.336884], [92.754606, 118.245911, 148.990192, 156.125501, 167.334032, 270.519338, 102.341322, 137.152329, 95.196284, 134.702223]]> : tensor<10x10xf64>

        // Validate each element
        %false = arith.constant "false" : i1
        %flag = scf.for %i = %c0 to %rows step %c1 iter_args(%f_iter = %false) -> (i1) {
            %flag_row = scf.for %j = %c0 to %cols step %c1 iter_args(%f_in = %f_iter) -> (i1) {
                %cmp_c = tensor.extract %computed[%i, %j] : tensor<10x10xf64>
                %cmp_e = tensor.extract %expected[%i, %j] : tensor<10x10xf64>
                %neq = arith.cmpf une, %cmp_c, %cmp_e : f64
                %new_f = arith.ori %f_in, %neq : i1
                scf.yield %new_f : i1
            }
            scf.yield %flag_row : i1
        }

        %zero_i32 = arith.constant 0 : i32
        %one_i32 = arith.constant 1 : i32
        %status = scf.if %flag -> (i32) {
            scf.yield %one_i32 : i32
        } else {
            scf.yield %zero_i32 : i32
        }
        return %status : i32
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[4.691877, 1.211404, 6.265641, 2.720785, 7.289353, 2.575184, 7.393416, 8.380498, 2.927448, 6.274806, 5.039427, 2.321097, 9.137288, 7.832951, 9.482492, 1.077166, 1.981617, 1.358179, 6.111374, 3.053697, 8.215077, 3.293620, 2.235650, 0.682004, 8.949274, 1.012672, 0.050355, 2.893232, 4.437340, 4.674611, 2.779748, 3.055457, 9.629127, 1.890931, 0.598730, 2.594484, 6.929945, 2.715344, 7.301473, 2.770558, 5.685450, 3.166035, 9.134102, 8.279601, 3.687655]> : tensor<45xf64>
        %row_ptr = arith.constant dense<[0, 8, 11, 14, 20, 23, 25, 31, 35, 39, 45]> : tensor<11xindex>
        %col_ind = arith.constant dense<[0, 1, 2, 3, 4, 5, 6, 9, 4, 5, 6, 0, 5, 7, 0, 2, 3, 6, 8, 9, 1, 8, 9, 1, 5, 0, 2, 3, 6, 8, 9, 0, 2, 3, 4, 2, 3, 6, 8, 0, 1, 3, 5, 6, 9]> : tensor<45xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<45xindex>), tensor<45xf64> -> tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }

}
