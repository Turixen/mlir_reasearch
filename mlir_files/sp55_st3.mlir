// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @matmul(%t : tensor<10x10xf64, #CSR>, %s : tensor<10x10xf64>, %out : tensor<10x10xf64>)
        -> tensor<10x10xf64> {
        %0 = linalg.matmul
            ins(%t, %s: tensor<10x10xf64, #CSR>, tensor<10x10xf64>)
            outs(%out: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %0 : tensor<10x10xf64>
    }

    func.func @main() -> i64 {
        %c = tensor.empty() : tensor<10x10xf64>
        %t_sparse = call @test_assemble() : () -> tensor<10x10xf64, #CSR>
        %s = arith.constant dense<[
            [2.363466478434013, 3.9651741658793704, 2.274952111482346, 7.673608184547503, 9.70829452020775, 8.845224067529134, 8.985514972418876, 5.646780255197851, 9.060815571853832, 2.605913301523218], [9.913017034418356, 7.162765581799842, 6.771257392195835, 0.12465665316163999, 6.879106638372655, 2.7493772435452337, 5.87024877571595, 2.563986527865741, 5.582626884833493, 7.153230423665352], [7.072047460663672, 5.9610508164892275, 7.818165054847156, 6.997571521336877, 5.859672484931204, 2.810158703357908, 4.862904073571387, 3.7244504216533514, 4.171176587210347, 9.045344966820817], [0.643283008440031, 4.0984407929456985, 9.793631953410681, 6.172499412442009, 8.790651753120702, 4.207875723910838, 4.435227259271365, 0.2840653514865754, 8.950990988069803, 0.5974591146967501], [0.44321926408900203, 9.785834814539498, 0.10814153845170815, 3.005890109523711, 0.7039658113828984, 2.88031207546126, 1.613473272120045, 4.583272312134169, 3.5019221127238334, 4.209553866562434], [4.386585266003031, 2.9522733392038636, 3.9834464377482623, 0.012395557546723834, 3.2314605069389026, 0.6753460269767042, 7.962820046269882, 7.578054240351506, 6.632263652763751, 1.24064649052527], [2.646099642752443, 3.1591945886579076, 0.5345907576551523, 5.3891939171469305, 0.48146764032571787, 8.178656466356959, 3.173149709598074, 6.752621625142252, 3.5464340804234085, 5.24176534425977], [4.974149586067788, 3.7047148174001663, 8.673688975261982, 2.1216090293943246, 7.223676891358282, 8.135271886426406, 8.904004657697188, 1.2639007838393335, 3.7725606951711796, 9.408711729263407], [3.7274919826968187, 7.914966721399677, 9.988486519705965, 7.843873161931992, 7.441070444530609, 1.6337861059612813, 8.052974439670374, 8.532739508606259, 9.004765612278227, 1.4227393157987855], [5.793868279566887, 6.454137992566553, 4.537774388530894, 1.3568887191080958, 3.066412056485542, 1.921106913069811, 0.8478068210669365, 1.5906748223320633, 0.053440035540635034, 6.570946355741448]
        ]> : tensor<10x10xf64>
        %result_matrix = call @matmul(%t_sparse, %s, %c) :
            (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %c1 = arith.constant 1 : index
        %element_f64 = tensor.extract %result_matrix[%c1, %c1] : tensor<10x10xf64>
        %element_i64 = arith.fptosi %element_f64 : f64 to i64
        return %element_i64 : i64
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[7.282152, 8.406402, 9.412195, 3.581573, 1.602856, 2.332779, 0.948218, 2.676929, 8.266156, 8.100238, 9.820768, 8.513240, 5.816845, 2.226298, 4.207382, 3.706889, 6.936405, 7.814825, 9.179398, 1.471792, 1.645389, 9.743733, 5.102536, 5.658878, 9.280445, 7.703209, 4.002621, 4.162419, 6.619070, 7.645283, 4.102456, 4.049739, 0.527904, 9.593246, 0.980455, 7.549740, 2.340220, 3.511289, 3.159760, 1.938812, 8.475181, 6.743201, 9.985462, 7.179553, 1.880578]> : tensor<45xf64>
        %row_ptr = arith.constant dense<[0, 8, 13, 18, 23, 26, 28, 34, 35, 37, 45]> : tensor<11xindex>
        %col_ind = arith.constant dense<[0, 1, 2, 3, 4, 6, 7, 9, 0, 3, 4, 6, 9, 0, 2, 6, 7, 9, 0, 3, 6, 7, 9, 1, 4, 7, 1, 6, 0, 2, 3, 6, 8, 9, 8, 4, 9, 0, 1, 2, 3, 6, 7, 8, 9]> : tensor<45xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<45xindex>), tensor<45xf64> to tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }
    
}
