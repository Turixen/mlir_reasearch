// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @matmul(%t : tensor<10x10xf64, #CSR>, %s : tensor<10x10xf64>, %out : tensor<10x10xf64>)
        -> tensor<10x10xf64> {
        %0 = linalg.matmul
            ins(%t, %s: tensor<10x10xf64, #CSR>, tensor<10x10xf64>)
            outs(%out: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %0 : tensor<10x10xf64>
    }

    func.func @main() -> i64 {
        %c = tensor.empty() : tensor<10x10xf64>
        %t_sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %s = arith.constant dense<[
            [7.316506039375713, 3.7937242928638257, 7.33407084486309, 5.603547847874175, 4.102715507641824, 9.309615381022239, 9.190258561523635, 9.906795294194009, 3.429105575035373, 2.1073841891626], [6.385267175981283, 9.722071866243526, 4.381040907871057, 7.647895968738579, 0.9923698452752894, 5.728948184235899, 4.841022297774562, 6.797415606484622, 9.370191214218128, 7.850592750691254], [2.1085606500676866, 8.729325055995332, 5.209952533182399, 5.856847312456494, 4.734745638778795, 0.3231348168132342, 7.657269960671619, 0.389641268012636, 3.2219576696488006, 4.231465464733074], [2.1927226306999827, 6.914171761327459, 1.7134108016597116, 2.4471264173904306, 4.911956213592643, 6.087573180653665, 6.283045343812949, 1.3726684069040251, 5.602884524939378, 7.968097294006822], [5.801149355522245, 0.8743287579633363, 9.808770282843687, 0.04604429142699318, 3.8460850741784434, 0.7494913838120376, 1.912066942796956, 2.0428429357816, 7.421301826525605, 4.797812803829679], [8.741030219152412, 7.563976483996178, 0.8131281989831518, 5.954448688053983, 4.72216978341015, 6.551962894581388, 7.04763084297113, 6.17948747242557, 3.1713258674747538, 8.625815339507882], [7.69293553252275, 6.782043127421463, 9.353969035048346, 1.6134326650077324, 6.800601170162842, 8.008919801444746, 9.196005224243715, 8.524579826805612, 1.0094447180816146, 6.809534934910035], [7.5371090985369555, 1.8629961315383714, 6.2610697629575265, 8.16965733658346, 8.704110304509227, 4.522177321034393, 7.355162657604211, 0.5911643492151075, 3.2174061724285217, 2.7328596984283218], [5.2033066565160935, 0.8011002750625873, 2.891007317828762, 9.436089849152978, 5.939009613551431, 1.549235736121276, 2.1579971236028217, 9.78763547299468, 3.012868548182345, 0.1050629814787063], [6.985528979065856, 9.511499196712434, 1.0908264885594743, 3.728818941496029, 3.3822260551214143, 2.690159696000819, 5.214566022825432, 6.950649141994754, 8.37936347682183, 2.217956355042751]
        ]> : tensor<10x10xf64>
        %result_matrix = call @matmul(%t_sparse, %s, %c) :
            (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %c1 = arith.constant 1 : index

        %element_f64 = tensor.extract %result_matrix[%c1, %c1] : tensor<10x10xf64>
        %element_i64 = arith.fptosi %element_f64 : f64 to i64
        return %element_i64 : i64
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[7.124273, 4.346652, 4.584088, 4.778611, 9.472920, 7.559389, 4.424852, 5.710331, 1.100124, 5.960694, 8.794452, 4.127147, 7.570553, 2.535494, 0.475675, 9.179239, 5.314820, 5.057273, 6.777310, 4.969697, 0.478812, 8.016975, 7.597979, 7.841438, 4.966878]> : tensor<25xf64>
        %row_ptr = arith.constant dense<[0, 4, 4, 4, 8, 10, 10, 14, 16, 18, 25]> : tensor<11xindex>
        %col_ind = arith.constant dense<[0, 3, 6, 9, 0, 3, 6, 9, 5, 9, 0, 3, 6, 9, 1, 4, 7, 9, 0, 1, 3, 4, 6, 7, 9]> : tensor<25xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<25xindex>), tensor<25xf64> to tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }
    
}
