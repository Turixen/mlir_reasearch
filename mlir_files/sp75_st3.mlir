// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @matmul(%t : tensor<10x10xf64, #CSR>, %s : tensor<10x10xf64>, %out : tensor<10x10xf64>)
        -> tensor<10x10xf64> {
        %0 = linalg.matmul
            ins(%t, %s: tensor<10x10xf64, #CSR>, tensor<10x10xf64>)
            outs(%out: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %0 : tensor<10x10xf64>
    }

    func.func @main() -> i64 {
        %c = tensor.empty() : tensor<10x10xf64>
        %t_sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %s = arith.constant dense<[
            [0.9422820345707028, 0.8809314859909678, 8.412981629797068, 2.056208583483264, 4.599511923414105, 9.347953883906614, 9.076307702466327, 3.3053058863325466, 0.9807007419001001, 8.802334916219841], [6.4300215444168485, 5.7470696460258255, 4.68751358503464, 5.487462712528334, 9.50891127468399, 5.471227148708527, 3.782087578220681, 0.14412920542875796, 6.769497775335905, 2.3078598731055666], [9.98586913847765, 3.810831464360358, 3.5929648071376006, 7.659140036687697, 4.038609172992115, 0.06738545722717149, 2.0149773599621223, 8.200317578874511, 4.965037962170352, 5.636299901737733], [8.60128610451693, 5.566049265062119, 8.509888600693778, 1.4075337645899422, 3.9832682230603855, 3.094196550303454, 8.739077766137378, 3.0245898021868234, 0.7916251900613425, 1.237267914619259], [4.357256628522342, 6.069885006739195, 5.414309328855013, 9.94902703324361, 5.992063997234415, 0.6291489195526823, 3.174182880396945, 2.1206181175186547, 1.8276865150786326, 3.326059609824749], [7.318884375497097, 3.630809051742656, 9.533010836855466, 2.368572097686571, 0.8341153236342336, 8.061468061594258, 8.369163864975754, 7.63776621461912, 0.0682593531222675, 2.2648826240824094], [5.196090275316432, 5.197688091520734, 6.621364948384301, 1.6936924740343517, 4.520901094892595, 6.921054773620838, 8.683959722665133, 8.845062342660816, 9.163593605493249, 1.6791080853891993], [9.681812841041612, 5.8018013536576065, 2.7534456555879827, 4.249919682407203, 4.047991658675736, 1.1613505250534517, 2.6895789500743392, 9.562446965268887, 4.343951586753728, 7.73738003816541], [3.4324872439624543, 0.6518847555501761, 7.080748524035915, 1.2629915787935297, 3.6756578294565934, 4.993017043629262, 8.894271374111218, 4.1664575610513355, 4.042648453140499, 0.3812258888863673], [4.821578063057624, 4.941407850026796, 6.554161850830012, 7.891137541261929, 7.919066321238123, 3.7798996304595556, 6.239217342315798, 7.001017714710659, 8.41058046824666, 8.456896191683846]
        ]> : tensor<10x10xf64>
        %result_matrix = call @matmul(%t_sparse, %s, %c) :
            (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %c1 = arith.constant 1 : index
        %element_f64 = tensor.extract %result_matrix[%c1, %c1] : tensor<10x10xf64>
        %element_i64 = arith.fptosi %element_f64 : f64 to i64
        return %element_i64 : i64
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[3.251541, 1.142526, 7.197762, 7.257672, 3.135847, 0.576214, 1.515744, 4.826583, 1.945427, 4.888926, 4.351975, 6.169297, 8.780825, 2.436181, 3.053427, 1.797964, 3.135616, 1.271940, 2.017456, 4.222112, 0.570122, 0.213209, 3.783171, 8.499317, 0.325884]> : tensor<25xf64>
        %row_ptr = arith.constant dense<[0, 6, 7, 7, 11, 12, 13, 17, 18, 20, 25]> : tensor<11xindex>
        %col_ind = arith.constant dense<[0, 3, 4, 6, 7, 9, 8, 0, 3, 6, 9, 7, 1, 0, 3, 6, 9, 7, 6, 9, 0, 1, 3, 6, 9]> : tensor<25xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<25xindex>), tensor<25xf64> to tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }
    
}
