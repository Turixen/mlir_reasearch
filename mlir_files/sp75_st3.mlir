// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @matmul(%t : tensor<10x10xf64, #CSR>, %s : tensor<10x10xf64>, %out : tensor<10x10xf64>)
        -> tensor<10x10xf64> {
        %0 = linalg.matmul
            ins(%t, %s: tensor<10x10xf64, #CSR>, tensor<10x10xf64>)
            outs(%out: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %0 : tensor<10x10xf64>
    }

    func.func @main() -> i64 {
        %c = tensor.empty() : tensor<10x10xf64>
        %t_sparse = call @test_assemble() : () -> tensor<10x10xf64, #CSR>
        %s = arith.constant dense<[
            [8.883001739321388, 2.8034995664381834, 6.202003824423227, 4.46266546114046, 2.6689242409505853, 3.2186789351192315, 0.46358828889911163, 9.756717188561467, 0.4437885004823472, 1.4975586464706248], [7.697409369957117, 5.524594328131266, 2.6860518233824813, 9.515242658777256, 6.9989612269667125, 5.509515477769611, 3.9960929587556104, 4.944932029477503, 5.359042121327874, 2.7813191584833574], [6.407704321947457, 1.703156124132773, 2.5604729943209703, 8.591209436505805, 4.912463564218028, 3.438828212244631, 7.821102447013789, 5.37858996913673, 8.593537195580693, 2.2454464045965175], [0.48030170345774836, 4.24646760161016, 7.348598826734928, 8.487395351641723, 6.191221703369747, 7.252749487360335, 9.99358334637332, 4.137262990445851, 1.3187414354963434, 7.651638472756082], [5.761915549981548, 6.198497128981879, 5.062817213862999, 1.4533631214630216, 0.8026671538334162, 2.39439586970568, 5.3719265905752, 4.586879256887448, 4.883774777214845, 6.021602189992867], [5.4408926328926075, 9.662906872403545, 6.533006223025598, 3.452910420505364, 7.627822854942707, 0.32118978946627963, 2.183672015774465, 4.493703466748251, 2.8380659914374617, 7.91217506828956], [4.46373823922838, 5.669288550002869, 4.0138641613029, 6.095087735847554, 1.5856026996952644, 6.111799959170843, 0.2346058242730198, 4.000431488897805, 2.7380491497375905, 5.373709274219703], [9.882867089354615, 1.6764118985297505, 5.876868325410776, 7.051762161439327, 0.3757367807657874, 4.335337969126114, 9.980523385344481, 8.953606359217517, 8.017972965141558, 1.2810779304727349], [7.36076177585041, 1.2881537540864485, 0.551548930928154, 0.6218067358257218, 5.176200690181471, 7.3782595764299055, 4.5626199000661485, 0.4900861544341195, 5.381579260900244, 0.5314783521576538], [7.674169569506555, 6.9110907614986195, 6.440638070831777, 9.680845912321614, 8.036197514134521, 7.750930382035543, 1.402364420294725, 7.868903909476478, 1.0853525456878954, 4.515161574024803]
        ]> : tensor<10x10xf64>
        %result_matrix = call @matmul(%t_sparse, %s, %c) :
            (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %c1 = arith.constant 1 : index
        %element_f64 = tensor.extract %result_matrix[%c1, %c1] : tensor<10x10xf64>
        %element_i64 = arith.fptosi %element_f64 : f64 to i64
        return %element_i64 : i64
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[1.156357, 0.850390, 3.701955, 2.433552, 1.036156, 7.588681, 5.918630, 6.304298, 1.342294, 4.669973, 8.682046, 3.283374, 5.347943, 6.850608, 4.945726, 0.727419, 1.620342, 6.592296, 8.940728, 3.678467, 6.183068, 5.122089, 3.085676, 3.798058, 6.617054]> : tensor<25xf64>
        %row_ptr = arith.constant dense<[0, 4, 4, 4, 10, 10, 12, 16, 16, 20, 25]> : tensor<11xindex>
        %col_ind = arith.constant dense<[0, 3, 6, 9, 0, 3, 4, 6, 8, 9, 4, 6, 0, 3, 6, 9, 0, 2, 3, 9, 0, 2, 3, 6, 9]> : tensor<25xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<25xindex>), tensor<25xf64> to tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }
    
}
