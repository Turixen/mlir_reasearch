// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @matmul(%t : tensor<10x10xf64, #CSR>, %s : tensor<10x10xf64>, %out : tensor<10x10xf64>)
        -> tensor<10x10xf64> {
        %0 = linalg.matmul
            ins(%t, %s: tensor<10x10xf64, #CSR>, tensor<10x10xf64>)
            outs(%out: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %0 : tensor<10x10xf64>
    }

    func.func @main() -> i64 {
        %c = tensor.empty() : tensor<10x10xf64>
        %t_sparse = call @test_assemble() : () -> tensor<10x10xf64, #CSR>
        %s = arith.constant dense<[
            [8.24114468272192, 6.983268907621049, 9.547196261733164, 6.770492355372059, 5.132073835687617, 5.331700943292777, 1.6250730833782334, 4.385959157554643, 0.31471339827272793, 6.770416147223415], [7.756854683864752, 9.466866152810585, 4.088612352308703, 9.5871368956733, 7.438115562559559, 6.596564076452496, 0.6385563612542189, 3.9330313996562962, 0.4498950100015764, 8.74824544077187], [7.456882846899141, 6.507135410527876, 7.891886353071929, 9.82584931352151, 9.962860262070041, 1.688281535998729, 1.4024886656133007, 9.928231499362049, 1.0810675663361036, 2.3762953988852997], [3.7914106593013996, 9.432836183309233, 0.22767723728593814, 5.172020275709352, 1.4377535312855383, 0.3077352115607346, 1.7649704111318643, 3.928634580629282, 2.2499450516256, 9.058871644332507], [3.3203857207346212, 9.962918919105295, 4.31141586288426, 3.2791306091642705, 1.7015841738657744, 0.6388868287498761, 4.555957933328588, 8.308201614436193, 8.576448070014566, 9.127667529957707], [9.119378875747369, 5.224719344563145, 2.2496598558670797, 9.44960950394172, 2.7788857127324973, 4.113201633503369, 7.139879836890296, 0.14445445266455748, 1.1562444332178723, 3.152222751876609], [4.121816560177222, 3.459567212435247, 2.561795622823626, 9.519217894676125, 7.819956217283325, 5.601779318862679, 0.746624207192137, 4.351316533981258, 3.769929680358124, 5.492170442020628], [7.050732824671105, 1.20938372580764, 4.618526118627624, 3.2198233136189645, 5.644253364224214, 5.141609946207839, 6.161891063144159, 8.690156728903286, 1.6329313253984779, 8.191110769395163], [8.341876079287143, 0.10921504851280406, 6.693242515616359, 5.980245155093591, 1.3237989568425879, 5.578132105055245, 3.775900486774184, 6.7127180107988345, 1.3546175203364819, 9.77863347588122], [9.711634175526834, 7.807409614986046, 8.583548453692888, 1.9729953137191558, 3.7457174862792986, 2.999757721554496, 2.151091960705267, 0.1814959911672398, 1.8597805042965698, 8.647555809099169]
        ]> : tensor<10x10xf64>
        %result_matrix = call @matmul(%t_sparse, %s, %c) :
            (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %c1 = arith.constant 1 : index
        %element_f64 = tensor.extract %result_matrix[%c1, %c1] : tensor<10x10xf64>
        %element_i64 = arith.fptosi %element_f64 : f64 to i64
        return %element_i64 : i64
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[0.054605, 5.215806, 0.001527, 0.017283, 0.440950, 5.113307, 0.581240, 9.539572, 7.484903, 1.495195, 1.972602, 6.393026, 8.587481, 6.358523, 2.014051, 5.601905, 4.453340, 3.692393, 5.680187, 4.100425, 5.697923, 9.805203, 1.678564, 1.357992, 4.050616]> : tensor<25xf64>
        %row_ptr = arith.constant dense<[0, 5, 5, 10, 10, 15, 15, 20, 20, 25, 25]> : tensor<11xindex>
        %col_ind = arith.constant dense<[0, 2, 4, 6, 8, 0, 2, 4, 6, 8, 0, 2, 4, 6, 8, 0, 2, 4, 6, 8, 0, 2, 4, 6, 8]> : tensor<25xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<25xindex>), tensor<25xf64> to tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }
    
}
