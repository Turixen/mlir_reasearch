// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @matmul(%t : tensor<10x10xf64, #CSR>, %s : tensor<10x10xf64>, %out : tensor<10x10xf64>)
        -> tensor<10x10xf64> {
        %0 = linalg.matmul
            ins(%t, %s: tensor<10x10xf64, #CSR>, tensor<10x10xf64>)
            outs(%out: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %0 : tensor<10x10xf64>
    }

    func.func @main() -> i64 {
        %c = tensor.empty() : tensor<10x10xf64>
        %t_sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %s = arith.constant dense<[
            [0.8550548535916036, 0.29601136805818107, 2.804042832362353, 9.424070743715385, 4.686124421977281, 4.022545177251553, 5.889155345793673, 2.92457868469279, 1.47468841904556, 9.02977697285955], [0.20261400420011233, 3.690614061168284, 2.6829293273010557, 5.113141051644384, 7.861255667615012, 0.4700025565942201, 2.1870243156194826, 0.7461350469757477, 5.947326300552089, 4.769671439001298], [2.4741084721759856, 4.505105226547689, 0.994055821769031, 6.84522049554335, 0.25331964577594124, 8.794933160873569, 9.97952361282648, 0.9920653243580735, 0.9866889911693821, 9.332438644099577], [2.4043434589357107, 7.223016368213494, 5.373014394601213, 2.450650119139527, 8.725073266744023, 4.336148907206944, 4.163579060267708, 6.027501422354033, 3.1395645486272206, 2.066682207384213], [0.8407306065888531, 6.4130185084926215, 8.234885909146207, 8.174332305683569, 8.81805432745098, 3.930522910100164, 2.3925567299032835, 9.029015971721817, 7.13992004303055, 4.291972406347705], [9.259209287111771, 4.744620002458747, 1.7836261085418303, 1.9764579422100592, 7.105065099785471, 2.888542842644112, 8.338113985058696, 4.8786687249381275, 9.918168871704173, 7.184228939887668], [7.820854026326, 3.9983392658389674, 7.679330208672375, 8.844691590597293, 9.78915349236135, 4.990199906667264, 1.6971890320412886, 0.33946511398052714, 1.7702809113120954, 9.934121957896595], [7.247269893169374, 6.281444134388182, 3.925492302071242, 5.300587732498297, 6.347409362006593, 9.900016735601692, 4.7299651279229815, 4.97650836768297, 3.5090269586792875, 7.111968899689378], [2.785022565736377, 0.3327966644453795, 6.415421024759284, 6.86664131530327, 9.498061196609623, 7.371680317115112, 4.0918605822126715, 0.7354898372789798, 0.7647549005976395, 9.782287859048015], [3.4880931603695053, 8.327961413467712, 8.319049104971445, 3.5763043956534624, 1.4087279306749045, 4.248218040953368, 4.799722643764195, 4.557159805766492, 6.420162140228155, 3.0371396078097277]
        ]> : tensor<10x10xf64>
        %result_matrix = call @matmul(%t_sparse, %s, %c) :
            (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %c1 = arith.constant 1 : index

        %element_f64 = tensor.extract %result_matrix[%c1, %c1] : tensor<10x10xf64>
        %element_i64 = arith.fptosi %element_f64 : f64 to i64
        return %element_i64 : i64
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[1.303715, 6.999563, 3.046713, 4.967371, 1.688095, 2.476689, 3.031832, 2.250634, 5.106049, 0.358220, 9.035443, 4.415797, 5.667008, 3.801007, 9.714038, 4.468154, 8.441273, 5.701490, 7.846734, 3.645495, 1.994737, 3.218231, 7.002425, 5.003223, 0.270059]> : tensor<25xf64>
        %row_ptr = arith.constant dense<[0, 5, 5, 10, 10, 15, 15, 20, 20, 25, 25]> : tensor<11xindex>
        %col_ind = arith.constant dense<[0, 2, 4, 6, 8, 0, 2, 4, 6, 8, 0, 2, 4, 6, 8, 0, 2, 4, 6, 8, 0, 2, 4, 6, 8]> : tensor<25xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<25xindex>), tensor<25xf64> to tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }
    
}
