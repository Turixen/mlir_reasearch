// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @matmul(%t : tensor<10x10xf64, #CSR>, %s : tensor<10x10xf64>, %out : tensor<10x10xf64>)
        -> tensor<10x10xf64> {
        %0 = linalg.matmul
            ins(%t, %s: tensor<10x10xf64, #CSR>, tensor<10x10xf64>)
            outs(%out: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %0 : tensor<10x10xf64>
    }

    func.func @main() -> i64 {
        %c = tensor.empty() : tensor<10x10xf64>
        %t_sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %s = arith.constant dense<[
            [5.258931407712955, 8.856288310541315, 0.0013392926004607286, 1.1278797542312613, 9.121155649691927, 5.271755083784003, 5.277198380400736, 3.211496311265197, 8.58458883958046, 3.364774144477174], [4.964721148403108, 1.9685365490358209, 3.635734993881057, 3.854701321457802, 4.362337060651326, 4.498457320562653, 0.584927307615335, 1.677943953881178, 7.375043187487231, 7.305645795920288], [5.303477943456705, 9.768896705467482, 0.36888253072026145, 6.317850903114297, 0.6072484603713546, 0.7902042661187714, 0.5510450333668249, 0.4096432444947584, 0.4229578221015218, 3.7565727123504002], [9.877431617520909, 3.464980690083693, 8.173945924098366, 1.271932032893578, 8.7604927184234, 5.570106280344874, 0.45159503033514126, 5.306128686224946, 0.3292020404376095, 3.918364490631122], [2.182636937751885, 3.354494923528101, 3.14444314519412, 8.879753900414876, 0.5270159310236378, 1.8286998158737033, 9.82132855798674, 7.561888597946891, 9.076303886626258, 9.033806653851737], [8.607269234529126, 0.10412085488265665, 5.1046323748192055, 0.5167695200081235, 2.290169486055005, 9.461912861240522, 3.772461781356531, 2.022307250199532, 0.14442066684400734, 0.874800410599863], [7.144099477369242, 0.9827757311526519, 4.259670969744337, 0.880160420047148, 4.788145168411347, 0.10954138670320357, 7.121779379812084, 8.072321393838628, 6.447258269775783, 5.689749851585116], [0.6371212820405892, 9.415223712788315, 5.388372756271473, 2.1439074017392725, 4.182810526934726, 9.951740345648133, 6.239032174771239, 5.27747571124861, 4.596593461076531, 3.4005086795416317], [2.64087635565168, 7.148438460211079, 3.6020792323314854, 7.2682811492276445, 8.701897558387792, 9.869529924613476, 1.1845458146978793, 1.8842632041571616, 3.0855912712952893, 4.557413309565021], [0.4540160489516021, 9.02880604456082, 2.7663835147637283, 7.528130894663567, 6.1360822338374845, 1.6690085087454132, 5.51886969863419, 2.293604723074133, 0.4213864202522488, 1.1021740299062732]
        ]> : tensor<10x10xf64>
        %result_matrix = call @matmul(%t_sparse, %s, %c) :
            (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %c1 = arith.constant 1 : index
        %element_f64 = tensor.extract %result_matrix[%c1, %c1] : tensor<10x10xf64>
        %element_i64 = arith.fptosi %element_f64 : f64 to i64
        return %element_i64 : i64
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[1.195600, 6.099113, 5.406892, 2.397478, 2.017989, 9.146524, 8.969312, 7.858945, 4.573087, 6.239300, 2.221155, 4.440485, 0.631223, 2.428418, 3.522355, 7.476510, 5.684284, 4.789429, 5.867898, 4.147985, 9.987562, 1.816383, 9.306386, 0.958650, 6.302582]> : tensor<25xf64>
        %row_ptr = arith.constant dense<[0, 5, 5, 10, 10, 15, 15, 20, 20, 25, 25]> : tensor<11xindex>
        %col_ind = arith.constant dense<[0, 2, 4, 6, 8, 0, 2, 4, 6, 8, 0, 2, 4, 6, 8, 0, 2, 4, 6, 8, 0, 2, 4, 6, 8]> : tensor<25xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<25xindex>), tensor<25xf64> to tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }
    
}
