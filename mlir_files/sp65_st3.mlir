// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @matmul(%t : tensor<10x10xf64, #CSR>, %s : tensor<10x10xf64>, %out : tensor<10x10xf64>)
        -> tensor<10x10xf64> {
        %0 = linalg.matmul
            ins(%t, %s: tensor<10x10xf64, #CSR>, tensor<10x10xf64>)
            outs(%out: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %0 : tensor<10x10xf64>
    }

    func.func @main() -> i64 {
        %c = tensor.empty() : tensor<10x10xf64>
        %t_sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %s = arith.constant dense<[
            [[0.988682, 4.975421, 5.668049, 7.045203, 2.125693, 5.267078, 0.259333, 6.755759, 2.992631, 2.993775], [7.893969, 5.482816, 9.172843, 7.029349, 2.892540, 6.629779, 5.963505, 1.600462, 9.139392, 1.875558], [4.183666, 3.676665, 3.948894, 6.842042, 1.003189, 7.119787, 9.081247, 2.102058, 9.787075, 7.943355], [7.855145, 5.339476, 6.765634, 7.724508, 8.521714, 5.658344, 8.316956, 9.072048, 7.774480, 6.939308], [4.053093, 2.298037, 2.669126, 4.117113, 4.933535, 1.434842, 7.164497, 5.463400, 1.611972, 1.808815], [7.230812, 4.482559, 1.212670, 7.772022, 0.086588, 6.235097, 5.271561, 1.584690, 4.857827, 7.341467], [2.559052, 1.505084, 1.952015, 6.451320, 1.317137, 4.568294, 6.769909, 6.543642, 2.521760, 0.868251], [9.314493, 0.799609, 0.373370, 3.879504, 7.320718, 4.655637, 0.094564, 6.227183, 2.364528, 2.441297], [3.558972, 9.777710, 7.500994, 4.277945, 6.320614, 9.724820, 8.176376, 4.919300, 5.647505, 5.043267], [9.105404, 2.586982, 9.977040, 3.012519, 5.838790, 9.354476, 4.166078, 4.040993, 6.521720, 4.703952]]
        ]> : tensor<10x10xf64>
        %result_matrix = call @matmul(%t_sparse, %s, %c) :
            (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %c1 = arith.constant 1 : index

        %element_f64 = tensor.extract %result_matrix[%c1, %c1] : tensor<10x10xf64>
        %element_i64 = arith.fptosi %element_f64 : f64 to i64
        return %element_i64 : i64
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[8.999782, 0.557124, 4.844926, 9.233249, 9.126083, 8.695320, 9.799087, 1.912962, 9.458881, 9.694882, 1.032363, 1.850137, 0.639444, 7.341687, 0.000930, 7.607330, 4.582244, 3.687873, 9.858760, 3.717789, 8.586673, 9.906199, 1.183558, 6.231684, 8.119688, 9.925021, 8.159388, 3.190889, 2.135607, 8.382778, 0.438377, 5.741032, 0.423302, 1.878264, 3.503478]> : tensor<35xf64>
        %row_ptr = arith.constant dense<[0, 5, 6, 8, 13, 16, 20, 25, 29, 30, 35]> : tensor<11xindex>
        %col_ind = arith.constant dense<[0, 3, 6, 7, 9, 5, 0, 5, 0, 3, 5, 6, 9, 4, 6, 9, 1, 2, 5, 9, 0, 1, 3, 6, 9, 0, 1, 2, 5, 5, 0, 3, 6, 8, 9]> : tensor<35xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<35xindex>), tensor<35xf64> to tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }
    
}
