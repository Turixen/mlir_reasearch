// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @sparse_dense_matmul(%sparse: tensor<10x10xf64, #CSR>,%dense: tensor<10x10xf64>,%init: tensor<10x10xf64>
    ) -> tensor<10x10xf64> {
        %res = linalg.matmul ins(%sparse, %dense: tensor<10x10xf64, #CSR>, tensor<10x10xf64>) 
            outs(%init: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %res : tensor<10x10xf64>
    }

    func.func @main() -> i32 {
        %c0 = arith.constant 0 : index
        %c1 = arith.constant 1 : index
        %rows = arith.constant 10 : index
        %cols = arith.constant 10 : index
        %zero_f64 = arith.constant 0.0 : f64

        %init = tensor.empty() : tensor<10x10xf64>
        %sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %dense = arith.constant dense<[[2.958408, 1.862042, 8.733612, 9.070616, 6.212987, 2.878444, 6.601452, 8.602557, 8.045221, 4.430098], [4.722798, 0.318747, 9.685859, 3.068008, 0.860165, 5.978708, 2.633038, 2.327961, 1.253442, 9.625593], [3.689592, 0.675303, 9.558783, 3.961572, 1.974302, 4.062512, 2.000369, 0.260995, 8.517756, 4.111563], [2.396351, 2.722941, 0.831949, 3.563158, 7.000712, 0.865806, 2.797413, 7.662350, 3.265501, 2.575070], [4.693132, 5.472462, 3.962945, 5.737738, 7.057608, 0.191159, 6.147843, 8.802337, 8.707985, 2.197204], [5.660035, 8.169852, 0.266328, 8.089455, 4.057533, 6.403392, 6.242028, 1.613560, 2.528790, 1.342590], [3.426106, 1.519182, 9.110596, 5.337022, 3.648308, 2.051361, 8.450541, 3.314097, 5.235140, 4.237572], [0.252643, 4.102772, 7.022690, 4.492697, 8.007324, 2.960168, 6.836573, 3.423651, 2.766316, 7.051158], [2.986000, 0.416751, 4.588882, 1.363716, 8.191063, 4.188827, 3.932099, 7.349617, 3.133567, 9.026145], [7.892715, 0.079594, 4.873267, 6.241878, 8.495247, 0.058238, 3.355412, 8.682313, 2.892325, 2.832975]]> : tensor<10x10xf64>

        %computed = call @sparse_dense_matmul(%sparse, %dense, %init) : (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %expected = arith.constant dense<[[119.379225, 84.203057, 172.126841, 201.312627, 179.654261, 82.036658, 175.400568, 198.052101, 154.558610, 116.145977], [82.027106, 22.960437, 112.373161, 129.636754, 124.796612, 28.373272, 87.201886, 149.119101, 98.368534, 63.617871], [8.348944, 43.062016, 63.921049, 48.640933, 88.354509, 28.260510, 67.307745, 49.713060, 32.689193, 68.627555], [68.004915, 40.490854, 135.750460, 131.892667, 122.598315, 40.401943, 125.471318, 142.749530, 117.882063, 79.783420], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [71.215075, 49.608878, 101.781991, 86.667709, 146.893919, 49.671026, 103.553764, 160.589633, 119.945781, 113.193536], [100.540973, 29.144852, 172.448643, 144.919854, 182.258620, 69.739639, 140.232954, 198.068741, 134.849828, 145.451873], [11.109720, 2.033404, 28.782425, 11.928677, 5.944816, 12.232620, 6.023306, 0.785881, 25.647790, 12.380316], [96.053586, 89.841474, 73.203595, 115.020157, 172.885671, 91.502672, 125.263696, 155.387713, 90.647458, 120.217516], [160.783158, 81.642060, 186.465505, 208.001132, 246.130057, 38.559664, 185.053527, 266.285531, 183.877555, 118.529828]]> : tensor<10x10xf64>

        // Validate each element
        %false = arith.constant "false" : i1
        %flag = scf.for %i = %c0 to %rows step %c1 iter_args(%f_iter = %false) -> (i1) {
            %flag_row = scf.for %j = %c0 to %cols step %c1 iter_args(%f_in = %f_iter) -> (i1) {
                %cmp_c = tensor.extract %computed[%i, %j] : tensor<10x10xf64>
                %cmp_e = tensor.extract %expected[%i, %j] : tensor<10x10xf64>
                %neq = arith.cmpf une, %cmp_c, %cmp_e : f64
                %new_f = arith.or %f_in, %neq : i1
                scf.yield %new_f : i1
            }
            scf.yield %flag_row : i1
        }

        %zero_i32 = arith.constant 0 : i32
        %one_i32 = arith.constant 1 : i32
        %status = scf.if %flag -> (i32) {
            scf.yield %one_i32 : i32
        } else {
            scf.yield %zero_i32 : i32
        }
        return %status : i32
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[9.298164, 1.466123, 8.548849, 4.110962, 6.158291, 2.545900, 9.124950, 2.006256, 6.363347, 2.556337, 8.799236, 7.578635, 6.039503, 6.479833, 1.128997, 3.697578, 7.122276, 8.992079, 9.383075, 1.020183, 3.355664, 8.286912, 4.319896, 3.011097, 9.235965, 0.420743, 6.726468, 2.601289, 8.359689, 5.031606, 6.830232, 6.821064, 5.293409, 1.830263, 9.999048]> : tensor<35xf64>
        %row_ptr = arith.constant dense<[0, 6, 9, 11, 15, 15, 18, 23, 24, 29, 35]> : tensor<11xindex>
        %col_ind = arith.constant dense<[0, 1, 3, 5, 6, 9, 0, 3, 9, 3, 7, 0, 3, 6, 9, 0, 4, 8, 0, 3, 6, 8, 9, 2, 3, 4, 5, 6, 8, 0, 3, 4, 6, 7, 9]> : tensor<35xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<35xindex>), tensor<35xf64> -> tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }

}
