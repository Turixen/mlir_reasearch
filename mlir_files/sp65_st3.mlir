// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @matmul(%t : tensor<10x10xf64, #CSR>, %s : tensor<10x10xf64>, %out : tensor<10x10xf64>)
        -> tensor<10x10xf64> {
        %0 = linalg.matmul
            ins(%t, %s: tensor<10x10xf64, #CSR>, tensor<10x10xf64>)
            outs(%out: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %0 : tensor<10x10xf64>
    }

    func.func @main() -> i64 {
        %c = tensor.empty() : tensor<10x10xf64>
        %t_sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %s = arith.constant dense<[
            [7.399758262811256, 9.880639938436106, 5.392537227603943, 1.3421365977533983, 9.25664353147019, 2.5771594116457353, 0.8593978922416468, 9.579934075958935, 3.563295624230125, 5.690930698827584], [3.287433817699003, 7.117840777441781, 3.4048219186045237, 0.8932779259760293, 8.50466686400482, 2.511899201415698, 6.439444151402788, 4.139354523137659, 3.328363508592611, 4.0599961657199755], [5.406657320270334, 9.401539346368521, 5.794978740037036, 4.777151113406352, 6.727216528846251, 8.208679994743333, 9.54245053321094, 2.274502624342766, 2.6209784383764347, 6.356841401917798], [5.52583417730395, 4.597277075130749, 9.923245318601637, 3.2910006290408034, 8.002222309342455, 7.567778584843997, 4.727712572638376, 9.714786640455934, 4.389090818462807, 1.36322686651433], [5.46532354289524, 1.3287529092278005, 3.765472612125813, 5.915242984936469, 5.193369335409438, 5.535032007632868, 7.504901021883259, 5.835068342109353, 8.302800963446739, 9.009644185862285], [2.0252482885843137, 8.414936054537481, 2.8205289057478566, 1.358435895662462, 6.0250293556683605, 5.002263935956066, 8.689517254161588, 7.672073914913895, 7.390134118297068, 9.398761524735178], [8.17384407425686, 1.3388642789845917, 7.60531083999759, 9.563778447565799, 4.909214947502152, 4.107471747058503, 5.549209069430408, 7.183994028956018, 8.444275653737865, 1.110314541607279], [2.8238727911437955, 7.561421441127191, 1.2774637618595486, 2.512881272382778, 8.837048670013775, 7.143360228803561, 9.50860143458254, 1.2424621742548592, 1.045367945893776, 7.912275969404981], [5.040649241929129, 7.834658763287129, 6.96054678166773, 2.6539472232010475, 2.4924768217867497, 4.0479081236600685, 7.745865181722257, 6.616453169218879, 8.86657889684022, 8.642771004078767], [1.560888974666953, 1.5256489765841208, 8.1584962948994, 8.73995096110357, 9.02566767350529, 5.949029927787421, 7.700066187421982, 0.8896800960351148, 2.8222365300346275, 5.195806378001214]
        ]> : tensor<10x10xf64>
        %result_matrix = call @matmul(%t_sparse, %s, %c) :
            (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %c1 = arith.constant 1 : index
        %element_f64 = tensor.extract %result_matrix[%c1, %c1] : tensor<10x10xf64>
        %element_i64 = arith.fptosi %element_f64 : f64 to i64
        return %element_i64 : i64
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[5.856201, 4.228432, 5.734681, 1.341627, 8.265391, 3.297162, 6.071740, 7.877609, 8.016446, 3.892046, 9.411971, 4.012079, 0.698948, 9.717533, 4.412673, 4.808851, 5.370322, 2.240833, 9.425716, 0.309052, 5.521066, 9.164108, 8.639635, 6.556184, 9.025706, 7.497471, 9.663700, 3.342876, 3.024103, 7.430878, 3.843667, 6.361730, 9.700709, 3.047724, 8.800224]> : tensor<35xf64>
        %row_ptr = arith.constant dense<[0, 5, 6, 7, 13, 14, 15, 21, 25, 28, 35]> : tensor<11xindex>
        %col_ind = arith.constant dense<[0, 3, 4, 6, 9, 4, 1, 0, 2, 3, 4, 6, 9, 5, 2, 0, 3, 6, 7, 8, 9, 0, 2, 3, 5, 1, 4, 7, 0, 1, 3, 4, 6, 7, 9]> : tensor<35xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<35xindex>), tensor<35xf64> to tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }
    
}
