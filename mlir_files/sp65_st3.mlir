// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @sparse_dense_matmul(%sparse: tensor<10x10xf64, #CSR>,%dense: tensor<10x10xf64>,%init: tensor<10x10xf64>
    ) -> tensor<10x10xf64> {
        %res = linalg.matmul ins(%sparse, %dense: tensor<10x10xf64, #CSR>, tensor<10x10xf64>) 
            outs(%init: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %res : tensor<10x10xf64>
    }

    func.func @main() -> i32 {
        %c0 = arith.constant 0 : index
        %c1 = arith.constant 1 : index
        %rows = arith.constant 10 : index
        %cols = arith.constant 10 : index
        %zero_f64 = arith.constant 0.0 : f64

        %init = tensor.empty() : tensor<10x10xf64>
        %sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %dense = arith.constant dense<[[3.503534, 6.908784, 3.618948, 6.037659, 1.905468, 3.028971, 2.892608, 4.611679, 9.991660, 0.567355], [1.904664, 0.943420, 9.785742, 7.377685, 0.749603, 9.513281, 6.744262, 2.306362, 8.421110, 9.862025], [3.239362, 2.515403, 8.237472, 9.817275, 9.200484, 1.083935, 2.795060, 6.991248, 2.729813, 9.054378], [1.311555, 0.504033, 9.172452, 6.711528, 5.747417, 1.507517, 9.755896, 7.833397, 6.042319, 9.255188], [1.627664, 4.792098, 3.324429, 8.047715, 2.280136, 7.368997, 5.830567, 0.729772, 4.040148, 9.713182], [7.920217, 6.166583, 9.044503, 3.429860, 6.319899, 9.638624, 3.648419, 3.148528, 1.741682, 1.020430], [8.803912, 2.999101, 9.370193, 7.910636, 3.817103, 6.571928, 6.134225, 1.691304, 6.959697, 0.029651], [2.492206, 9.084425, 3.368231, 5.585121, 9.241049, 2.908948, 6.168359, 4.264283, 9.696110, 6.622946], [2.252481, 0.738550, 9.084877, 4.571357, 2.154775, 1.107415, 2.813516, 1.712816, 3.631711, 8.678340], [1.454316, 1.312598, 0.807967, 8.465932, 0.254278, 7.542800, 5.195804, 3.035822, 1.069807, 3.920903]]> : tensor<10x10xf64>

        %computed = call @sparse_dense_matmul(%sparse, %dense, %init) : (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %expected = arith.constant dense<[[52.518945, 78.972130, 87.049055, 102.082366, 84.923782, 55.477882, 98.472396, 72.745625, 121.638307, 74.889563], [26.381878, 37.448738, 84.491471, 85.626623, 30.127487, 57.393345, 58.634399, 16.626159, 52.110881, 124.922137], [76.155517, 82.624723, 135.516074, 118.029285, 91.919011, 131.120093, 116.527733, 67.196099, 71.777578, 124.868734], [106.808309, 48.448304, 236.368284, 210.942372, 83.312051, 137.317726, 173.317570, 99.214949, 155.245062, 184.071861], [23.428835, 7.981161, 24.935813, 21.051664, 10.158017, 17.489115, 16.324306, 4.500873, 18.521038, 0.078908], [1.777096, 0.682941, 12.428242, 9.093805, 7.787481, 2.042615, 13.218781, 10.613885, 8.187059, 12.540346], [66.031324, 92.139197, 147.045624, 202.225080, 89.796559, 113.310045, 147.926268, 116.035890, 149.215183, 170.938229], [27.486977, 22.855533, 46.063690, 116.769589, 46.104053, 67.384415, 56.215052, 58.474267, 21.878972, 75.641107], [75.151479, 25.600763, 79.985334, 67.526346, 32.583353, 56.098942, 52.362641, 14.437219, 59.408990, 0.253109], [119.846744, 115.999785, 234.220293, 264.425589, 89.645360, 207.379472, 215.610121, 132.687058, 254.742016, 186.715178]]> : tensor<10x10xf64>

        // Validate each element
        %false = arith.constant "false" : i1
        %flag = scf.for %i = %c0 to %rows step %c1 iter_args(%f_iter = %false) -> (i1) {
            %flag_row = scf.for %j = %c0 to %cols step %c1 iter_args(%f_in = %f_iter) -> (i1) {
                %cmp_c = tensor.extract %computed[%i, %j] : tensor<10x10xf64>
                %cmp_e = tensor.extract %expected[%i, %j] : tensor<10x10xf64>
                %neq = arith.cmpf une, %cmp_c, %cmp_e : f64
                %new_f = arith.ori %f_in, %neq : i1
                scf.yield %new_f : i1
            }
            scf.yield %flag_row : i1
        }

        %zero_i32 = arith.constant 0 : i32
        %one_i32 = arith.constant 1 : i32
        %status = scf.if %flag -> (i32) {
            scf.yield %one_i32 : i32
        } else {
            scf.yield %zero_i32 : i32
        }
        return %status : i32
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[3.000606, 3.683125, 2.557518, 5.191457, 1.183546, 6.762744, 6.825542, 0.208895, 4.803686, 7.324208, 7.229244, 1.122685, 2.683412, 5.319134, 6.848559, 9.720234, 5.912636, 2.661185, 1.354953, 6.805722, 2.511052, 5.628014, 5.487663, 0.642860, 2.442142, 4.523744, 4.783141, 8.246248, 8.536146, 9.433226, 7.633772, 5.893589, 3.601193, 5.973691, 4.176665]> : tensor<35xf64>
        %row_ptr = arith.constant dense<[0, 5, 7, 11, 17, 18, 19, 26, 28, 29, 35]> : tensor<11xindex>
        %col_ind = arith.constant dense<[0, 3, 6, 7, 9, 4, 8, 2, 3, 4, 5, 0, 1, 3, 6, 8, 9, 6, 3, 0, 2, 3, 4, 6, 8, 9, 2, 9, 6, 0, 1, 3, 4, 6, 9]> : tensor<35xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<35xindex>), tensor<35xf64> -> tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }

}
