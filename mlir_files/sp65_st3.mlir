// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @sparse_dense_matmul(%sparse: tensor<10x10xf64, #CSR>,%dense: tensor<10x10xf64>,%init: tensor<10x10xf64>
    ) -> tensor<10x10xf64> {
        %res = linalg.matmul ins(%sparse, %dense: tensor<10x10xf64, #CSR>, tensor<10x10xf64>) 
            outs(%init: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %res : tensor<10x10xf64>
    }

    func.func @main() -> i32 {
        %c0 = arith.constant 0 : index
        %c1 = arith.constant 1 : index
        %rows = arith.constant 10 : index
        %cols = arith.constant 10 : index
        %zero_f64 = arith.constant 0.0 : f64

        %init = tensor.empty() : tensor<10x10xf64>
        %sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %dense = arith.constant dense<[[3.255683, 3.107371, 1.908859, 8.495533, 5.091351, 5.978463, 8.584752, 2.043274, 7.326702, 6.406404], [8.099969, 4.618023, 7.126136, 7.320482, 8.306989, 7.131829, 3.548045, 7.644381, 2.738807, 2.385106], [8.966072, 4.900259, 1.194961, 1.431186, 1.946144, 5.376792, 9.733170, 2.240719, 0.137389, 0.028118], [0.325976, 7.645146, 4.644951, 0.568676, 8.994960, 3.229321, 1.539013, 7.285778, 4.999030, 4.169641], [7.426874, 0.074656, 1.388442, 6.586341, 4.800594, 2.255528, 4.127427, 6.302815, 2.549543, 9.451693], [6.345727, 2.424031, 2.801363, 5.564666, 5.596566, 3.955701, 0.454207, 6.833084, 7.379551, 7.098533], [1.436702, 7.990514, 9.895931, 6.699739, 6.399763, 2.538729, 0.138578, 7.631142, 7.181671, 8.652104], [8.487295, 8.659554, 5.014482, 5.084066, 3.296854, 2.343459, 2.767372, 7.673230, 7.046286, 4.150651], [2.976068, 0.473301, 0.073220, 4.394511, 1.301426, 3.537006, 8.240577, 7.329841, 8.063336, 9.238493], [2.941364, 7.394946, 7.839217, 4.404423, 8.706691, 4.196564, 8.478018, 4.787829, 0.138151, 8.311170]]> : tensor<10x10xf64>

        %computed = call @sparse_dense_matmul(%sparse, %dense, %init) : (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %expected = arith.constant dense<[[92.491627, 215.628618, 175.898267, 148.641325, 226.910099, 127.180758, 164.846985, 175.991016, 149.186083, 201.816577], [113.150913, 63.100078, 54.922314, 57.777855, 67.711453, 82.841098, 88.272004, 65.309432, 18.962436, 15.903303], [93.950544, 66.091660, 89.925722, 113.467666, 98.329680, 93.202901, 90.196239, 140.343210, 103.165805, 113.148890], [52.186543, 154.810126, 122.505933, 121.937065, 189.521993, 113.113933, 140.310099, 126.794537, 129.360045, 160.254506], [131.491163, 120.303545, 101.594490, 117.165122, 94.072417, 54.509787, 40.948161, 148.150325, 130.175227, 132.590964], [51.187120, 68.863942, 61.892546, 44.888692, 45.658023, 40.213518, 47.502384, 54.059684, 41.413753, 49.233651], [130.061327, 188.186783, 150.462594, 198.794982, 199.404473, 171.532474, 250.022679, 214.710474, 231.197941, 263.385481], [55.371358, 105.127134, 102.711884, 65.492236, 133.756354, 73.910202, 33.475186, 119.994758, 71.883896, 67.175591], [69.251186, 34.261140, 48.761559, 61.841764, 67.035626, 53.838880, 20.164687, 69.048301, 46.304485, 43.263352], [24.998343, 71.673472, 70.545412, 76.218364, 76.629657, 48.864291, 50.159943, 62.257241, 77.040744, 85.107109]]> : tensor<10x10xf64>

        // Validate each element
        %false = arith.constant false : i1
        %flag = scf.for %i = %c0 to %rows step %c1 iter_args(%f_iter = %false) -> (i1) {
            %flag_row = scf.for %j = %c0 to %cols step %c1 iter_args(%f_in = %f_iter) -> (i1) {
                %cmp_c = tensor.extract %computed[%i, %j] : tensor<10x10xf64>
                %cmp_e = tensor.extract %expected[%i, %j] : tensor<10x10xf64>
                %neq = arith.cmpf une, %cmp_c, %cmp_e : f64
                %new_f = arith.or %f_in, %neq : i1
                scf.yield %new_f : i1
            }
            scf.yield %flag_row : i1
        }

        %zero_i32 = arith.constant 0 : i32
        %one_i32 = arith.constant 1 : i32
        %status = scf.if %flag -> (i32) {
            scf.yield %one_i32 : i32
        } else {
            scf.yield %zero_i32 : i32
        }
        return %status : i32
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[7.361192, 8.624024, 3.073853, 4.089650, 9.039487, 6.589156, 6.667241, 8.393443, 2.989084, 7.281250, 9.350308, 9.116268, 2.023966, 5.393890, 3.366355, 3.897346, 4.166871, 8.927653, 4.799668, 5.674770, 9.821197, 5.438017, 5.858061, 7.434889, 9.350445, 3.029243, 6.095076, 7.476073, 2.480974, 5.123484, 4.373200, 4.654780, 1.681508, 4.792399, 0.819511]> : tensor<35xf64>
        %row_ptr = arith.constant dense<[0, 5, 7, 10, 14, 18, 20, 26, 29, 31, 35]> : tensor<11xindex>
        %col_ind = arith.constant dense<[0, 3, 6, 7, 9, 1, 2, 1, 6, 8, 0, 3, 6, 9, 4, 5, 6, 7, 2, 6, 0, 2, 3, 6, 8, 9, 1, 3, 6, 1, 5, 0, 3, 6, 9]> : tensor<35xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<35xindex>), tensor<35xf64> -> tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }

}
