// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @matmul(%t : tensor<10x10xf64, #CSR>, %s : tensor<10x10xf64>, %out : tensor<10x10xf64>)
        -> tensor<10x10xf64> {
        %0 = linalg.matmul
            ins(%t, %s: tensor<10x10xf64, #CSR>, tensor<10x10xf64>)
            outs(%out: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %0 : tensor<10x10xf64>
    }

    func.func @main() -> i64 {
        %c = tensor.empty() : tensor<10x10xf64>
        %t_sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %s = arith.constant dense<[
            [9.048270310095356, 1.656246406814823, 6.882881704770427, 8.366741491920266, 5.517797529445799, 2.9617119904826374, 5.722030365074454, 5.315070566026049, 0.7333878873375266, 6.123108220550476], [2.470348653031472, 7.565384188365082, 3.9677962439320726, 3.4651123194708155, 8.490926189824371, 8.449347687891123, 3.298263291992022, 0.07612136485133147, 4.843607012095026, 1.0465864087019106], [0.9508867381595509, 8.489906208900988, 4.5274287473894255, 6.477264323684406, 6.091017127247346, 7.174280765829347, 6.927621084809235, 8.661494460888383, 1.5871753130499355, 5.905080150866962], [8.162649003331538, 8.229388029338029, 2.2788080271523423, 2.85345224743185, 6.56763841480619, 7.094324511499952, 8.545083835628315, 2.931309975515437, 4.928495737658027, 5.430619012001054], [7.358437186417897, 4.621160298482325, 8.91406292047933, 5.939608589030411, 3.62824808482493, 6.7057548632585116, 7.43551622627815, 6.47562078679354, 6.567379013855101, 9.769920213376238], [4.240225451525705, 6.038249899731458, 2.093211810226091, 3.0572498112141933, 5.501056921857729, 6.2754002401053866, 1.2890263003143931, 5.925600852924643, 0.012928115378973981, 3.2773794436961046], [5.287170587007979, 4.099092697546224, 4.913739664519853, 3.212640412589771, 4.356233977600292, 0.6295703822410947, 9.588729929444979, 2.8587582811729706, 2.3240440323301472, 3.4694366288086442], [4.912273458383086, 7.68874357905974, 0.28605050485437933, 1.4612432912479056, 2.8998316686725434, 1.1472220502170893, 2.7287033029226047, 3.1069178016332675, 6.078220580705926, 7.383086005646798], [1.2679320917777726, 0.5348834368895439, 0.5330645148110624, 9.765172270478965, 2.3674039060312237, 4.11748573499123, 3.9962818501044284, 5.910992295667169, 9.675689096594853, 6.725064272846739], [7.293057236523282, 1.5172798822644218, 0.18471073446797104, 5.4933034913812815, 0.8621695215543468, 1.0604780893688004, 5.551578907168693, 1.1119991454621758, 1.1855881836935178, 9.83937869375581]
        ]> : tensor<10x10xf64>
        %result_matrix = call @matmul(%t_sparse, %s, %c) :
            (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %c1 = arith.constant 1 : index

        %element_f64 = tensor.extract %result_matrix[%c1, %c1] : tensor<10x10xf64>
        %element_i64 = arith.fptosi %element_f64 : f64 to i64
        return %element_i64 : i64
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[8.376262, 7.356542, 5.489688, 0.412968, 8.418825, 3.585719, 3.009194, 9.910360, 6.007994, 2.646305, 1.060524, 2.958097, 3.393537, 4.078056, 5.607659, 9.202464, 8.194363, 2.902365, 8.838959, 1.324244, 2.253019, 1.929868, 3.322313, 2.607215, 8.657671, 2.396893, 1.569780, 9.082795, 5.031635, 4.693791, 7.297439, 1.023542, 7.843318, 7.360770, 2.995893]> : tensor<35xf64>
        %row_ptr = arith.constant dense<[0, 7, 10, 12, 19, 20, 24, 28, 29, 31, 35]> : tensor<11xindex>
        %col_ind = arith.constant dense<[0, 2, 3, 4, 5, 6, 9, 2, 6, 9, 1, 9, 0, 3, 4, 5, 6, 7, 9, 1, 1, 3, 5, 6, 0, 3, 6, 9, 7, 3, 7, 0, 3, 6, 9]> : tensor<35xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<35xindex>), tensor<35xf64> to tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }
    
}
