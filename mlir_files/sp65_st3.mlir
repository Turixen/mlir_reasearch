// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @sparse_dense_matmul(%sparse: tensor<10x10xf64, #CSR>,%dense: tensor<10x10xf64>,%init: tensor<10x10xf64>
    ) -> tensor<10x10xf64> {
        %res = linalg.matmul ins(%sparse, %dense: tensor<10x10xf64, #CSR>, tensor<10x10xf64>) 
            outs(%init: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %res : tensor<10x10xf64>
    }

    func.func @main() -> i32 {
        %c0 = arith.constant 0 : index
        %c1 = arith.constant 1 : index
        %rows = arith.constant 10 : index
        %cols = arith.constant 10 : index
        %zero_f64 = arith.constant 0.0 : f64

        %init = tensor.empty() : tensor<10x10xf64>
        %sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %dense = arith.constant dense<[[1.424892, 9.763551, 6.048666, 1.541028, 3.143205, 9.866591, 4.965868, 6.455067, 1.785916, 7.037715], [3.221136, 6.979883, 3.896429, 7.541138, 9.193549, 3.510814, 9.805166, 1.218451, 8.577289, 7.434750], [5.774523, 5.038521, 2.741615, 4.940282, 2.250835, 2.468390, 3.602183, 6.054131, 1.169121, 9.307099], [1.364753, 1.520643, 5.784633, 3.362279, 1.366757, 2.446991, 0.586594, 7.348743, 8.007777, 1.633748], [0.341996, 9.292858, 9.250174, 1.206689, 9.125916, 4.386536, 6.133049, 0.675787, 9.593767, 1.331260], [1.744983, 1.138910, 5.295543, 9.198453, 2.794924, 5.445405, 4.776198, 6.346619, 7.703967, 0.093056], [9.955059, 3.353884, 5.748422, 1.445964, 4.973587, 4.534957, 6.405045, 9.226432, 8.679636, 8.728226], [7.212024, 9.980929, 2.354943, 1.787116, 9.811873, 7.660014, 8.999567, 5.949832, 2.864878, 9.391496], [3.379035, 2.968396, 9.615684, 9.162040, 7.189476, 8.463939, 2.909080, 8.722305, 6.190986, 3.311716], [7.887102, 8.691364, 5.141794, 2.991012, 5.022680, 4.919393, 4.952193, 5.888948, 8.540374, 5.994817]]> : tensor<10x10xf64>

        %computed = call @sparse_dense_matmul(%sparse, %dense, %init) : (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %expected = arith.constant dense<[[178.063879, 207.915274, 164.099983, 91.431846, 115.255409, 171.664852, 144.439739, 222.806124, 171.196801, 226.759148], [110.693245, 86.499004, 94.689518, 132.364399, 90.370367, 86.971022, 122.228794, 132.634878, 127.522619, 137.633751], [78.687922, 42.718924, 96.450340, 63.926319, 77.339101, 79.667350, 58.416453, 106.552568, 93.340537, 71.669673], [114.188378, 141.140498, 145.613753, 53.261702, 85.392944, 147.814698, 106.754857, 186.970640, 152.631172, 151.469217], [67.963804, 78.355204, 40.313065, 24.160482, 52.163807, 47.772038, 50.283560, 51.707070, 65.177506, 58.312340], [179.879409, 140.125092, 116.853007, 62.537123, 100.019725, 111.270031, 123.301218, 171.272119, 151.191682, 184.681096], [50.176189, 109.943491, 123.973580, 100.809100, 64.559190, 147.610724, 96.529130, 146.120152, 118.260146, 84.367389], [33.772482, 78.434316, 43.869538, 12.400733, 77.071516, 50.329191, 62.650360, 29.276560, 47.405361, 47.162301], [0.768489, 20.881720, 20.785806, 2.711517, 20.506589, 9.856863, 13.781403, 1.518543, 21.557885, 2.991437], [106.718050, 114.006991, 139.505578, 88.485358, 82.497217, 132.650249, 103.987367, 177.508489, 170.153197, 115.937437]]> : tensor<10x10xf64>

        // Validate each element
        %false = arith.constant "false" : i1
        %flag = scf.for %i = %c0 to %rows step %c1 iter_args(%f_iter = %false) -> (i1) {
            %flag_row = scf.for %j = %c0 to %cols step %c1 iter_args(%f_in = %f_iter) -> (i1) {
                %cmp_c = tensor.extract %computed[%i, %j] : tensor<10x10xf64>
                %cmp_e = tensor.extract %expected[%i, %j] : tensor<10x10xf64>
                %neq = arith.cmpf une, %cmp_c, %cmp_e : f64
                %new_f = arith.ori %f_in, %neq : i1
                scf.yield %new_f : i1
            }
            scf.yield %flag_row : i1
        }

        %zero_i32 = arith.constant 0 : i32
        %one_i32 = arith.constant 1 : i32
        %status = scf.if %flag -> (i32) {
            scf.yield %one_i32 : i32
        } else {
            scf.yield %zero_i32 : i32
        }
        return %status : i32
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[8.077452, 6.951374, 3.715377, 5.953046, 7.871081, 3.620935, 7.842632, 6.540819, 4.251973, 0.574216, 5.855641, 5.977530, 8.761070, 6.501861, 7.429216, 2.392904, 1.702011, 7.060751, 2.224621, 4.892154, 9.170154, 7.248580, 8.847164, 2.806319, 8.023043, 1.522264, 0.581418, 3.593785, 4.512384, 2.247072, 5.128178, 5.875194, 4.574598, 5.530502, 3.594944]> : tensor<35xf64>
        %row_ptr = arith.constant dense<[0, 5, 9, 12, 16, 18, 22, 27, 29, 30, 35]> : tensor<11xindex>
        %col_ind = arith.constant dense<[0, 2, 3, 6, 9, 1, 2, 5, 6, 4, 6, 8, 0, 3, 6, 9, 7, 9, 0, 2, 6, 9, 0, 3, 5, 6, 9, 4, 7, 4, 0, 3, 5, 6, 9]> : tensor<35xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<35xindex>), tensor<35xf64> to tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }

}
