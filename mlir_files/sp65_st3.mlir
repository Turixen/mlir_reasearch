// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @matmul(%t : tensor<10x10xf64, #CSR>, %s : tensor<10x10xf64>, %out : tensor<10x10xf64>)
        -> tensor<10x10xf64> {
        %0 = linalg.matmul
            ins(%t, %s: tensor<10x10xf64, #CSR>, tensor<10x10xf64>)
            outs(%out: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %0 : tensor<10x10xf64>
    }

    func.func @main() -> i64 {
        %c = tensor.empty() : tensor<10x10xf64>
        %t_sparse = call @test_assemble() : () -> tensor<10x10xf64, #CSR>
        %s = arith.constant dense<[
            [3.4972614025926196, 8.322163102384145, 2.8663185706592254, 8.750774358186131, 8.754081611948862, 4.510167975716673, 1.7153776041007163, 0.9381511339943349, 2.5540996224966515, 1.9435645947974023], [7.906445112520972, 8.034665027307668, 2.65153909043275, 6.515533587629102, 5.45022094118409, 0.4390106172979391, 3.165137549459851, 1.369381707603834, 8.227110782364349, 2.3823757660668377], [3.3567155487491087, 5.6911787252828265, 6.187049203276587, 7.313243692499702, 4.931408293440461, 7.996947168051217, 7.618365969858321, 3.3299697713089103, 9.620190760689239, 3.7897866840309358], [8.325701717060536, 1.925896717820098, 3.6504836240684932, 1.843260085485019, 2.231118610346743, 7.704437619519187, 4.902443041832191, 1.4603103033546494, 6.902152493334582, 2.6551314737355236], [4.2783740912908454, 6.754496023786171, 7.672688144110779, 5.2834137295574415, 6.954229348739982, 0.897999210284387, 9.342993386832198, 0.7656042676181973, 2.352844683758973, 7.103248967857624], [3.5941088505462195, 4.666843501196575, 3.5882709680263636, 0.4365417602733146, 6.807291472697006, 3.479971449743353, 5.263047491822329, 8.52558739693537, 0.2500227246222064, 2.623324780305414], [4.960109426296952, 2.6527811352074093, 1.856932520350092, 5.3744066102045895, 4.5731563961644115, 2.358601808765294, 8.439942527519074, 8.058525788901989, 5.04706683905987, 4.729023152282984], [6.569455710696722, 7.93262377053611, 5.611076935608433, 4.5051781459625815, 0.6734358573846511, 7.818055475525951, 2.253318051315248, 9.206964125085657, 9.865015848581876, 8.979046889948394], [1.015466278344872, 1.4038473261618234, 9.538574792645239, 2.1877441402194697, 3.6570093848704666, 5.166839206658114, 6.330362313345056, 2.940429830683229, 6.3357789490771825, 9.93091293498648], [4.119930958812108, 5.378495943668344, 7.833741004719188, 2.7170472510373878, 7.984567524914793, 4.564484820888469, 0.3365508240163517, 4.473376741941219, 3.031841633792123, 6.7741574596626295]
        ]> : tensor<10x10xf64>
        %result_matrix = call @matmul(%t_sparse, %s, %c) :
            (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %c1 = arith.constant 1 : index
        %element_f64 = tensor.extract %result_matrix[%c1, %c1] : tensor<10x10xf64>
        %element_i64 = arith.fptosi %element_f64 : f64 to i64
        return %element_i64 : i64
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[1.445942, 1.665408, 2.184814, 6.416922, 6.575824, 9.860702, 2.855466, 7.038302, 4.010805, 9.788745, 4.503942, 1.388192, 9.717785, 6.497931, 6.406912, 4.915281, 7.499449, 3.086345, 1.152385, 6.640466, 0.031527, 7.844394, 4.921763, 2.048654, 2.099808, 5.392654, 2.063325, 4.897825, 0.906886, 0.913039, 9.247799, 9.438589, 6.234359, 2.330537, 6.856216]> : tensor<35xf64>
        %row_ptr = arith.constant dense<[0, 7, 9, 9, 15, 18, 20, 24, 26, 30, 35]> : tensor<11xindex>
        %col_ind = arith.constant dense<[0, 1, 3, 6, 7, 8, 9, 2, 6, 0, 3, 5, 6, 7, 9, 1, 3, 6, 2, 6, 0, 3, 6, 9, 6, 8, 1, 3, 5, 9, 0, 3, 6, 8, 9]> : tensor<35xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<35xindex>), tensor<35xf64> to tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }
    
}
