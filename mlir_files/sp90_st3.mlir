// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @matmul(%t : tensor<10x10xf64, #CSR>, %s : tensor<10x10xf64>, %out : tensor<10x10xf64>)
        -> tensor<10x10xf64> {
        %0 = linalg.matmul
            ins(%t, %s: tensor<10x10xf64, #CSR>, tensor<10x10xf64>)
            outs(%out: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %0 : tensor<10x10xf64>
    }

    func.func @main() -> i64 {
        %c = tensor.empty() : tensor<10x10xf64>
        %t_sparse = call @test_assemble() : () -> tensor<10x10xf64, #CSR>
        %s = arith.constant dense<[
            [2.6460079397558065, 4.048191241068686, 2.625843689588363, 3.2507476114532166, 0.2655775185815368, 6.184881673956102, 7.367845696029472, 6.6349266253346615, 0.9606850723664251, 0.6680289340511048], [0.7952347683239036, 2.4249106438290036, 8.555218359907146, 0.2520219457536421, 5.743483345052921, 0.9683769831307454, 5.994174035923418, 9.31733895696432, 2.5776743032744287, 7.496860143830029], [4.760008094726302, 8.615887053805551, 5.2592435053047915, 3.240616012439932, 9.240107509324258, 0.9043049055674202, 2.8290938103639918, 1.0318779313110638, 6.860620429340218, 7.292126789230114], [2.7811815195043432, 2.271528661970237, 6.508996964310182, 6.456753129725512, 2.6161789196497076, 5.042687717387624, 4.44219228800652, 9.121334940172087, 7.232641233509392, 8.490335151575513], [9.263701886691223, 8.093899108376998, 2.0212076939046786, 7.427432545545675, 4.942551571142564, 8.209789729085442, 2.1791802276223615, 4.5762305613853105, 3.298761262614912, 9.962763581873062], [9.782132932808075, 7.242896213951192, 4.5877514790121685, 9.437194546209062, 8.131836114073685, 2.3371763231546483, 8.44148177099932, 9.629018629642747, 1.4029299761440683, 7.328845944086019], [3.7218538835020496, 6.213670366614005, 4.28078311312301, 7.747023588140695, 5.840014676522576, 6.837805719600148, 0.2922325415674065, 2.544130522553024, 9.333121914649505, 3.1023467308048422], [3.0031201867444035, 2.0708851488996496, 9.692314872221102, 4.868440094187677, 2.128839675996179, 8.511347768162503, 5.84424434016924, 1.8245849866490693, 4.585982006789254, 8.499004899730613], [0.364082555249976, 2.040022007856821, 7.551659817362961, 9.873327893635018, 3.6431076772685733, 8.98457567606541, 3.3351951306557206, 7.360829361875709, 7.6590469478859715, 2.07571626462008], [8.527942322475306, 9.188388516406285, 7.101095112712529, 8.39444293685943, 2.7872441418924576, 1.371460918661359, 8.307434997316605, 6.577220520424777, 8.316214959800662, 1.6429429194704004]
        ]> : tensor<10x10xf64>
        %result_matrix = call @matmul(%t_sparse, %s, %c) :
            (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %c1 = arith.constant 1 : index
        %element_f64 = tensor.extract %result_matrix[%c1, %c1] : tensor<10x10xf64>
        %element_i64 = arith.fptosi %element_f64 : f64 to i64
        return %element_i64 : i64
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[5.939851, 3.825946, 9.532564, 2.890422, 7.504827, 8.532387, 5.388970, 0.185660, 6.370671]> : tensor<9xf64>
        %row_ptr = arith.constant dense<[0, 1, 1, 1, 3, 3, 3, 7, 7, 7, 9]> : tensor<11xindex>
        %col_ind = arith.constant dense<[6, 0, 6, 0, 3, 6, 9, 6, 9]> : tensor<9xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<9xindex>), tensor<9xf64> to tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }
    
}
