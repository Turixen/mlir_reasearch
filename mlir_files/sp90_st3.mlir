// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @matmul(%t : tensor<10x10xf64, #CSR>, %s : tensor<10x10xf64>, %out : tensor<10x10xf64>)
        -> tensor<10x10xf64> {
        %0 = linalg.matmul
            ins(%t, %s: tensor<10x10xf64, #CSR>, tensor<10x10xf64>)
            outs(%out: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %0 : tensor<10x10xf64>
    }

    func.func @main() -> i64 {
        %c = tensor.empty() : tensor<10x10xf64>
        %t_sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %s = arith.constant dense<[
            [2.8868831766030723, 3.4696937995146717, 5.2537520176178, 9.533055472519386, 7.4399141021817705, 8.330088451116207, 1.3681451186700122, 6.995160524906066, 2.42725085160831, 5.834397057492977], [5.9061457027728546, 2.3661588344989406, 9.924403355052021, 5.3751879577075625, 7.080611625228892, 3.2248486239247653, 8.4924065965543, 1.2165794220441195, 6.160642696961803, 9.563453527671923], [4.924201029701578, 5.0241383523720895, 8.518320289583322, 9.576053459375695, 8.241192457419263, 2.059481843895404, 8.190932323648696, 3.670184502976579, 5.557733196021328, 7.864040407280017], [3.2595444212062463, 5.466194725279399, 8.864031988226401, 3.117166431097742, 0.1693161794728304, 0.8235165498360264, 3.767634659327399, 3.476082943933511, 1.543597066914042, 7.339826979894237], [4.0494497202433, 4.63841455496431, 5.519406314557768, 1.9593106343852118, 4.536232426240163, 2.4634440136956535, 1.1448145538775167, 4.431812631850816, 5.328517407390514, 5.132887038309334], [9.180087002506752, 9.307267669851937, 5.951839017642438, 9.916273459710178, 8.589653794038918, 9.336184843465118, 1.0567732943106034, 9.922768834775678, 3.4820661564373454, 2.413874053017958], [8.585372000385247, 6.958787938645444, 0.4889068442804845, 2.325006266674936, 4.555671543055196, 2.6950670270802624, 0.36266226539088064, 9.547252513322173, 6.888014379765045, 6.917903434232881], [9.298095306013744, 7.023323789571599, 0.22201719776894668, 3.554271320525176, 3.9009350705300205, 0.7204222239066038, 8.218234661260563, 1.3869013208579595, 7.966070832770212, 8.562441528833734], [1.1346638673650944, 8.413732562533113, 4.170410980536717, 5.015206176915413, 1.2850408383854783, 5.042189576726516, 9.260493917037717, 9.60954550831313, 3.1416819206883364, 1.3371246613306964], [1.2347117356619974, 3.4404808736488657, 1.8686711443334025, 9.216601643213432, 6.150877491340735, 1.2976172335895797, 3.3922226582134507, 2.204598486703182, 9.601404646821734, 4.062897733870826]
        ]> : tensor<10x10xf64>
        %result_matrix = call @matmul(%t_sparse, %s, %c) :
            (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %c1 = arith.constant 1 : index

        %element_f64 = tensor.extract %result_matrix[%c1, %c1] : tensor<10x10xf64>
        %element_i64 = arith.fptosi %element_f64 : f64 to i64
        return %element_i64 : i64
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[2.373096, 7.281612, 3.449948, 5.609249, 1.172824, 2.315328, 2.313010, 3.081328, 5.195017]> : tensor<9xf64>
        %row_ptr = arith.constant dense<[0, 2, 2, 2, 4, 4, 4, 6, 6, 6, 9]> : tensor<11xindex>
        %col_ind = arith.constant dense<[0, 6, 0, 9, 0, 3, 3, 6, 9]> : tensor<9xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<9xindex>), tensor<9xf64> to tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }
    
}
