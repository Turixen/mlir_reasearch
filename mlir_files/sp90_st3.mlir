// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @matmul(%t : tensor<10x10xf64, #CSR>, %s : tensor<10x10xf64>, %out : tensor<10x10xf64>)
        -> tensor<10x10xf64> {
        %0 = linalg.matmul
            ins(%t, %s: tensor<10x10xf64, #CSR>, tensor<10x10xf64>)
            outs(%out: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %0 : tensor<10x10xf64>
    }

    func.func @main() -> i64 {
        %c = tensor.empty() : tensor<10x10xf64>
        %t_sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %s = arith.constant dense<[
            [0.5542075698614357, 7.586107818286893, 2.908636438984973, 2.6989424460046973, 0.8599992760576458, 4.74985824811866, 8.286975662761467, 1.0925307032444254, 6.541688304672165, 3.826760739689985], [0.755520695235018, 0.25812419485283455, 2.097000032543974, 9.090172424363693, 5.7203716779805305, 7.457355792062565, 6.439461927012829, 2.770519104351301, 8.202150973608385, 4.252900895576267], [0.18896896232835303, 7.65879623194786, 8.15606691281511, 1.2454669830199894, 5.742779859850456, 8.138586230024211, 3.254630803202836, 6.082895565601223, 5.773674543657977, 1.3199427163612032], [1.6333430848876351, 2.6628361951967694, 8.790451896507063, 1.7806942894576538, 0.9690749901322881, 4.2411172351561985, 2.729610429148339, 2.0274743240345927, 4.983110024165603, 6.3936835371271865], [0.7642127953172384, 9.926722036743977, 6.919704177303694, 1.6152694849344873, 7.317198276891844, 8.666242794901237, 4.660276744161271, 3.306171713727416, 5.368214449655574, 8.664850686332919], [5.458748515481295, 3.4219882242704367, 2.094283566934134, 9.586030113881668, 1.8554758090187784, 3.2165173903397006, 6.566123887417197, 2.608185440436378, 1.4051223287361492, 7.355973528057937], [7.147358588087281, 7.268207008109747, 4.587245329676972, 3.0390548368856676, 2.3254184635891226, 9.14798921754077, 1.771040821135308, 8.30235964306077, 7.53462865642602, 0.04305232374818946], [0.586625810819289, 7.693161805969128, 4.447389461974849, 4.255539193533866, 7.728923218986418, 6.431346517055912, 6.249328987674514, 9.855370840847934, 7.824017474099819, 7.570707381448553], [8.109248907194111, 2.6691518570762973, 4.695649950195833, 7.148368943189556, 6.822728113136314, 3.717398795259305, 4.076628153370208, 1.3921492477927555, 2.709363643130164, 8.7351364962031], [0.15144231443824818, 4.039539808349114, 2.3144734937802047, 0.18292337354474553, 0.6047128217899178, 3.9457757568529814, 4.8188097941413215, 4.384670755730199, 8.993620629770295, 3.4664409934069584]
        ]> : tensor<10x10xf64>
        %result_matrix = call @matmul(%t_sparse, %s, %c) :
            (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %c1 = arith.constant 1 : index
        %element_f64 = tensor.extract %result_matrix[%c1, %c1] : tensor<10x10xf64>
        %element_i64 = arith.fptosi %element_f64 : f64 to i64
        return %element_i64 : i64
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[0.489498, 9.470591, 7.613706, 8.103570, 5.330087, 9.299985, 5.770706, 0.502238, 1.965311]> : tensor<9xf64>
        %row_ptr = arith.constant dense<[0, 3, 3, 3, 3, 3, 3, 6, 6, 6, 9]> : tensor<11xindex>
        %col_ind = arith.constant dense<[0, 3, 9, 0, 3, 9, 0, 3, 6]> : tensor<9xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<9xindex>), tensor<9xf64> to tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }
    
}
