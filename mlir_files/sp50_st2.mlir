// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @matmul(%t : tensor<10x10xf64, #CSR>, %s : tensor<10x10xf64>, %out : tensor<10x10xf64>)
        -> tensor<10x10xf64> {
        %0 = linalg.matmul
            ins(%t, %s: tensor<10x10xf64, #CSR>, tensor<10x10xf64>)
            outs(%out: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %0 : tensor<10x10xf64>
    }

    func.func @main() -> i64 {
        %c = tensor.empty() : tensor<10x10xf64>
        %t_sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %s = arith.constant dense<[
            [4.582603081335361, 8.074992535453845, 7.372379892803652, 2.2423876516423604, 6.617639427827204, 3.5946109651001388, 6.341721397963211, 0.8178640088875544, 9.784477912936529, 6.147529215195039], [2.6004134657121325, 8.567473265555947, 4.303062396111736, 7.354562442508329, 5.176806683288882, 0.2906495620005656, 3.502320298641987, 9.25835001872024, 1.2611016568642996, 2.8631361611983266], [1.9486151992290224, 9.226144308682175, 2.9093123055991033, 9.337629597421648, 6.8901377763683245, 2.668066652856016, 4.925033317955904, 3.7873725327878685, 4.880244045298526, 4.562507617863499], [6.273894067190103, 8.904476111730613, 0.3683151870389634, 8.94347719633766, 0.7454756724808675, 1.8421410730418653, 3.5791520137420596, 9.936353400693323, 8.597751297430635, 6.128163960437659], [7.7009321446720165, 3.192675268618687, 8.889717784171333, 9.13608994222168, 5.5530463922440765, 2.4748644369155617, 3.307560541968936, 7.682533145643679, 3.496070602019815, 2.483449967562242], [5.96831705367584, 4.628602474799914, 0.11207476196230415, 3.5654499019743167, 1.39240387820732, 3.887547273026024, 6.881706272320286, 7.6544714648199, 1.0831595229791824, 1.5467378093078965], [4.36556706642378, 4.0515684293994, 2.7961123932308993, 8.566593517551324, 2.2945927570761393, 7.157418481944703, 4.164060751940517, 6.794741066582512, 9.56029294291506, 2.998323100500224], [5.558364999141439, 9.930751190708758, 5.877693888084363, 6.948122137036793, 9.159296611283768, 2.689243937327086, 3.941007804684933, 6.295047976519451, 6.460938936009095, 4.714823622860208], [3.753189018590375, 4.215777367484145, 3.290512700575227, 4.499183678249793, 8.476246204961061, 4.587420883645812, 3.470742126371047, 6.755089346382343, 9.091911493783684, 2.9363669088189646], [9.971582151565455, 1.643210966380777, 3.1887723395615364, 2.356272882853342, 5.443819349278476, 1.1365906105781531, 1.5002587535759326, 7.952521119270686, 1.1681556901164225, 1.8521973129760583]
        ]> : tensor<10x10xf64>
        %result_matrix = call @matmul(%t_sparse, %s, %c) :
            (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %c1 = arith.constant 1 : index

        %element_f64 = tensor.extract %result_matrix[%c1, %c1] : tensor<10x10xf64>
        %element_i64 = arith.fptosi %element_f64 : f64 to i64
        return %element_i64 : i64
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[5.052038, 9.637812, 6.579557, 0.562414, 0.201793, 3.907510, 0.864291, 1.931032, 1.709923, 1.090403, 8.094354, 7.311187, 8.333403, 8.102517, 3.688470, 8.135811, 8.570330, 4.324089, 9.949482, 2.966724, 2.270942, 0.165087, 6.397982, 5.807073, 0.280187, 5.732373, 0.814714, 3.912819, 2.997407, 9.688631, 1.812923, 2.453664, 0.748686, 0.257478, 6.380929, 3.858514, 9.974145, 7.775020, 3.481085, 4.991971, 9.889094, 4.674688, 1.246009, 2.697710, 6.308688, 9.369456, 0.444867, 2.578822, 3.667209, 6.893415]> : tensor<50xf64>
        %row_ptr = arith.constant dense<[0, 5, 12, 18, 23, 30, 34, 41, 42, 47, 50]> : tensor<11xindex>
        %col_ind = arith.constant dense<[0, 2, 4, 6, 8, 0, 1, 2, 3, 7, 8, 9, 0, 1, 2, 4, 6, 8, 0, 6, 7, 8, 9, 0, 2, 4, 5, 6, 7, 8, 1, 2, 4, 7, 0, 2, 3, 4, 5, 6, 8, 1, 0, 2, 4, 6, 8, 0, 6, 8]> : tensor<50xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<50xindex>), tensor<50xf64> to tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }
    
}
