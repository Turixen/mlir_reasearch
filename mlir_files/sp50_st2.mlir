// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @sparse_dense_matmul(%sparse: tensor<10x10xf64, #CSR>,%dense: tensor<10x10xf64>,%init: tensor<10x10xf64>
    ) -> tensor<10x10xf64> {
        %res = linalg.matmul ins(%sparse, %dense: tensor<10x10xf64, #CSR>, tensor<10x10xf64>) 
            outs(%init: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %res : tensor<10x10xf64>
    }

    func.func @main() -> i32 {
        %c0 = arith.constant 0 : index
        %c1 = arith.constant 1 : index
        %rows = arith.constant 10 : index
        %cols = arith.constant 10 : index
        %zero_f64 = arith.constant 0.0 : f64

        %init = tensor.empty() : tensor<10x10xf64>
        %sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %dense = arith.constant dense<[[6.543248, 3.056383, 5.332356, 0.960257, 2.813987, 7.868041, 3.330580, 4.802467, 1.042020, 2.770830], [1.600295, 6.550474, 2.644162, 8.593423, 2.038284, 3.369756, 5.049508, 3.190885, 8.377231, 5.965317], [5.413222, 5.037094, 9.113965, 6.937806, 3.341834, 0.768967, 7.235842, 2.225129, 7.557545, 5.883589], [9.619836, 9.041861, 9.317774, 9.800561, 9.603754, 7.986010, 8.188432, 3.159078, 0.611226, 3.085477], [1.980460, 0.178209, 9.498553, 6.283108, 7.438331, 4.688203, 5.639529, 2.092580, 8.261020, 7.720239], [7.926133, 3.713046, 6.839301, 6.876338, 2.864943, 0.407492, 4.906850, 1.839626, 3.840473, 3.220887], [7.169925, 2.851230, 3.550581, 9.438876, 8.687173, 0.029321, 9.688155, 9.426108, 6.136422, 3.112336], [4.858651, 6.806403, 6.851458, 2.491931, 4.906041, 1.799083, 7.828188, 8.141075, 1.091842, 3.322183], [8.233286, 6.071159, 1.532661, 0.009414, 1.405926, 4.217212, 9.955076, 5.861361, 4.361519, 2.206473], [6.440594, 9.169131, 3.054884, 5.225557, 2.277682, 1.760096, 7.334898, 9.208618, 0.802236, 7.384582]]> : tensor<10x10xf64>

        %computed = call @sparse_dense_matmul(%sparse, %dense, %init) : (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %expected = arith.constant dense<[[141.218763, 89.942617, 160.824603, 185.481141, 158.808307, 50.386291, 196.495664, 151.320685, 156.519774, 137.264195], [76.986532, 56.629822, 60.835546, 87.068444, 83.045403, 39.946142, 80.037131, 53.894647, 27.877413, 27.980869], [236.847098, 235.704381, 173.948284, 177.825488, 122.959708, 166.802747, 284.263172, 231.130052, 183.584081, 207.104670], [75.652925, 72.458237, 74.571216, 75.591877, 75.559933, 61.456622, 66.622784, 28.791173, 5.279120, 25.328694], [177.377158, 129.849768, 159.534270, 119.676002, 152.104390, 92.707975, 218.626807, 202.430087, 102.453412, 102.016455], [61.748865, 93.736071, 119.818067, 143.139973, 93.022662, 74.781564, 123.378403, 87.882630, 137.065207, 148.820782], [265.011411, 234.928554, 308.168073, 311.836797, 286.925968, 222.259620, 327.129470, 244.593579, 219.890770, 227.887784], [37.096565, 50.950221, 17.214208, 37.790424, 14.089423, 30.205357, 58.538489, 35.423415, 52.733161, 34.266592], [236.229492, 184.301234, 270.225113, 175.048608, 186.317033, 124.655643, 311.031220, 209.909914, 201.713486, 183.841852], [119.526620, 118.208669, 99.429519, 133.338140, 99.887498, 81.641713, 147.841620, 147.546947, 101.693906, 98.960902]]> : tensor<10x10xf64>

        // Validate each element
        %false = arith.constant "false" : i1
        %flag = scf.for %i = %c0 to %rows step %c1 iter_args(%f_iter = %false) -> (i1) {
            %flag_row = scf.for %j = %c0 to %cols step %c1 iter_args(%f_in = %f_iter) -> (i1) {
                %cmp_c = tensor.extract %computed[%i, %j] : tensor<10x10xf64>
                %cmp_e = tensor.extract %expected[%i, %j] : tensor<10x10xf64>
                %neq = arith.cmpf une, %cmp_c, %cmp_e : f64
                %new_f = arith.or %f_in, %neq : i1
                scf.yield %new_f : i1
            }
            scf.yield %flag_row : i1
        }

        %zero_i32 = arith.constant 0 : i32
        %one_i32 = arith.constant 1 : i32
        %status = scf.if %flag -> (i32) {
            scf.yield %one_i32 : i32
        } else {
            scf.yield %zero_i32 : i32
        }
        return %status : i32
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[1.408425, 5.639150, 6.146795, 9.568243, 0.108536, 3.075253, 4.987159, 4.046190, 8.179935, 7.583952, 2.910718, 3.824181, 1.392318, 9.658611, 9.060079, 7.559678, 0.603061, 6.416858, 1.020679, 2.204860, 7.343968, 9.321772, 3.346334, 6.955966, 9.044870, 5.077834, 8.394143, 8.068663, 0.453501, 8.348353, 9.657800, 7.144108, 5.386331, 0.985878, 1.517345, 4.393598, 3.651703, 3.463288, 7.543926, 8.047623, 2.533790, 2.889614, 9.648600, 8.394309, 6.310208, 6.694847, 5.515274, 3.359488, 0.021043, 1.783019]> : tensor<50xf64>
        %row_ptr = arith.constant dense<[0, 6, 8, 15, 17, 23, 26, 35, 37, 44, 50]> : tensor<11xindex>
        %col_ind = arith.constant dense<[0, 2, 4, 6, 8, 9, 3, 6, 0, 1, 2, 4, 6, 8, 9, 3, 7, 0, 2, 4, 6, 7, 8, 1, 4, 9, 0, 1, 2, 3, 4, 6, 7, 8, 9, 1, 8, 0, 2, 4, 5, 6, 7, 8, 0, 1, 6, 7, 8, 9]> : tensor<50xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<50xindex>), tensor<50xf64> -> tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }

}
