// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @matmul(%t : tensor<10x10xf64, #CSR>, %s : tensor<10x10xf64>, %out : tensor<10x10xf64>)
        -> tensor<10x10xf64> {
        %0 = linalg.matmul
            ins(%t, %s: tensor<10x10xf64, #CSR>, tensor<10x10xf64>)
            outs(%out: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %0 : tensor<10x10xf64>
    }

    func.func @main() -> i64 {
        %c = tensor.empty() : tensor<10x10xf64>
        %t_sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %s = arith.constant dense<[
            [3.577639390102223, 2.1224240446981124, 2.6829126484378687, 2.425723577253601, 3.712780958926716, 7.652280466165622, 0.37526756091648905, 3.9614759549790324, 5.869383930822865, 4.285033227719783], [8.110835522323562, 7.4508289629013325, 8.014152805502249, 4.71417785734308, 0.8850093406580728, 7.309838781479682, 8.620277623576186, 0.39082605108643587, 2.5567530701044703, 6.79748260960698], [7.962657672245205, 5.292342091160286, 5.4256889231632925, 6.301122945829642, 4.572373302025175, 9.077203383960201, 5.466721848447637, 4.599701852106319, 7.865639779844428, 9.48302881855944], [9.571108411697882, 5.871776073205358, 8.532312580153533, 0.10444467501554588, 4.7524968583953715, 4.758364291505899, 3.7491405464922645, 4.492494714578871, 6.741599298156818, 4.880130564608719], [4.952118940988909, 7.861848881795047, 1.3772124389638885, 9.80190011551802, 4.0005003308709775, 3.5225384189405906, 3.5069186626563797, 2.894160716497006, 0.6219632254750163, 2.5062789745737426], [4.708137106685428, 6.85215551335861, 2.2590216044571587, 3.6789794147483557, 7.219067436375809, 0.0036772711234700495, 7.620945968799977, 8.610928195283057, 5.093926877088069, 4.199162883902815], [3.481511252660087, 4.65063726091686, 9.592703280569388, 6.623905255132705, 0.3334443040946433, 4.3699246054774035, 2.561148426303763, 2.152179413186194, 9.70837212161338, 9.066141626149589], [8.883469390121226, 6.438131805983557, 5.363104088819712, 0.3928715766646318, 0.32025733205410467, 8.282729940853267, 5.969974216915026, 4.1771713112478075, 6.0932297204089245, 4.610014197285773], [5.0104646771242205, 0.46773404203091506, 6.201942153226928, 6.757850652417098, 4.671301968664798, 5.898096155576439, 0.10856944250514533, 3.774345310304591, 3.551605039444039, 4.121514042794256], [9.498441737013803, 8.787686283417699, 4.07784867250356, 4.656406191312541, 4.678634928784632, 0.48615688097774945, 2.2411056360389434, 5.119364465225189, 6.803513274003986, 3.328182245221213]
        ]> : tensor<10x10xf64>
        %result_matrix = call @matmul(%t_sparse, %s, %c) :
            (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %c1 = arith.constant 1 : index
        %element_f64 = tensor.extract %result_matrix[%c1, %c1] : tensor<10x10xf64>
        %element_i64 = arith.fptosi %element_f64 : f64 to i64
        return %element_i64 : i64
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[0.209100, 1.204792, 3.621458, 4.842332, 3.908865, 4.564149, 3.050137, 0.995183, 5.926627, 2.437874, 4.881043, 8.881511, 9.476103, 6.117349, 6.423068, 1.770147, 8.984703, 9.818046, 8.920406, 9.765345, 1.957649, 6.545754, 2.595991, 4.379613, 0.067919, 6.741389, 7.034698, 1.952182, 7.714431, 6.718168, 8.673655, 9.332670, 5.760912, 7.356685, 2.317069, 0.985393, 3.409244, 2.300772, 5.949775, 0.809912, 7.221354, 0.608937, 1.753806, 4.076263, 0.640243, 4.482884, 3.195512, 3.284672, 2.322178, 4.796599]> : tensor<50xf64>
        %row_ptr = arith.constant dense<[0, 5, 10, 16, 18, 25, 29, 36, 40, 48, 50]> : tensor<11xindex>
        %col_ind = arith.constant dense<[0, 2, 4, 6, 8, 0, 2, 4, 6, 9, 0, 2, 3, 4, 6, 8, 2, 9, 0, 1, 2, 3, 4, 6, 8, 0, 1, 2, 3, 0, 1, 2, 4, 5, 6, 8, 0, 7, 8, 9, 0, 1, 2, 4, 6, 7, 8, 9, 7, 8]> : tensor<50xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<50xindex>), tensor<50xf64> to tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }
    
}
