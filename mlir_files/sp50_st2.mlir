// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @sparse_dense_matmul(%sparse: tensor<10x10xf64, #CSR>,%dense: tensor<10x10xf64>,%init: tensor<10x10xf64>
    ) -> tensor<10x10xf64> {
        %res = linalg.matmul ins(%sparse, %dense: tensor<10x10xf64, #CSR>, tensor<10x10xf64>) 
            outs(%init: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %res : tensor<10x10xf64>
    }

    func.func @main() -> i32 {
        %c0 = arith.constant 0 : index
        %c1 = arith.constant 1 : index
        %rows = arith.constant 10 : index
        %cols = arith.constant 10 : index
        %zero_f64 = arith.constant 0.0 : f64

        %init = tensor.empty() : tensor<10x10xf64>
        %sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %dense = arith.constant dense<[[5.260502, 0.846650, 6.736777, 5.226501, 9.922388, 5.130420, 6.054209, 0.770894, 6.917391, 7.146482], [9.296236, 9.785520, 2.540343, 4.142955, 3.611540, 2.400378, 4.849848, 0.250054, 2.473003, 6.760292], [2.805508, 2.664060, 3.805191, 2.423682, 0.897966, 5.825049, 1.651855, 1.742114, 9.936604, 7.198616], [9.992129, 7.590609, 4.336407, 4.613276, 4.582199, 4.023806, 7.314522, 6.065952, 7.227806, 9.196492], [4.108414, 9.676514, 6.791269, 2.845074, 4.594965, 6.346910, 4.503479, 4.680480, 6.961512, 4.840909], [9.951637, 5.262449, 0.821352, 2.671327, 4.352245, 7.552213, 0.178186, 5.644623, 6.438523, 8.925722], [4.028632, 8.127206, 3.993550, 3.897519, 4.170875, 1.064509, 1.817415, 3.958233, 9.418923, 1.736480], [7.897625, 0.317571, 6.975628, 8.426674, 0.360092, 6.416591, 3.339731, 1.270557, 5.575495, 9.297478], [7.425159, 1.958057, 9.644205, 8.759153, 9.715554, 6.272910, 5.881324, 6.273031, 9.015035, 5.910397], [2.323737, 1.528611, 3.575729, 7.737307, 2.715982, 0.722143, 9.360686, 1.872155, 0.592534, 1.983219]]> : tensor<10x10xf64>

        %computed = call @sparse_dense_matmul(%sparse, %dense, %init) : (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %expected = arith.constant dense<[[177.954952, 117.160133, 227.359157, 183.282815, 215.221435, 183.051320, 146.018893, 116.540652, 295.852051, 207.848592], [95.464564, 117.193271, 58.086845, 42.646234, 59.900596, 81.153079, 46.451144, 55.638806, 81.252922, 89.002806], [344.464888, 245.252179, 288.853530, 288.336519, 236.527988, 253.667863, 274.519873, 164.979465, 349.120181, 366.165972], [30.776353, 62.087021, 30.508345, 29.774727, 31.863009, 8.132214, 13.883968, 30.238546, 71.954976, 13.265672], [222.388460, 156.903004, 161.391164, 157.965715, 138.662100, 194.964690, 87.838698, 129.333660, 272.416517, 233.638989], [51.374236, 49.916387, 27.379067, 53.296861, 28.184075, 13.819359, 63.766075, 9.591132, 13.550402, 38.690609], [223.695872, 240.034033, 211.655680, 163.164364, 200.635578, 173.514027, 178.468684, 157.511489, 313.899529, 232.217130], [115.756664, 48.563995, 147.204337, 128.013355, 165.827430, 96.880229, 99.509496, 78.567461, 155.811420, 105.990434], [349.849626, 289.330093, 228.251797, 244.868387, 245.371378, 234.619023, 239.207258, 193.606046, 319.151018, 325.254757], [44.317368, 53.429288, 56.316174, 38.931623, 25.954526, 52.345397, 33.761117, 28.956077, 53.338853, 52.195851]]> : tensor<10x10xf64>

        // Validate each element
        %false = arith.constant "false" : i1
        %flag = scf.for %i = %c0 to %rows step %c1 iter_args(%f_iter = %false) -> (i1) {
            %flag_row = scf.for %j = %c0 to %cols step %c1 iter_args(%f_in = %f_iter) -> (i1) {
                %cmp_c = tensor.extract %computed[%i, %j] : tensor<10x10xf64>
                %cmp_e = tensor.extract %expected[%i, %j] : tensor<10x10xf64>
                %neq = arith.cmpf une, %cmp_c, %cmp_e : f64
                %new_f = arith.ori %f_in, %neq : i1
                scf.yield %new_f : i1
            }
            scf.yield %flag_row : i1
        }

        %zero_i32 = arith.constant 0 : i32
        %one_i32 = arith.constant 1 : i32
        %status = scf.if %flag -> (i32) {
            scf.yield %one_i32 : i32
        } else {
            scf.yield %zero_i32 : i32
        }
        return %status : i32
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[7.912350, 8.159447, 3.413389, 4.459854, 1.150534, 9.745706, 2.963146, 6.967228, 3.948517, 7.025196, 4.857432, 6.383253, 8.856536, 6.113953, 1.570323, 2.635404, 7.826188, 4.076579, 5.382938, 7.639406, 2.090571, 5.771817, 3.416110, 8.799594, 6.472722, 5.674875, 3.057002, 4.392413, 4.536370, 5.570290, 5.005420, 9.397447, 8.260773, 8.049420, 2.704759, 5.740908, 0.375208, 2.536152, 9.938894, 2.367362, 7.770502, 4.620150, 6.817713, 5.626221, 8.365725, 3.213348, 6.819041, 6.080288, 5.430087, 2.786702]> : tensor<50xf64>
        %row_ptr = arith.constant dense<[0, 6, 9, 19, 20, 27, 29, 35, 39, 48, 50]> : tensor<11xindex>
        %col_ind = arith.constant dense<[0, 2, 4, 6, 7, 8, 1, 4, 5, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 6, 0, 2, 4, 5, 6, 7, 8, 1, 9, 0, 2, 3, 4, 6, 8, 0, 4, 6, 8, 0, 1, 2, 3, 4, 5, 6, 8, 9, 4, 7]> : tensor<50xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<50xindex>), tensor<50xf64> -> tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }

}
