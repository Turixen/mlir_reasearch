// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @sparse_dense_matmul(%sparse: tensor<10x10xf64, #CSR>,%dense: tensor<10x10xf64>,%init: tensor<10x10xf64>
    ) -> tensor<10x10xf64> {
        %res = linalg.matmul ins(%sparse, %dense: tensor<10x10xf64, #CSR>, tensor<10x10xf64>) 
            outs(%init: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %res : tensor<10x10xf64>
    }

    func.func @main() -> i32 {
        %c0 = arith.constant 0 : index
        %c1 = arith.constant 1 : index
        %rows = arith.constant 10 : index
        %cols = arith.constant 10 : index
        %zero_f64 = arith.constant 0.0 : f64

        %init = tensor.empty() : tensor<10x10xf64>
        %sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %dense = arith.constant dense<[[5.613097, 7.240743, 4.778716, 9.781015, 0.363768, 0.353080, 6.585024, 6.247598, 1.959580, 5.425625], [6.382353, 6.223720, 7.860061, 0.196840, 4.291865, 5.403848, 7.915400, 5.308948, 5.960000, 6.342609], [2.036097, 2.966111, 5.108219, 5.444861, 1.600170, 0.131226, 6.020601, 1.883171, 2.236484, 8.920358], [5.535507, 9.068958, 3.683531, 9.672707, 4.286951, 4.178556, 8.469014, 7.367455, 7.682471, 5.159594], [8.026546, 9.725261, 0.962681, 9.742620, 2.778710, 4.311074, 5.679926, 4.596240, 5.019282, 3.072141], [2.364403, 7.417506, 4.784243, 5.434772, 5.653958, 7.513656, 2.328631, 0.765228, 3.905568, 1.928149], [5.700893, 5.595764, 1.836070, 3.436083, 8.647009, 3.527360, 4.971905, 7.624940, 6.053876, 6.797892], [6.491814, 8.082000, 3.781104, 5.562057, 7.973230, 7.787481, 9.869112, 7.351752, 9.441256, 3.328449], [4.332624, 8.709351, 1.702451, 6.632368, 1.399824, 1.750689, 4.157429, 2.443822, 9.288005, 6.917568], [4.923796, 3.734059, 2.963157, 0.020014, 8.317656, 7.196821, 8.056636, 0.729830, 6.150461, 0.669932]]> : tensor<10x10xf64>

        %computed = call @sparse_dense_matmul(%sparse, %dense, %init) : (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %expected = arith.constant dense<[[205.928386, 264.671497, 172.230855, 236.454161, 131.349513, 117.733117, 264.114608, 192.209746, 206.218217, 251.979580], [72.937794, 69.021805, 33.936323, 28.507455, 100.248383, 80.206033, 95.759593, 33.745383, 86.050099, 33.976436], [201.018952, 287.525988, 120.262362, 258.502558, 170.438497, 138.351334, 222.371004, 190.463546, 224.392773, 196.272139], [19.988690, 24.084750, 11.674090, 15.723562, 25.308336, 24.409097, 30.578407, 21.017841, 28.732732, 9.629061], [119.681636, 180.491683, 90.344175, 196.011744, 54.719652, 69.821583, 125.155550, 95.458143, 86.475837, 109.653866], [68.463166, 134.920665, 83.475562, 112.037971, 82.024090, 100.838177, 86.616939, 61.464128, 87.563354, 62.217063], [182.227802, 233.556664, 101.757520, 255.126507, 87.707317, 66.831079, 191.428713, 160.057620, 141.246136, 194.648996], [123.975906, 159.341674, 51.979615, 123.062048, 51.760181, 72.768540, 107.917076, 78.209761, 116.493955, 88.990841], [151.032701, 209.761930, 140.193075, 193.323879, 95.487151, 82.955805, 184.277666, 137.568052, 145.461923, 195.123847], [99.502206, 128.355872, 82.422590, 92.370749, 84.207889, 76.549812, 131.601380, 113.756400, 116.195143, 98.917255]]> : tensor<10x10xf64>

        // Validate each element
        %false = arith.constant "false" : i1
        %flag = scf.for %i = %c0 to %rows step %c1 iter_args(%f_iter = %false) -> (i1) {
            %flag_row = scf.for %j = %c0 to %cols step %c1 iter_args(%f_in = %f_iter) -> (i1) {
                %cmp_c = tensor.extract %computed[%i, %j] : tensor<10x10xf64>
                %cmp_e = tensor.extract %expected[%i, %j] : tensor<10x10xf64>
                %neq = arith.cmpf une, %cmp_c, %cmp_e : f64
                %new_f = arith.ori %f_in, %neq : i1
                scf.yield %new_f : i1
            }
            scf.yield %flag_row : i1
        }

        %zero_i32 = arith.constant 0 : i32
        %one_i32 = arith.constant 1 : i32
        %status = scf.if %flag -> (i32) {
            scf.yield %one_i32 : i32
        } else {
            scf.yield %zero_i32 : i32
        }
        return %status : i32
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[3.210474, 8.427460, 9.545900, 6.862150, 5.536941, 3.455073, 2.898771, 1.320165, 2.434845, 1.070678, 8.900000, 7.541546, 0.249262, 5.976002, 2.817282, 4.723959, 8.395547, 6.565848, 3.048041, 2.825731, 0.334004, 9.370249, 2.323050, 5.283057, 5.390377, 0.015960, 1.642157, 1.382872, 1.800071, 4.903358, 9.334157, 9.515794, 6.320278, 8.890508, 5.146555, 3.518882, 4.466106, 9.418660, 4.586674, 9.042907, 4.422372, 5.563196, 1.062042, 3.422025, 3.578374, 4.894632, 0.507644, 5.892912, 8.507649, 2.595629]> : tensor<50xf64>
        %row_ptr = arith.constant dense<[0, 7, 11, 19, 21, 27, 31, 36, 39, 47, 50]> : tensor<11xindex>
        %col_ind = arith.constant dense<[0, 1, 2, 3, 4, 6, 8, 4, 6, 8, 9, 0, 2, 3, 4, 5, 6, 8, 9, 7, 9, 0, 2, 4, 5, 6, 8, 0, 1, 3, 5, 0, 2, 4, 6, 8, 1, 4, 8, 0, 1, 2, 4, 5, 6, 8, 9, 1, 3, 6]> : tensor<50xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<50xindex>), tensor<50xf64> to tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }

}
