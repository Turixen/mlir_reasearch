// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @sparse_dense_matmul(%sparse: tensor<10x10xf64, #CSR>,%dense: tensor<10x10xf64>,%init: tensor<10x10xf64>
    ) -> tensor<10x10xf64> {
        %res = linalg.matmul ins(%sparse, %dense: tensor<10x10xf64, #CSR>, tensor<10x10xf64>) 
            outs(%init: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %res : tensor<10x10xf64>
    }

    func.func @main() -> i32 {
        %c0 = arith.constant 0 : index
        %c1 = arith.constant 1 : index
        %rows = arith.constant 10 : index
        %cols = arith.constant 10 : index
        %zero_f64 = arith.constant 0.0 : f64

        %init = tensor.empty() : tensor<10x10xf64>
        %sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %dense = arith.constant dense<[[1.520225, 4.504211, 8.561736, 7.651803, 6.558555, 2.999378, 1.335246, 7.774690, 6.682364, 2.977109], [3.452792, 2.508782, 1.266355, 8.125580, 2.327071, 0.658673, 1.319530, 5.320701, 8.790853, 8.606708], [4.424185, 6.838945, 5.906853, 9.814615, 2.843749, 4.557675, 8.656760, 2.581264, 1.997969, 4.330592], [3.900072, 8.938769, 1.682991, 7.725171, 4.097130, 9.758684, 6.190352, 6.385391, 2.649568, 8.227361], [7.175468, 3.139997, 2.602193, 4.343348, 3.575897, 5.978209, 3.227249, 6.791247, 5.654642, 1.340890], [6.390234, 5.140946, 4.982097, 7.243731, 4.390257, 2.473158, 7.965382, 4.035673, 4.630987, 0.082792], [6.984298, 8.022417, 7.050961, 1.774432, 0.936816, 1.060267, 7.697011, 7.112504, 2.502650, 1.319728], [7.049770, 3.710738, 0.187068, 8.681839, 9.668148, 2.923033, 1.268153, 4.715167, 2.065007, 5.489030], [2.706153, 9.708828, 5.076671, 3.338120, 1.175685, 9.636075, 0.349778, 2.914969, 5.379550, 6.337618], [3.615268, 2.023167, 5.170797, 4.571947, 7.687365, 6.803281, 6.693171, 5.948410, 1.301116, 5.323824]]> : tensor<10x10xf64>

        %computed = call @sparse_dense_matmul(%sparse, %dense, %init) : (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %expected = arith.constant dense<[[176.545861, 207.041659, 223.227663, 256.623530, 163.251889, 185.206281, 182.124244, 229.594826, 184.043990, 148.340977], [55.819152, 72.151191, 102.123119, 127.638110, 85.445886, 40.075951, 55.166426, 103.754234, 108.527975, 53.650070], [91.749811, 110.013383, 100.294378, 126.507076, 52.399378, 56.458382, 102.264700, 102.948780, 88.643814, 80.372969], [132.650512, 208.279749, 176.526789, 189.863547, 127.771394, 134.346828, 163.628514, 205.972430, 129.599930, 111.739770], [181.712632, 222.309848, 204.124263, 275.177744, 142.319864, 168.595159, 172.456925, 235.934351, 212.057995, 173.066182], [138.626242, 141.902747, 119.278786, 249.820592, 166.431483, 94.029394, 125.075118, 130.679362, 104.090032, 125.866762], [141.008339, 183.671183, 182.033051, 209.891275, 116.869725, 138.093094, 120.663685, 193.875959, 180.754519, 131.093825], [38.556256, 26.858579, 12.176394, 84.257990, 30.012987, 8.647859, 13.566759, 54.378534, 85.154549, 86.210787], [203.057044, 236.954680, 235.097724, 225.284079, 149.336014, 199.841820, 207.169383, 237.036419, 167.328177, 132.407406], [78.976327, 45.272797, 19.419716, 97.623174, 115.518877, 52.176592, 32.377235, 63.915952, 25.713182, 70.764658]]> : tensor<10x10xf64>

        // Validate each element
        %false = arith.constant false : i1
        %flag = scf.for %i = %c0 to %rows step %c1 iter_args(%f_iter = %false) -> (i1) {
            %flag_row = scf.for %j = %c0 to %cols step %c1 iter_args(%f_in = %f_iter) -> (i1) {
                %cmp_c = tensor.extract %computed[%i, %j] : tensor<10x10xf64>
                %cmp_e = tensor.extract %expected[%i, %j] : tensor<10x10xf64>
                %neq = arith.cmpf une, %cmp_c, %cmp_e : f64
                %new_f = arith.or %f_in, %neq : i1
                scf.yield %new_f : i1
            }
            scf.yield %flag_row : i1
        }

        %zero_i32 = arith.constant 0 : i32
        %one_i32 = arith.constant 1 : i32
        %status = scf.if %flag -> (i32) {
            scf.yield %one_i32 : i32
        } else {
            scf.yield %zero_i32 : i32
        }
        return %status : i32
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[9.218619, 2.657775, 9.239056, 8.746008, 3.797430, 3.021026, 4.155987, 8.567451, 3.222316, 4.955799, 2.223267, 4.249926, 5.810359, 1.742291, 4.883464, 0.510101, 9.830048, 8.733958, 4.612650, 7.755633, 8.595412, 6.870629, 8.611456, 2.209995, 8.122939, 4.755710, 2.477249, 5.294879, 2.131378, 9.588291, 2.590268, 9.113040, 8.878163, 4.663848, 5.577276, 6.480384, 4.159360, 4.132558, 9.494315, 0.819085, 6.550553, 8.307716, 9.770155, 0.130510, 8.128383, 4.643573, 4.444250, 9.501206, 0.403164, 3.016095]> : tensor<50xf64>
        %row_ptr = arith.constant dense<[0, 7, 10, 16, 20, 27, 32, 38, 40, 47, 50]> : tensor<11xindex>
        %col_ind = arith.constant dense<[0, 1, 2, 4, 6, 8, 9, 0, 1, 5, 0, 1, 2, 4, 6, 8, 0, 3, 5, 6, 0, 1, 2, 3, 4, 6, 8, 0, 1, 2, 5, 7, 0, 1, 2, 4, 6, 8, 1, 7, 0, 2, 4, 5, 6, 8, 9, 7, 8, 9]> : tensor<50xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<50xindex>), tensor<50xf64> -> tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }

}
