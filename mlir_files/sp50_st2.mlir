// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @matmul(%t : tensor<10x10xf64, #CSR>, %s : tensor<10x10xf64>, %out : tensor<10x10xf64>)
        -> tensor<10x10xf64> {
        %0 = linalg.matmul
            ins(%t, %s: tensor<10x10xf64, #CSR>, tensor<10x10xf64>)
            outs(%out: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %0 : tensor<10x10xf64>
    }

    func.func @main() -> i64 {
        %c = tensor.empty() : tensor<10x10xf64>
        %t_sparse = call @test_assemble() : () -> tensor<10x10xf64, #CSR>
        %s = arith.constant dense<[
            [6.167607766719401, 0.8276241968094089, 7.8928141334228545, 1.363356143882104, 5.579862704019836, 7.473131946708706, 9.810689113863841, 8.06221405290533, 8.867011329883038, 5.0700811981740515], [5.249751121875919, 8.661270458243886, 4.315451826929717, 2.479414545728557, 2.9531998289741015, 9.457716523789138, 4.192623559400982, 5.611567583074391, 1.9096902367819724, 2.992062882301788], [4.685947329164522, 3.7789152764375733, 5.754471525196973, 3.2548413951326993, 8.978591234653639, 9.243328615556427, 1.5805204076553148, 4.298872489359927, 4.143686241005112, 7.88526862858903], [5.472225647211822, 7.574434306887408, 0.3797606011322574, 4.211070705024414, 4.890264266207351, 4.885415101392057, 3.0953977940252075, 0.17167460249374544, 9.018429490093515, 1.669710448064603], [4.980260826173401, 5.0701350567559045, 1.778219663514633, 7.760666231681272, 2.518671635053588, 7.796833922301774, 0.32612732560376223, 6.3390601869405385, 7.625448953477694, 4.919349863712213], [7.003480739191787, 0.9339263319819291, 8.406676697233308, 9.680475012066218, 5.696177385279495, 0.5534845069010441, 2.0444955928029995, 8.395282549356564, 8.855559096631517, 2.2269847453966864], [7.586211386734465, 1.444459234969443, 5.230105435980144, 0.5700436363802375, 2.0023266019641284, 5.666028615552569, 7.218143509085026, 5.761760673120876, 9.693742047101356, 8.258802537544923], [9.51580546855261, 2.7763717663009633, 6.659060921828408, 9.95714968815085, 9.544425658710608, 1.233191264231368, 4.137798918499435, 3.7204244924855967, 8.241199688257055, 5.804460880026743], [8.828022245836886, 2.4488798063567643, 1.451975379124415, 5.627018546516412, 7.617122720973612, 0.6226332451825889, 0.7689456799879546, 2.3219608068718935, 3.0750233058905465, 0.8295546543536692], [7.615972217187941, 7.7300700360267935, 7.955123524643567, 5.2250732348651585, 0.33899982026085573, 2.181373924191904, 4.853548807413911, 8.49894908780905, 5.925533689524389, 7.930446994600279]
        ]> : tensor<10x10xf64>
        %result_matrix = call @matmul(%t_sparse, %s, %c) :
            (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %c1 = arith.constant 1 : index
        %element_f64 = tensor.extract %result_matrix[%c1, %c1] : tensor<10x10xf64>
        %element_i64 = arith.fptosi %element_f64 : f64 to i64
        return %element_i64 : i64
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[3.475517, 1.793691, 3.080129, 7.015500, 5.714167, 5.079300, 9.821001, 0.808499, 1.016542, 7.592846, 1.906731, 9.200517, 7.086792, 7.602614, 8.715426, 0.557259, 1.306858, 3.875919, 4.399858, 8.196258, 9.763336, 1.698409, 4.032367, 9.705629, 1.764879, 9.685477, 8.820967, 0.132125, 3.221494, 9.970090, 2.900769, 6.470839, 9.287451, 2.036686, 2.495982, 5.451136, 5.882727, 2.282188, 4.362751, 5.131683, 9.407395, 4.524188, 5.057014, 1.933125, 7.217132, 6.015533, 4.649845, 0.256810, 6.590479, 2.277291]> : tensor<50xf64>
        %row_ptr = arith.constant dense<[0, 7, 9, 16, 18, 27, 29, 35, 37, 44, 50]> : tensor<11xindex>
        %col_ind = arith.constant dense<[0, 2, 3, 4, 6, 8, 9, 4, 5, 0, 1, 2, 4, 6, 8, 9, 3, 7, 0, 1, 2, 3, 4, 5, 6, 8, 9, 3, 5, 0, 2, 4, 6, 8, 9, 4, 8, 0, 1, 2, 3, 4, 6, 8, 0, 2, 3, 5, 8, 9]> : tensor<50xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<50xindex>), tensor<50xf64> to tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }
    
}
