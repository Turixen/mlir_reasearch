// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @matmul(%t : tensor<10x10xf64, #CSR>, %s : tensor<10x10xf64>, %out : tensor<10x10xf64>)
        -> tensor<10x10xf64> {
        %0 = linalg.matmul
            ins(%t, %s: tensor<10x10xf64, #CSR>, tensor<10x10xf64>)
            outs(%out: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %0 : tensor<10x10xf64>
    }

    func.func @main() -> i64 {
        %c = tensor.empty() : tensor<10x10xf64>
        %t_sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %s = arith.constant dense<[
            [1.6626870553793571, 8.235224027636036, 1.4693451971758908, 5.874542214246406, 4.355607496383339, 2.188985414097475, 8.69943294432546, 0.526921637137503, 9.538085835266582, 6.3623946129196165], [4.562522601915312, 4.554696897602836, 1.305946794348135, 1.3260063775267406, 0.6349758626321111, 0.8619121621782488, 5.2652364750444125, 8.442292754087683, 9.785943045888427, 3.8919384515826616], [0.5731745413912315, 2.548454035271247, 0.965706375183335, 1.4276902568996275, 9.067801908056287, 3.7432586134821753, 1.0112870016315378, 9.284008008199443, 2.973559597821894, 0.01122258344244842], [3.00685439775501, 4.5635782494306945, 6.640612094945504, 0.17351492887409004, 2.3145581771348778, 9.318721607661818, 4.06398601261551, 3.8511417395206937, 8.374834639158761, 3.740414890799566], [6.219055216681966, 5.131716132990306, 7.011554926776782, 2.9267984937897387, 0.7734371907926685, 0.8017881834405294, 1.3998237044855966, 8.659499417031055, 6.194809672816835, 3.9297738912183577], [2.7283425154142984, 3.3321848370425258, 1.6612565409613733, 2.9295377133963774, 0.9422544740904093, 0.10025997222312455, 4.797926607795729, 6.800813514530073, 1.7807770685689694, 8.410978170520734], [7.413379831960597, 7.468954332219239, 4.403936689703501, 0.030412783618838368, 7.162780135957032, 7.971998755796072, 2.3262484205185654, 4.6442633789402645, 0.6231086554694454, 4.787713008368755], [0.5048577086521944, 5.113897586552184, 0.11006911646426754, 4.687053450695343, 7.092396399306727, 8.73159793268693, 7.995786009911624, 9.819134021279645, 0.3447629622692705, 4.8050623342302154], [6.2788453108381015, 5.495698827041032, 4.06461153967847, 1.9165050343077061, 1.4505373030650603, 3.654819276804929, 3.994765416224163, 1.01556930531421, 7.642981650863243, 6.1620725105370155], [8.573310889117927, 7.226295628554538, 6.658714614650338, 1.2115809864932092, 6.957006368365013, 8.198081150499632, 6.66812406315433, 3.3033901157150867, 4.558344598197727, 5.4550681180520675]
        ]> : tensor<10x10xf64>
        %result_matrix = call @matmul(%t_sparse, %s, %c) :
            (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %c1 = arith.constant 1 : index

        %element_f64 = tensor.extract %result_matrix[%c1, %c1] : tensor<10x10xf64>
        %element_i64 = arith.fptosi %element_f64 : f64 to i64
        return %element_i64 : i64
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[8.646946, 7.183248, 0.083031, 5.975625, 2.860818, 2.433744, 4.591842, 6.258777, 9.479228, 0.804401, 5.970277, 0.093164, 0.074836, 0.277926, 3.881050, 9.588592, 8.258709, 5.679709, 0.846123, 6.237664, 3.821727, 3.337294, 2.850954, 7.834713, 1.272623, 1.404267, 2.211772, 7.261221, 1.115943, 7.838160, 5.435428, 2.074969, 6.298808, 0.391759, 3.587305, 1.696945, 4.728224, 3.117779, 4.145790, 9.148862, 2.279244, 3.747478, 1.289842, 9.743529, 3.961198, 8.023656, 9.667176, 8.800751, 1.587833, 0.891744]> : tensor<50xf64>
        %row_ptr = arith.constant dense<[0, 6, 9, 14, 20, 25, 28, 35, 39, 45, 50]> : tensor<11xindex>
        %col_ind = arith.constant dense<[0, 1, 3, 4, 6, 9, 3, 7, 9, 0, 1, 2, 6, 8, 0, 1, 3, 6, 7, 9, 0, 1, 2, 5, 8, 3, 8, 9, 0, 2, 3, 4, 6, 8, 9, 5, 6, 7, 8, 4, 5, 6, 7, 8, 9, 0, 3, 4, 6, 9]> : tensor<50xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<50xindex>), tensor<50xf64> to tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }
    
}
