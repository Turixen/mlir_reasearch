// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @sparse_dense_matmul(%sparse: tensor<10x10xf64, #CSR>,%dense: tensor<10x10xf64>,%init: tensor<10x10xf64>
    ) -> tensor<10x10xf64> {
        %res = linalg.matmul ins(%sparse, %dense: tensor<10x10xf64, #CSR>, tensor<10x10xf64>) 
            outs(%init: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %res : tensor<10x10xf64>
    }

    func.func @main() -> i32 {
        %c0 = arith.constant 0 : index
        %c1 = arith.constant 1 : index
        %rows = arith.constant 10 : index
        %cols = arith.constant 10 : index
        %zero_f64 = arith.constant 0.0 : f64

        %init = tensor.empty() : tensor<10x10xf64>
        %sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %dense = arith.constant dense<[[3.392633, 3.221228, 1.823079, 7.281741, 3.938931, 4.789984, 7.146472, 3.823764, 8.326719, 4.394998], [7.154453, 0.134756, 3.749425, 0.917129, 9.413792, 1.285218, 8.841272, 0.690967, 8.964884, 6.034289], [0.773456, 5.270966, 0.581517, 3.691703, 9.277654, 9.912020, 7.027832, 9.080173, 3.291143, 1.861045], [3.329766, 7.609125, 2.153734, 5.523239, 0.253500, 6.608327, 9.140750, 6.468467, 0.499541, 7.275671], [8.839866, 0.942718, 5.736234, 6.460641, 6.287403, 3.614345, 3.370882, 8.634531, 2.715495, 8.129982], [7.987399, 3.665432, 9.102005, 6.479499, 7.623146, 2.190134, 9.813282, 9.883853, 0.136533, 7.077864], [1.017368, 2.979621, 2.911363, 7.145530, 0.554393, 2.949417, 8.005251, 2.135783, 5.667758, 6.820334], [0.954494, 2.633786, 9.149681, 5.591089, 7.063791, 9.417467, 9.852254, 1.181843, 7.560649, 5.568098], [3.148873, 8.634110, 5.518370, 9.356704, 1.265468, 1.572669, 9.513955, 2.342017, 2.134956, 3.046331], [6.552070, 8.510777, 7.926484, 2.105248, 3.240238, 0.652592, 9.308737, 6.395225, 5.781577, 9.145353]]> : tensor<10x10xf64>

        %computed = call @sparse_dense_matmul(%sparse, %dense, %init) : (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %expected = arith.constant dense<[[193.987012, 228.091255, 231.434648, 302.041952, 285.708243, 325.520979, 459.259880, 274.539622, 308.109404, 335.818964], [91.629951, 134.836783, 70.829087, 152.898268, 120.671282, 180.757527, 201.691419, 196.550135, 75.387159, 160.879319], [190.558756, 102.441181, 190.757800, 125.478380, 152.152315, 58.455627, 195.653213, 199.268132, 75.496257, 197.521865], [215.075879, 172.971961, 213.783136, 231.730187, 241.414410, 183.769783, 377.035873, 208.310345, 306.148704, 308.233959], [17.226131, 46.826512, 27.524415, 69.972162, 11.922115, 47.428135, 88.845956, 40.500920, 44.991553, 71.068044], [35.000270, 1.640037, 19.736934, 11.218251, 39.300645, 8.847842, 33.708452, 13.211776, 33.292068, 30.372168], [258.402671, 236.932340, 226.690124, 226.268228, 256.832083, 199.620987, 403.982908, 316.944668, 205.544182, 319.125836], [69.947429, 57.898335, 104.003283, 85.937375, 93.860266, 60.271611, 128.297427, 96.882149, 30.063488, 76.893746], [46.851483, 59.440706, 50.044051, 60.869415, 99.668159, 82.589599, 102.462362, 114.414606, 23.165878, 52.920932], [102.598367, 131.376854, 133.676868, 123.307180, 96.766474, 95.983841, 211.131479, 109.456120, 171.225662, 164.215685]]> : tensor<10x10xf64>

        // Validate each element
        %false = arith.constant "false" : i1
        %flag = scf.for %i = %c0 to %rows step %c1 iter_args(%f_iter = %false) -> (i1) {
            %flag_row = scf.for %j = %c0 to %cols step %c1 iter_args(%f_in = %f_iter) -> (i1) {
                %cmp_c = tensor.extract %computed[%i, %j] : tensor<10x10xf64>
                %cmp_e = tensor.extract %expected[%i, %j] : tensor<10x10xf64>
                %neq = arith.cmpf une, %cmp_c, %cmp_e : f64
                %new_f = arith.ori %f_in, %neq : i1
                scf.yield %new_f : i1
            }
            scf.yield %flag_row : i1
        }

        %zero_i32 = arith.constant 0 : i32
        %one_i32 = arith.constant 1 : i32
        %status = scf.if %flag -> (i32) {
            scf.yield %one_i32 : i32
        } else {
            scf.yield %zero_i32 : i32
        }
        return %status : i32
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[8.954592, 4.996225, 8.918765, 8.144472, 5.561999, 8.075319, 9.271325, 4.214293, 8.669092, 9.151264, 5.610714, 4.772370, 0.982196, 7.140532, 9.211630, 0.702136, 7.045588, 9.647035, 7.799511, 3.557218, 0.723529, 5.725092, 8.378008, 3.850180, 8.940340, 0.776297, 2.780249, 7.242335, 3.330871, 1.263561, 6.703565, 5.661822, 6.422844, 8.485480, 4.403798, 7.305134, 0.751617, 9.750747, 1.593301, 7.620124, 2.669689, 1.683747, 6.713282, 0.811994, 4.877095, 9.561261, 0.660117, 1.165149, 3.833318, 9.633326]> : tensor<50xf64>
        %row_ptr = arith.constant dense<[0, 8, 12, 17, 25, 28, 30, 38, 42, 45, 50]> : tensor<11xindex>
        %col_ind = arith.constant dense<[0, 1, 2, 3, 4, 6, 7, 9, 2, 3, 4, 6, 1, 4, 5, 7, 9, 0, 1, 2, 3, 4, 6, 7, 9, 2, 3, 6, 1, 4, 0, 1, 2, 3, 4, 5, 6, 9, 2, 5, 7, 8, 2, 3, 5, 0, 3, 6, 7, 9]> : tensor<50xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<50xindex>), tensor<50xf64> to tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }

}
