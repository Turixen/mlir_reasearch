// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @sparse_dense_matmul(%sparse: tensor<10x10xf64, #CSR>,%dense: tensor<10x10xf64>,%init: tensor<10x10xf64>
    ) -> tensor<10x10xf64> {
        %res = linalg.matmul ins(%sparse, %dense: tensor<10x10xf64, #CSR>, tensor<10x10xf64>) 
            outs(%init: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %res : tensor<10x10xf64>
    }

    func.func @main() -> i32 {
        %c0 = arith.constant 0 : index
        %c1 = arith.constant 1 : index
        %rows = arith.constant 10 : index
        %cols = arith.constant 10 : index
        %zero_f64 = arith.constant 0.0 : f64

        %init = tensor.empty() : tensor<10x10xf64>
        %sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %dense = arith.constant dense<[[4.759366, 0.277043, 9.677203, 2.236322, 8.295209, 2.387520, 4.631374, 6.222171, 4.997184, 0.925195], [9.656807, 3.199791, 2.089581, 3.126393, 2.863096, 7.655740, 0.478798, 9.537691, 5.193922, 4.736396], [2.064825, 5.902053, 8.405345, 8.797206, 4.015795, 7.555719, 6.268680, 0.849045, 3.825825, 6.364167], [2.447554, 5.328797, 9.984831, 9.478342, 5.841687, 1.471453, 7.692451, 7.252318, 6.809467, 5.976701], [1.423004, 5.088380, 7.507552, 2.636743, 1.022418, 9.373795, 5.977699, 1.391559, 1.799789, 6.601967], [7.665263, 9.434609, 8.704583, 2.106506, 6.051164, 8.925510, 9.971442, 6.492580, 3.537403, 5.740202], [8.020313, 0.557013, 0.766694, 3.547009, 5.126939, 0.290895, 4.889415, 7.311236, 5.758442, 5.298278], [9.400046, 7.276802, 1.401064, 1.361580, 4.197885, 3.455851, 7.173607, 0.852732, 0.291462, 5.618765], [4.878533, 6.627837, 5.961927, 4.286925, 0.675394, 7.902037, 2.402559, 4.049503, 3.828935, 2.754215], [5.761085, 8.331628, 9.264952, 1.140613, 1.084250, 4.523609, 1.946473, 3.726382, 4.219484, 0.052121]]> : tensor<10x10xf64>

        %computed = call @sparse_dense_matmul(%sparse, %dense, %init) : (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %expected = arith.constant dense<[[131.887098, 91.135018, 161.256717, 94.083416, 102.788114, 124.991049, 129.876309, 141.394299, 117.593829, 125.961957], [55.572704, 79.602290, 78.339626, 56.627673, 31.316731, 88.915663, 68.831571, 29.706796, 35.407709, 66.872893], [11.796002, 3.908615, 2.552470, 3.818958, 3.497335, 9.351655, 0.584863, 11.650500, 6.344490, 5.785612], [229.060811, 163.904330, 194.971540, 115.271446, 100.818154, 210.878794, 124.881857, 214.803831, 164.697729, 155.822675], [74.970466, 76.392031, 62.594392, 59.627193, 58.862517, 30.617712, 88.346622, 44.378688, 38.316312, 68.938967], [155.307396, 149.243684, 254.484311, 144.209309, 142.841009, 181.897471, 179.365769, 130.883366, 144.257369, 150.339588], [263.216287, 271.881844, 291.296451, 199.416093, 153.027724, 234.618559, 207.340037, 183.833339, 183.838363, 181.554500], [96.669443, 69.781094, 161.634726, 39.456468, 120.710756, 94.550312, 117.367335, 103.709748, 74.038058, 55.777639], [111.573612, 129.394721, 281.111580, 165.374060, 159.249673, 134.897917, 188.999858, 159.426565, 154.730491, 141.739995], [197.835303, 123.562871, 177.538629, 151.505358, 133.553564, 107.202724, 128.377504, 229.924291, 178.127429, 137.060823]]> : tensor<10x10xf64>

        // Validate each element
        %false = arith.constant "false" : i1
        %flag = scf.for %i = %c0 to %rows step %c1 iter_args(%f_iter = %false) -> (i1) {
            %flag_row = scf.for %j = %c0 to %cols step %c1 iter_args(%f_in = %f_iter) -> (i1) {
                %cmp_c = tensor.extract %computed[%i, %j] : tensor<10x10xf64>
                %cmp_e = tensor.extract %expected[%i, %j] : tensor<10x10xf64>
                %neq = arith.cmpf une, %cmp_c, %cmp_e : f64
                %new_f = arith.or %f_in, %neq : i1
                scf.yield %new_f : i1
            }
            scf.yield %flag_row : i1
        }

        %zero_i32 = arith.constant 0 : i32
        %one_i32 = arith.constant 1 : i32
        %status = scf.if %flag -> (i32) {
            scf.yield %one_i32 : i32
        } else {
            scf.yield %zero_i32 : i32
        }
        return %status : i32
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[3.775714, 2.691788, 2.950132, 8.380799, 6.914892, 2.311528, 2.379059, 0.755474, 3.243516, 2.732549, 3.794108, 1.221522, 0.929137, 9.956978, 1.683176, 7.841022, 7.214158, 2.676487, 7.340891, 5.345115, 6.583798, 6.717067, 0.030886, 8.974301, 7.117979, 6.668613, 0.753550, 5.869227, 2.257090, 3.248477, 8.677691, 4.147727, 3.755650, 7.395043, 8.032869, 9.409773, 9.820741, 1.680136, 6.201757, 8.485553, 3.050366, 9.586982, 6.964456, 2.088407, 2.562799, 1.362170, 8.580871, 9.590635, 7.093506, 4.881492]> : tensor<50xf64>
        %row_ptr = arith.constant dense<[0, 6, 11, 12, 19, 21, 28, 36, 39, 45, 50]> : tensor<11xindex>
        %col_ind = arith.constant dense<[0, 1, 3, 4, 6, 9, 2, 3, 4, 7, 8, 1, 0, 1, 3, 4, 6, 8, 9, 3, 7, 0, 1, 2, 4, 6, 7, 9, 0, 1, 2, 3, 6, 7, 8, 9, 0, 4, 5, 0, 2, 3, 4, 6, 9, 0, 1, 3, 6, 9]> : tensor<50xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<50xindex>), tensor<50xf64> -> tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }

}
