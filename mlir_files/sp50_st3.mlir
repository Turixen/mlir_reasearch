// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @matmul(%t : tensor<10x10xf64, #CSR>, %s : tensor<10x10xf64>, %out : tensor<10x10xf64>)
        -> tensor<10x10xf64> {
        %0 = linalg.matmul
            ins(%t, %s: tensor<10x10xf64, #CSR>, tensor<10x10xf64>)
            outs(%out: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %0 : tensor<10x10xf64>
    }

    func.func @main() -> i64 {
        %c = tensor.empty() : tensor<10x10xf64>
        %t_sparse = call @test_assemble() : () -> tensor<10x10xf64, #CSR>
        %s = arith.constant dense<[
            [1.8705298660330516, 2.675556024698198, 3.311693784343052, 0.8893846057524935, 9.859949734458581, 1.1282002904186073, 5.504347686808474, 5.229926483079447, 2.223570682776904, 4.059706614493587], [8.972552561948499, 4.895365434778869, 0.55602297684468, 3.3865854478302984, 0.8084305786087975, 4.209050120121201, 4.391285277952558, 0.19359676825994265, 5.993188611002429, 6.412081394064943], [2.77518177741093, 5.418810287394469, 6.31664302957601, 8.299977325754606, 3.2586700210393085, 0.7294041178449762, 9.432280837552923, 7.9701086527825495, 7.934644551032783, 4.730428609692785], [4.6187192273290245, 1.6931108949079254, 2.980008092258731, 9.27866259494214, 7.406203352999886, 4.551753727543369, 0.995270647054971, 3.3951387707583547, 3.457436816945627, 0.8973991356288591], [5.368889620208483, 3.917675114671726, 0.6412911187960069, 4.047477957811109, 5.590499101007611, 4.999486977439677, 9.061939472087511, 2.1814463016628407, 5.485087282314666, 1.323868028613775], [1.388572959173222, 1.0077311023230406, 0.25533661260728757, 5.824243246690298, 5.49082122819489, 1.9507240079677413, 9.959041368283117, 3.870713961691945, 2.7611519733566237, 6.50648045157642], [7.796067584953525, 7.154974761282661, 8.004809603044137, 5.193409094993599, 1.7978176686240133, 8.094531738781747, 6.832270550739393, 1.341184111330842, 5.083085258804232, 3.5405040034774125], [7.630054646372062, 4.195732919012017, 2.735184460112875, 9.468576395979092, 3.2700047392484697, 8.925046846473412, 3.244175093268643, 9.368765075217798, 6.513920258575546, 5.673569782869112], [4.173454687003343, 4.345028612355225, 5.759939562917729, 9.223765286031998, 2.8318275384997826, 6.963617629308036, 0.5539556494520437, 7.621741191404331, 5.701706237983051, 2.193789433676512], [6.153473060643499, 7.379294232053447, 0.6464188414742311, 9.37844595801539, 5.921025943060016, 3.9181473273660616, 3.0359435133723487, 4.9093861187026535, 4.952820481306448, 5.147636270521763]
        ]> : tensor<10x10xf64>
        %result_matrix = call @matmul(%t_sparse, %s, %c) :
            (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %c1 = arith.constant 1 : index
        %element_f64 = tensor.extract %result_matrix[%c1, %c1] : tensor<10x10xf64>
        %element_i64 = arith.fptosi %element_f64 : f64 to i64
        return %element_i64 : i64
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[1.563240, 0.877185, 8.799281, 6.262158, 5.624270, 5.957146, 7.287902, 8.860371, 0.771031, 2.812880, 7.077410, 6.009587, 2.173174, 6.078998, 6.373139, 5.860894, 7.357750, 2.016673, 9.272295, 7.870248, 5.735903, 7.675862, 8.575195, 8.397329, 2.353926, 0.659179, 0.265306, 0.694552, 9.262970, 4.186494, 9.913103, 6.290603, 4.251239, 7.565774, 9.421213, 7.824158, 1.066116, 4.908464, 1.088836, 1.224238, 5.012700, 8.884180, 1.423902, 8.544604, 6.086885, 8.900941, 4.945295, 4.641919, 7.042271, 8.586563]> : tensor<50xf64>
        %row_ptr = arith.constant dense<[0, 8, 11, 14, 20, 24, 29, 33, 38, 44, 50]> : tensor<11xindex>
        %col_ind = arith.constant dense<[0, 1, 2, 3, 6, 7, 8, 9, 1, 3, 5, 0, 2, 9, 0, 3, 4, 6, 7, 9, 3, 5, 6, 9, 1, 3, 5, 7, 8, 0, 3, 6, 9, 4, 6, 7, 8, 9, 2, 3, 4, 5, 6, 8, 0, 2, 3, 5, 6, 9]> : tensor<50xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<50xindex>), tensor<50xf64> to tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }
    
}
