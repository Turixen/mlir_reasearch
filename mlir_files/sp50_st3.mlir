// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @sparse_dense_matmul(%sparse: tensor<10x10xf64, #CSR>,%dense: tensor<10x10xf64>,%init: tensor<10x10xf64>
    ) -> tensor<10x10xf64> {
        %res = linalg.matmul ins(%sparse, %dense: tensor<10x10xf64, #CSR>, tensor<10x10xf64>) 
            outs(%init: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %res : tensor<10x10xf64>
    }

    func.func @main() -> i32 {
        %c0 = arith.constant 0 : index
        %c1 = arith.constant 1 : index
        %rows = arith.constant 10 : index
        %cols = arith.constant 10 : index
        %zero_f64 = arith.constant 0.0 : f64

        %init = tensor.empty() : tensor<10x10xf64>
        %sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %dense = arith.constant dense<[[9.082895, 2.864399, 0.236543, 4.371657, 3.186893, 8.686762, 5.687122, 6.244947, 1.273120, 4.400783], [1.699240, 3.675113, 0.409410, 9.866000, 6.094836, 7.014595, 6.474420, 8.297469, 8.060008, 1.988050], [3.590700, 7.309269, 9.156577, 1.332551, 0.808169, 5.206087, 5.347426, 8.833395, 0.738733, 1.531638], [7.187866, 6.848894, 1.883905, 0.887568, 2.308481, 9.822781, 8.204104, 4.693157, 8.105909, 5.839033], [5.886308, 0.215700, 6.166067, 4.056190, 4.058084, 0.875696, 3.487414, 0.058770, 1.581016, 1.055779], [9.949593, 6.928589, 2.685393, 1.511273, 8.281972, 3.997025, 2.231936, 7.513114, 0.949923, 8.189557], [2.759773, 3.169723, 3.792932, 6.928625, 7.386666, 8.118135, 0.897293, 3.945778, 8.951704, 8.639308], [5.997213, 9.508661, 6.496320, 4.087212, 2.474320, 8.815352, 6.212265, 2.051411, 8.396299, 6.319008], [0.535466, 7.397628, 4.632298, 2.845040, 0.287244, 8.905602, 8.493715, 9.079534, 7.324523, 2.516978], [3.142368, 9.807825, 2.864247, 7.204748, 0.375614, 9.064358, 8.281628, 4.955677, 6.637057, 7.122031]]> : tensor<10x10xf64>

        %computed = call @sparse_dense_matmul(%sparse, %dense, %init) : (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %expected = arith.constant dense<[[160.065516, 208.691364, 94.667204, 162.974019, 105.404968, 270.687246, 188.224147, 199.031366, 176.822607, 198.728012], [195.133483, 161.379478, 118.499451, 237.188495, 217.676423, 273.490838, 190.674346, 247.610840, 221.702263, 188.140071], [24.132878, 39.486334, 18.580002, 61.923710, 38.810142, 55.727908, 48.492101, 47.699972, 60.596123, 24.259475], [145.902661, 179.742317, 131.566559, 127.491199, 67.244660, 214.422019, 171.182590, 171.815697, 115.826758, 137.401435], [7.919880, 13.553226, 13.445120, 20.869600, 20.444931, 28.113972, 8.041869, 16.786563, 29.360905, 25.345174], [67.791322, 124.436425, 68.001207, 171.188220, 130.818187, 204.163939, 138.022076, 190.910383, 194.731295, 117.403836], [109.763484, 124.139860, 59.498454, 69.376292, 63.297451, 173.309785, 115.402263, 79.504250, 146.403167, 124.590724], [77.895165, 125.651189, 79.524451, 115.760262, 80.592618, 176.722324, 152.820058, 150.643708, 162.427657, 84.657352], [31.297966, 39.943793, 31.074440, 41.738214, 14.409242, 39.066878, 44.239789, 20.023008, 31.594217, 31.865031], [77.194413, 76.332832, 24.553654, 76.789781, 83.529896, 91.577221, 67.890275, 97.566518, 73.709594, 76.255214]]> : tensor<10x10xf64>

        // Validate each element
        %false = arith.constant false : i1
        %flag = scf.for %i = %c0 to %rows step %c1 iter_args(%f_iter = %false) -> (i1) {
            %flag_row = scf.for %j = %c0 to %cols step %c1 iter_args(%f_in = %f_iter) -> (i1) {
                %cmp_c = tensor.extract %computed[%i, %j] : tensor<10x10xf64>
                %cmp_e = tensor.extract %expected[%i, %j] : tensor<10x10xf64>
                %neq = arith.cmpf une, %cmp_c, %cmp_e : f64
                %new_f = arith.or %f_in, %neq : i1
                scf.yield %new_f : i1
            }
            scf.yield %flag_row : i1
        }

        %zero_i32 = arith.constant 0 : i32
        %one_i32 = arith.constant 1 : i32
        %status = scf.if %flag -> (i32) {
            scf.yield %one_i32 : i32
        } else {
            scf.yield %zero_i32 : i32
        }
        return %status : i32
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[7.467499, 0.045271, 3.845926, 5.633013, 1.213398, 6.066839, 8.775796, 6.655710, 9.890273, 6.538664, 5.262955, 8.731188, 5.463415, 5.220256, 0.427487, 2.125336, 5.825776, 8.340103, 2.096700, 2.427431, 3.290647, 7.828525, 2.742263, 0.657104, 1.232046, 9.538483, 1.710716, 7.119740, 6.952486, 1.425095, 8.145315, 4.128918, 3.551089, 1.775908, 0.549054, 5.841700, 3.004802, 2.801310, 0.648732, 1.832283, 1.551116, 7.620564, 3.180262, 4.002703, 0.649355, 5.100472, 1.283186, 4.722748, 1.067208, 1.104718]> : tensor<50xf64>
        %row_ptr = arith.constant dense<[0, 7, 13, 16, 22, 24, 29, 34, 42, 44, 50]> : tensor<11xindex>
        %col_ind = arith.constant dense<[0, 3, 5, 6, 7, 8, 9, 0, 1, 4, 5, 6, 8, 1, 4, 7, 0, 2, 3, 4, 6, 9, 6, 8, 0, 1, 5, 6, 8, 0, 3, 6, 7, 9, 0, 1, 3, 4, 5, 6, 7, 8, 4, 9, 0, 1, 3, 5, 6, 9]> : tensor<50xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<50xindex>), tensor<50xf64> -> tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }

}
