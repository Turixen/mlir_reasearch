// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @matmul(%t : tensor<10x10xf64, #CSR>, %s : tensor<10x10xf64>, %out : tensor<10x10xf64>)
        -> tensor<10x10xf64> {
        %0 = linalg.matmul
            ins(%t, %s: tensor<10x10xf64, #CSR>, tensor<10x10xf64>)
            outs(%out: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %0 : tensor<10x10xf64>
    }

    func.func @main() -> i64 {
        %c = tensor.empty() : tensor<10x10xf64>
        %t_sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %s = arith.constant dense<[
            [4.258648675426366, 1.1420561690186826, 9.512690297312819, 4.521769656785857, 5.659695565197818, 0.5380149693013891, 3.942021819006667, 7.5013263884911225, 9.520043172956544, 9.37166809287761], [2.16527746960266, 3.80463845392786, 2.250753031879764, 4.3145392939993386, 3.7518081240614274, 0.240934741620078, 5.717058440925742, 6.262923240006263, 3.162904394408268, 2.8435748507140843], [7.941249170513092, 8.87028925648837, 2.9297048459609343, 9.55758466834638, 7.864360448539186, 3.3792602270063443, 4.103836949358868, 8.170527274382763, 5.774298701191246, 9.792187288938955], [7.405819859187217, 2.491117075670397, 0.7075935474160577, 2.8458552356643327, 6.90744164730262, 7.335345446350895, 5.98883721804076, 7.130650738320759, 0.3559495356152642, 7.096788444621409], [1.4381647003573828, 2.9377899807887053, 7.842006448744343, 3.7678248100090395, 5.357706871351988, 8.689738730010145, 4.055543083316154, 4.928290091704498, 2.73451556245339, 0.9462982153036337], [6.810573884065865, 3.855772801758557, 5.9322540199747, 3.2925305683985773, 2.8189293301821317, 6.0358609956188864, 5.618066882268837, 2.641540805044599, 2.351669088840884, 9.201669505611395], [0.11168793533662513, 7.279163498265577, 4.56060995020313, 0.0915222101735036, 8.353480133674594, 6.099518537413746, 0.49217614043251645, 8.470391107637727, 7.564958260046345, 2.211520704097988], [0.4492881842519969, 7.909616269428806, 5.5406939964241815, 8.096549081429467, 0.40536695019396496, 0.16377406396074323, 5.863765031642545, 9.208702809404564, 3.667400132747823, 9.051071467261721], [8.53933933566601, 7.272862955787539, 1.1912516627276937, 0.5386063799751317, 6.485764843528275, 3.5150763908021263, 1.8535247584228975, 7.322704256063536, 8.33974125273102, 5.678201073730627], [2.0853196618757863, 0.9477902366260416, 3.0010508491188634, 8.400610084805786, 7.832198003072751, 5.512094003261017, 3.6507924128565126, 3.4543875562897597, 6.295131426764097, 6.77062274563345]
        ]> : tensor<10x10xf64>
        %result_matrix = call @matmul(%t_sparse, %s, %c) :
            (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %c1 = arith.constant 1 : index
        %element_f64 = tensor.extract %result_matrix[%c1, %c1] : tensor<10x10xf64>
        %element_i64 = arith.fptosi %element_f64 : f64 to i64
        return %element_i64 : i64
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[3.925863, 8.944720, 6.886919, 5.778374, 5.218358, 7.509724, 2.646007, 0.258854, 8.491940, 8.031201, 0.563043, 5.130996, 3.541815, 7.207205, 8.839939, 5.523330, 9.858399, 2.388222, 6.741396, 2.479505, 7.049533, 1.423098, 1.111972, 3.770393, 3.583841, 6.398327, 4.562632, 8.738068, 0.583493, 1.542292, 2.058912, 9.517554, 1.447432, 2.895029, 4.680755, 4.576642, 8.575544, 7.603125, 1.179790, 6.059266, 1.137907, 4.477691, 7.366235, 0.517632, 2.778901, 5.783115, 9.983055, 2.316344, 7.977467, 2.719606]> : tensor<50xf64>
        %row_ptr = arith.constant dense<[0, 7, 9, 11, 16, 19, 26, 32, 39, 44, 50]> : tensor<11xindex>
        %col_ind = arith.constant dense<[0, 1, 3, 6, 7, 8, 9, 4, 5, 2, 5, 0, 3, 5, 6, 9, 5, 6, 8, 0, 1, 2, 3, 5, 8, 9, 0, 1, 3, 6, 8, 9, 0, 1, 2, 4, 5, 7, 9, 1, 2, 7, 8, 9, 0, 2, 3, 6, 8, 9]> : tensor<50xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<50xindex>), tensor<50xf64> to tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }
    
}
