// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @sparse_dense_matmul(%sparse: tensor<10x10xf64, #CSR>,%dense: tensor<10x10xf64>,%init: tensor<10x10xf64>
    ) -> tensor<10x10xf64> {
        %res = linalg.matmul ins(%sparse, %dense: tensor<10x10xf64, #CSR>, tensor<10x10xf64>) 
            outs(%init: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %res : tensor<10x10xf64>
    }

    func.func @main() -> i32 {
        %c0 = arith.constant 0 : index
        %c1 = arith.constant 1 : index
        %rows = arith.constant 10 : index
        %cols = arith.constant 10 : index
        %zero_f64 = arith.constant 0.0 : f64

        %init = tensor.empty() : tensor<10x10xf64>
        %sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %dense = arith.constant dense<[[8.314425, 2.449100, 2.490286, 3.279217, 3.533011, 0.438432, 2.419496, 8.661476, 0.593897, 4.715714], [1.157229, 8.900655, 7.705007, 6.770718, 1.666409, 2.642616, 8.315323, 7.270303, 9.888425, 2.660278], [9.576322, 2.255988, 6.411455, 4.804287, 1.523512, 8.387737, 4.016674, 6.698587, 2.684771, 2.640469], [3.164697, 4.191580, 9.315719, 7.991062, 0.147805, 8.790271, 3.215790, 9.249957, 7.703242, 8.358273], [6.084735, 6.670547, 6.302261, 3.218170, 0.305832, 7.343648, 7.506532, 8.686433, 4.697763, 7.019724], [5.805484, 5.508930, 0.112468, 7.215127, 0.647474, 5.696650, 0.920032, 5.579056, 5.815670, 5.958716], [9.624387, 5.175101, 9.507971, 7.837767, 9.954682, 8.203408, 0.125094, 8.069741, 7.316722, 8.617290], [1.010070, 5.067357, 4.439208, 9.285035, 1.132478, 3.646124, 1.398633, 6.087776, 7.199952, 5.955674], [4.398164, 6.666244, 1.299954, 8.273579, 5.089479, 5.795668, 2.683239, 3.360565, 0.929167, 4.807436], [8.457864, 7.303420, 7.180787, 3.427433, 0.250817, 2.414465, 6.904474, 9.661951, 9.753856, 7.722722]]> : tensor<10x10xf64>

        %computed = call @sparse_dense_matmul(%sparse, %dense, %init) : (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %expected = arith.constant dense<[[136.451951, 175.106177, 215.810219, 172.522057, 53.981206, 145.093315, 140.583117, 231.616748, 225.321095, 179.917889], [88.524315, 85.029967, 102.290466, 106.193505, 56.645149, 71.439330, 37.418043, 114.991759, 118.037864, 108.851741], [173.828279, 162.736061, 232.498778, 191.685500, 29.192824, 230.363853, 165.183607, 254.332672, 194.161759, 169.148545], [81.270923, 42.404581, 70.429033, 63.578893, 33.881270, 55.324602, 32.292202, 100.946911, 51.230255, 74.200064], [256.169939, 210.481425, 208.952687, 203.006808, 126.674684, 146.683293, 130.805900, 288.338481, 247.095831, 227.002399], [221.573299, 180.001782, 203.666362, 153.232960, 52.232364, 113.578234, 181.095144, 273.766523, 205.468187, 161.795284], [219.314632, 262.163481, 274.850423, 333.453905, 138.219111, 256.378150, 175.715907, 334.271271, 256.094928, 263.611364], [154.156225, 41.165837, 72.785857, 68.516229, 46.383459, 67.338211, 54.097998, 135.973049, 26.039352, 66.469629], [189.430648, 170.605313, 145.876802, 167.546663, 120.172156, 135.906169, 93.221395, 180.132051, 151.903764, 179.620149], [121.167056, 86.049612, 132.748836, 100.941087, 83.242224, 118.297403, 45.657052, 135.714425, 107.051244, 127.473279]]> : tensor<10x10xf64>

        // Validate each element
        %false = arith.constant "false" : i1
        %flag = scf.for %i = %c0 to %rows step %c1 iter_args(%f_iter = %false) -> (i1) {
            %flag_row = scf.for %j = %c0 to %cols step %c1 iter_args(%f_in = %f_iter) -> (i1) {
                %cmp_c = tensor.extract %computed[%i, %j] : tensor<10x10xf64>
                %cmp_e = tensor.extract %expected[%i, %j] : tensor<10x10xf64>
                %neq = arith.cmpf une, %cmp_c, %cmp_e : f64
                %new_f = arith.ori %f_in, %neq : i1
                scf.yield %new_f : i1
            }
            scf.yield %flag_row : i1
        }

        %zero_i32 = arith.constant 0 : i32
        %one_i32 = arith.constant 1 : i32
        %status = scf.if %flag -> (i32) {
            scf.yield %one_i32 : i32
        } else {
            scf.yield %zero_i32 : i32
        }
        return %status : i32
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[0.448674, 6.787719, 8.073016, 0.899891, 3.275236, 1.041417, 6.826763, 4.932918, 5.734331, 4.168420, 6.149292, 9.717707, 9.195723, 5.867354, 1.524296, 4.909660, 0.881336, 3.599142, 0.087120, 1.448693, 0.729643, 6.383844, 5.618580, 6.029494, 8.900555, 8.976669, 7.643947, 7.712095, 6.353739, 1.440512, 9.894861, 5.574763, 8.356356, 3.357822, 8.700543, 2.127496, 4.332473, 5.780122, 9.395535, 0.212729, 9.889580, 7.511240, 6.785781, 9.869033, 9.543314, 0.522987, 2.633676, 3.622929, 7.997900, 1.119016]> : tensor<50xf64>
        %row_ptr = arith.constant dense<[0, 7, 10, 15, 21, 26, 31, 40, 42, 45, 50]> : tensor<11xindex>
        %col_ind = arith.constant dense<[0, 1, 3, 4, 6, 8, 9, 6, 7, 9, 1, 2, 3, 4, 5, 0, 2, 3, 5, 6, 9, 0, 1, 5, 6, 9, 0, 1, 2, 3, 9, 0, 1, 2, 3, 4, 6, 7, 8, 9, 0, 2, 6, 8, 9, 0, 3, 4, 6, 9]> : tensor<50xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<50xindex>), tensor<50xf64> -> tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }

}
