// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @matmul(%t : tensor<10x10xf64, #CSR>, %s : tensor<10x10xf64>, %out : tensor<10x10xf64>)
        -> tensor<10x10xf64> {
        %0 = linalg.matmul
            ins(%t, %s: tensor<10x10xf64, #CSR>, tensor<10x10xf64>)
            outs(%out: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %0 : tensor<10x10xf64>
    }

    func.func @main() -> i64 {
        %c = tensor.empty() : tensor<10x10xf64>
        %t_sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %s = arith.constant dense<[
            [4.91311559402579, 4.0539212355909, 0.6095855365793634, 1.5101519567610533, 1.6597826411762384, 4.11061458748015, 5.645514282973849, 9.634420097912795, 0.3978709500601729, 9.706687045463493], [3.0716624553469627, 1.481323066386978, 5.936859451140877, 5.594823184329534, 4.087503572201042, 0.4133194630467041, 8.361346286657804, 2.9048614673101456, 7.0839572394449775, 7.983504406429719], [3.14875252496004, 0.0210585594950341, 8.06721516369005, 3.307352730798072, 4.532468791003038, 8.871036266727613, 9.143215880323966, 7.865675668293633, 8.85336442301991, 9.301745791427985], [0.10717947862998622, 5.162658353858969, 9.819140155919634, 9.027560684323674, 1.970199323088454, 0.833220109403825, 7.314992126637599, 0.708196479142903, 2.070665501477451, 3.0385270662472195], [4.131245469556733, 4.101128334465303, 9.198217965098426, 0.6991882907508151, 5.667765474162537, 3.5686944632073345, 3.402050145854224, 9.008021330969969, 2.740064577919774, 5.0236262000228304], [0.148691806011646, 7.766423463853361, 6.338513522847551, 3.8114274730891875, 3.1427923270779723, 6.776793466024936, 2.3694707018474737, 3.4108139453711916, 9.782415617403236, 2.1307050849321394], [2.852331866751674, 7.338604590892758, 6.505740487980526, 4.918930094347402, 5.9409494879131275, 4.268872360571644, 2.9775208782234577, 0.4566217626960267, 3.4446744279570938, 1.5360980695249826], [6.3564161744573475, 1.578802843141932, 5.5662228590069684, 7.21203646150787, 3.000696418462238, 4.587137017165742, 7.8302997780411125, 4.875668516767009, 1.171355050792362, 5.845269945686625], [8.876848024244838, 1.9723934761078121, 7.827154973822873, 6.692255651729219, 6.2014274653080035, 1.9511464127357403, 9.971380596839456, 2.4375853779129777, 2.886377669086526, 1.7493796363292324], [4.9073740210411305, 4.208249946599526, 7.534716647530837, 5.951784871303225, 2.628534818795952, 2.5486457404311413, 4.819458455276646, 8.71725500069515, 5.174506785519782, 4.631716441635069]
        ]> : tensor<10x10xf64>
        %result_matrix = call @matmul(%t_sparse, %s, %c) :
            (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %c1 = arith.constant 1 : index

        %element_f64 = tensor.extract %result_matrix[%c1, %c1] : tensor<10x10xf64>
        %element_i64 = arith.fptosi %element_f64 : f64 to i64
        return %element_i64 : i64
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[3.207399, 6.923251, 8.438839, 8.781692, 2.358453, 4.192272, 6.770903, 6.286129, 7.836981, 4.304522, 0.391330, 3.172406, 0.946542, 2.529441, 6.440508, 6.423926, 5.191581, 2.647081, 2.912985]> : tensor<19xf64>
        %row_ptr = arith.constant dense<[0, 2, 3, 3, 6, 8, 8, 8, 12, 13, 19]> : tensor<11xindex>
        %col_ind = arith.constant dense<[1, 8, 5, 3, 4, 7, 0, 8, 2, 3, 8, 9, 9, 1, 4, 5, 6, 7, 8]> : tensor<19xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<19xindex>), tensor<19xf64> to tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }
    
}
