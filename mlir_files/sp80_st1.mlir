// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @matmul(%t : tensor<10x10xf64, #CSR>, %s : tensor<10x10xf64>, %out : tensor<10x10xf64>)
        -> tensor<10x10xf64> {
        %0 = linalg.matmul
            ins(%t, %s: tensor<10x10xf64, #CSR>, tensor<10x10xf64>)
            outs(%out: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %0 : tensor<10x10xf64>
    }

    func.func @main() -> i64 {
        %c = tensor.empty() : tensor<10x10xf64>
        %t_sparse = call @test_assemble() : () -> tensor<10x10xf64, #CSR>
        %s = arith.constant dense<[
            [9.67388920114218, 9.887279593379404, 9.899696121764736, 1.1746264866476452, 3.3228427085999703, 5.67076553888044, 2.734545062907827, 7.25144098767116, 4.432977761938806, 6.098120906285435], [4.0193736525147585, 9.085191627551021, 2.034668467338393, 7.316320632010525, 3.2323542444592968, 2.7921861810304813, 3.6504558825360633, 4.2395954346964775, 5.230341348377281, 9.565617257467467], [1.261419646972024, 4.5166197460598925, 4.969073248384145, 4.9840644982037485, 3.204248622635787, 9.175376209435841, 0.8032731483141708, 0.20502776554704893, 1.6835124450087957, 3.6908067303488403], [7.254920594965374, 1.874108578336694, 9.377026907069686, 3.9738187425211393, 1.0916847563073018, 6.0101785278352535, 5.174079424710369, 4.189779471097655, 6.3882768885504895, 9.518272813767906], [6.964062529405038, 6.321334504381305, 5.45850006829673, 5.729390412103832, 4.40442896644556, 6.673856968033064, 1.0774791216623747, 0.9989961254383894, 2.565030521795836, 7.225942709159636], [9.704474861265956, 9.458051813842165, 6.990844707934938, 0.7868821103225698, 9.669198969563404, 7.8493763289024585, 2.1702601347581476, 4.317234300351491, 0.7316810381180927, 1.107029707922892], [7.446137713758702, 0.9213704841497872, 9.086760810381548, 2.321401781796306, 9.967069327244914, 4.949607420916642, 2.0706872610516944, 8.56550954083729, 9.555986202518309, 3.361483634624507], [0.18764906547603988, 1.3504162911810547, 3.716606030983989, 5.611337451476356, 5.883187330134538, 6.114678373303443, 8.073039065936213, 3.0417691240844027, 5.131870138306608, 2.4345306895490437], [5.533827057739897, 7.674149354641038, 7.567313906147607, 0.8019140749733733, 5.111273149417973, 6.8352433358848375, 3.134135548616026, 2.483037076956689, 6.306792169226081, 7.72420127668009], [8.683166124709654, 3.5808761333755337, 7.525701393675171, 7.006489865631283, 8.056360744699104, 4.83178747335259, 5.324253629216442, 7.852999965888106, 9.463104450997804, 6.7290825036055155]
        ]> : tensor<10x10xf64>
        %result_matrix = call @matmul(%t_sparse, %s, %c) :
            (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %c1 = arith.constant 1 : index
        %element_f64 = tensor.extract %result_matrix[%c1, %c1] : tensor<10x10xf64>
        %element_i64 = arith.fptosi %element_f64 : f64 to i64
        return %element_i64 : i64
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[0.284365, 2.872936, 2.759347, 0.446787, 1.325483, 2.754401, 3.816059, 7.832599, 7.345303, 8.679420, 5.639032, 1.822879, 3.392207, 7.760302, 4.244815, 7.060400, 1.319071, 8.790380, 0.937985]> : tensor<19xf64>
        %row_ptr = arith.constant dense<[0, 0, 0, 0, 5, 9, 11, 14, 14, 17, 19]> : tensor<11xindex>
        %col_ind = arith.constant dense<[2, 3, 6, 7, 9, 1, 3, 6, 7, 5, 7, 1, 7, 8, 0, 2, 9, 1, 3]> : tensor<19xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<19xindex>), tensor<19xf64> to tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }
    
}
