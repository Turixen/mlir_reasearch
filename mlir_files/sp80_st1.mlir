// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @matmul(%t : tensor<10x10xf64, #CSR>, %s : tensor<10x10xf64>, %out : tensor<10x10xf64>)
        -> tensor<10x10xf64> {
        %0 = linalg.matmul
            ins(%t, %s: tensor<10x10xf64, #CSR>, tensor<10x10xf64>)
            outs(%out: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %0 : tensor<10x10xf64>
    }

    func.func @main() -> i64 {
        %c = tensor.empty() : tensor<10x10xf64>
        %t_sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %s = arith.constant dense<[
            [0.7423285346597475, 5.994110082073717, 4.111007852539198, 7.513171887514308, 7.194051984125608, 2.8599209348948254, 6.857418634904253, 9.538765456303919, 1.414371067224458, 8.450774814861346], [0.18334834363077923, 7.098591843436583, 0.17689185732057022, 4.62580212409763, 6.825869615147925, 1.45363829674374, 4.509062788129542, 3.0836168858496995, 9.102943879452072, 6.971892190775596], [1.9745188877393494, 8.702804903706356, 1.8674287685008528, 6.170578929566071, 0.3278912477243856, 8.765276071029877, 6.76453766663562, 4.706453898460294, 9.111248210817816, 0.992060815269904], [7.335700663986598, 2.8460384564430106, 3.5619744682957153, 6.0420734867007395, 9.138967186788397, 3.7512518628629286, 3.759218590723863, 7.917763361479766, 7.727838635258983, 9.74857217155042], [1.0243434016760578, 1.1765610803998416, 4.849292954253416, 5.69690336127565, 0.1944296240303378, 1.549746888338679, 5.621435225854374, 9.809964539485282, 0.4806273114993287, 6.879657243862906], [0.6533413696989998, 9.686726663639291, 2.0756115775237713, 2.5089730609649075, 4.473576327938988, 1.9842784497551658, 0.08440269468700246, 8.064251230592166, 3.8583652774053268, 3.4451539674580447], [7.292054809738807, 6.212112860854841, 5.5499124273426315, 4.6457158224794535, 0.6557044862371075, 0.3286661160351312, 1.1406914328033657, 5.384259415810972, 5.0276491371991385, 1.8757112997045577], [5.940050281551157, 6.877434379258371, 2.389270891669426, 1.2277473781409998, 2.417201590077458, 3.783051655512246, 2.304591717537383, 8.256413401656088, 4.901629555930435, 5.8330901908045005], [1.7482604191537665, 7.411588896505981, 8.939506338176434, 9.41903010818837, 8.738894339992884, 0.09630325346119739, 5.178781937857146, 1.4597429081754631, 1.255237824967178, 3.4419939616681217], [2.5211578644973898, 6.333101481055326, 6.122793188217309, 4.54201110616605, 3.029482496391267, 1.7109347813386633, 9.054332650087852, 1.8543819131805839, 1.455646722479762, 2.4441907169164887]
        ]> : tensor<10x10xf64>
        %result_matrix = call @matmul(%t_sparse, %s, %c) :
            (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %c1 = arith.constant 1 : index
        %element_f64 = tensor.extract %result_matrix[%c1, %c1] : tensor<10x10xf64>
        %element_i64 = arith.fptosi %element_f64 : f64 to i64
        return %element_i64 : i64
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[5.116603, 0.145466, 2.199831, 6.498520, 4.062324, 9.341426, 7.696342, 0.083452, 3.655927, 2.297780, 2.164755, 6.184419, 9.601177, 4.604066, 2.252350, 5.033422, 7.342394, 7.244518, 9.795383]> : tensor<19xf64>
        %row_ptr = arith.constant dense<[0, 1, 4, 5, 6, 8, 11, 14, 16, 16, 19]> : tensor<11xindex>
        %col_ind = arith.constant dense<[9, 6, 7, 9, 2, 8, 3, 4, 6, 8, 9, 0, 2, 8, 4, 9, 0, 2, 6]> : tensor<19xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<19xindex>), tensor<19xf64> to tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }
    
}
