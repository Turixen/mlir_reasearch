// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @matmul(%t : tensor<10x10xf64, #CSR>, %s : tensor<10x10xf64>, %out : tensor<10x10xf64>)
        -> tensor<10x10xf64> {
        %0 = linalg.matmul
            ins(%t, %s: tensor<10x10xf64, #CSR>, tensor<10x10xf64>)
            outs(%out: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %0 : tensor<10x10xf64>
    }

    func.func @main() -> i64 {
        %c = tensor.empty() : tensor<10x10xf64>
        %t_sparse = call @test_assemble() : () -> tensor<10x10xf64, #CSR>
        %s = arith.constant dense<[
            [4.195798465936814, 9.530354031630306, 5.211219774066059, 0.35412156452040766, 1.423250947448348, 4.755429540683128, 5.579002607797541, 0.27243927748050734, 3.8770935351724614, 1.433182258733483], [5.318509571968195, 3.319726642351778, 8.077707223044508, 6.730254780297283, 8.58250801307111, 4.781283037166478, 7.5478224967239695, 2.2035926118751026, 9.268246463374908, 4.974710812188258], [8.565207923391014, 0.7176639780440952, 4.923391524794551, 9.821292047779552, 2.6442943647466652, 9.305073746283695, 0.4915110766738373, 9.248572872472709, 6.448143609314798, 6.591574054231877], [8.954114383033577, 0.2008321863229645, 2.9610637512991076, 6.001628140594831, 2.6254079605803327, 7.4913557259037304, 5.388177804730162, 2.6774551467936822, 5.190828393422542, 3.7861086320268447], [2.0531062341189865, 6.279710942892523, 9.814661654468146, 6.594760697238816, 4.652654459534408, 6.063993364952226, 3.187913853834705, 1.3094490490482957, 9.797830128942508, 4.697489811038334], [2.4543603522328974, 7.728687068869302, 8.319480297332362, 1.3136755058761296, 0.5624283834721355, 5.342370088319052, 3.539385885865255, 8.456617619553402, 4.058952809626117, 0.621608995763191], [3.5582112569446367, 9.583806798134912, 8.737190671134291, 7.7716147108207965, 5.124071210721155, 5.549330097075368, 0.09455481880406458, 5.46785653927847, 8.96122741636635, 5.095065755607847], [4.727488518151097, 5.556249465800292, 6.618028791905149, 2.5935019139012807, 7.686525320183396, 9.691711635127142, 1.5869186639841182, 1.8207050218625953, 7.356344663926251, 1.1548459923276655], [5.848300226832386, 9.838529967166583, 3.7249300957775313, 3.305120558688551, 4.267809804363598, 1.629421650711772, 9.419213795403165, 6.713580992417526, 7.569176845459722, 0.8569800473816103], [6.519733893578841, 7.48182528247054, 9.125985882559327, 7.461192918034799, 9.165017977708246, 9.94834649760255, 3.8502158350657667, 2.2077825030993194, 7.250164398601823, 2.050966447856376]
        ]> : tensor<10x10xf64>
        %result_matrix = call @matmul(%t_sparse, %s, %c) :
            (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %c1 = arith.constant 1 : index
        %element_f64 = tensor.extract %result_matrix[%c1, %c1] : tensor<10x10xf64>
        %element_i64 = arith.fptosi %element_f64 : f64 to i64
        return %element_i64 : i64
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[0.462963, 1.224863, 7.968294, 3.613377, 7.706129]> : tensor<5xf64>
        %row_ptr = arith.constant dense<[0, 0, 1, 1, 1, 2, 3, 3, 4, 5, 5]> : tensor<11xindex>
        %col_ind = arith.constant dense<[1, 9, 4, 2, 4]> : tensor<5xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<5xindex>), tensor<5xf64> to tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }
    
}
