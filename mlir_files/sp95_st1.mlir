// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @matmul(%t : tensor<10x10xf64, #CSR>, %s : tensor<10x10xf64>, %out : tensor<10x10xf64>)
        -> tensor<10x10xf64> {
        %0 = linalg.matmul
            ins(%t, %s: tensor<10x10xf64, #CSR>, tensor<10x10xf64>)
            outs(%out: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %0 : tensor<10x10xf64>
    }

    func.func @main() -> i64 {
        %c = tensor.empty() : tensor<10x10xf64>
        %t_sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %s = arith.constant dense<[
            [0.12152206025748846, 6.5525041008525955, 7.408572069245668, 3.4231620102856395, 0.39631463423365876, 7.0878054655107, 9.257232325378691, 3.4725451299552033, 5.729033235444671, 1.162462543431303], [0.8769670759580483, 6.566317107821298, 7.496867589074558, 6.107090938800623, 9.569480645811646, 6.394794515813587, 1.8789386231509986, 9.06471261777161, 5.993178039147792, 0.9630493046609989], [5.126153824966837, 7.695776263934164, 1.737109066869269, 5.419959176528342, 3.1579356780416457, 6.157955259413353, 9.831635308376208, 2.8637265384003796, 4.854640709764466, 8.594778902616994], [3.9391685789860786, 3.6395045692908945, 0.45819423726936814, 4.170862600915756, 7.340105333863711, 4.61667878317519, 6.786924102347883, 2.708857788776331, 2.825011757034648, 0.42769540919115445], [4.868415279995921, 4.262902694826048, 8.151681031686072, 7.700735996772843, 7.61437068641734, 7.295815906584852, 8.44242757862007, 0.32790804262586737, 9.513005533583655, 8.155010142384642], [6.732108370992219, 7.196858024342667, 1.955934391611912, 6.329450607292153, 8.110100948150201, 3.163781969203675, 2.616017338212534, 3.294875252141818, 9.962382133400276, 9.984225220074897], [5.825024592539698, 4.042582603247312, 3.052966005196005, 4.519982742679111, 3.4749512282418324, 7.165623765877034, 9.90713468693684, 0.09461655539513947, 9.797096785915118, 6.760477748159099], [5.138244796565289, 8.561906982264885, 0.730815523931786, 3.505533199273483, 4.973848036035658, 1.4722163317964188, 9.672268804113676, 5.671148287010538, 2.5959842196963367, 8.08543731714468], [4.980600331852569, 0.13551486743975438, 0.04060013201832691, 0.8597355509844518, 1.992098530420594, 7.199679100035357, 6.321480105534097, 1.2751493719606888, 2.5875540493867644, 6.1381960478026905], [0.4073082612962886, 1.19049124138647, 2.2377163743619644, 9.33019098046491, 4.430013509899952, 4.646118091045595, 9.9811572180288, 7.042027346158525, 6.340225167055326, 5.4313446903335505]
        ]> : tensor<10x10xf64>
        %result_matrix = call @matmul(%t_sparse, %s, %c) :
            (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %c1 = arith.constant 1 : index

        %element_f64 = tensor.extract %result_matrix[%c1, %c1] : tensor<10x10xf64>
        %element_i64 = arith.fptosi %element_f64 : f64 to i64
        return %element_i64 : i64
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[0.405069, 6.656422, 9.158348, 5.125500, 9.509253]> : tensor<5xf64>
        %row_ptr = arith.constant dense<[0, 0, 2, 3, 4, 4, 4, 4, 5, 5, 5]> : tensor<11xindex>
        %col_ind = arith.constant dense<[0, 6, 7, 5, 2]> : tensor<5xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<5xindex>), tensor<5xf64> to tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }
    
}
