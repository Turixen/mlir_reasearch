// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @matmul(%t : tensor<10x10xf64, #CSR>, %s : tensor<10x10xf64>, %out : tensor<10x10xf64>)
        -> tensor<10x10xf64> {
        %0 = linalg.matmul
            ins(%t, %s: tensor<10x10xf64, #CSR>, tensor<10x10xf64>)
            outs(%out: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %0 : tensor<10x10xf64>
    }

    func.func @main() -> i64 {
        %c = tensor.empty() : tensor<10x10xf64>
        %t_sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %s = arith.constant dense<[
            [0.699632289471086, 0.692740153046465, 5.821573495927823, 4.32839153703873, 0.019161829250579077, 8.064711938278046, 4.928652168365694, 2.124498285754619, 0.5612320616755195, 7.429120966530731], [3.3016703558274854, 1.352705707610592, 4.09605189896469, 7.109428337949332, 9.752288963448997, 5.4719501027833655, 1.643636619159059, 9.644151381497839, 7.069603192508573, 4.507159476911106], [4.816334104421029, 3.703061145656098, 0.3490374613295677, 0.757418033519287, 7.899576173281865, 8.03632398835287, 6.942711790605438, 6.531703912384352, 7.080419814308465, 3.7861483810630983], [2.281255532878621, 7.540217327906118, 6.203008967350124, 6.1977403796233155, 8.736498919276354, 7.7682242270847635, 0.4321104811153098, 4.572978281547938, 7.9695004753329135, 9.185094393705757], [4.100214537248349, 7.9344855956739435, 3.633637347290024, 4.651259398647262, 0.35172911201522994, 8.460483739504948, 9.28140849647006, 0.7085994692563247, 8.046669603344464, 7.333687975063517], [5.879465959964501, 5.615534163329165, 9.460367180683532, 5.212228793080032, 5.046864670881322, 4.73618110207961, 5.083862298621209, 9.818177112640928, 5.116083744190213, 4.631153385012575], [2.9380192715846642, 6.035991778082018, 6.5649826288394175, 2.68770288779695, 2.727354577897003, 7.232843637530749, 7.650610012817902, 2.9539963347209164, 6.819012572033801, 6.926505450848168], [0.8982052404835505, 4.362972815791952, 7.308607576572605, 7.324559473174591, 2.681406310351615, 8.062281145941315, 1.487491562059926, 3.3168622957958984, 8.047790141840643, 8.899438105915095], [3.6937159433143774, 8.855584609076475, 5.867007260470959, 9.996065907283397, 4.013512975732083, 1.8775034450439698, 2.2085665938912835, 3.301664246208804, 4.295110160445116, 7.06361166705954], [3.269812927131479, 9.526545154022013, 3.541489992727065, 2.6845102322778622, 3.140502575120716, 2.0138428165969593, 6.815396097732345, 3.7724508637972463, 6.3431298789365895, 4.485504269824813]
        ]> : tensor<10x10xf64>
        %result_matrix = call @matmul(%t_sparse, %s, %c) :
            (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %c1 = arith.constant 1 : index
        %element_f64 = tensor.extract %result_matrix[%c1, %c1] : tensor<10x10xf64>
        %element_i64 = arith.fptosi %element_f64 : f64 to i64
        return %element_i64 : i64
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[4.005156, 0.530815, 1.628640, 2.312484, 2.685434]> : tensor<5xf64>
        %row_ptr = arith.constant dense<[0, 0, 0, 0, 1, 1, 1, 2, 3, 3, 5]> : tensor<11xindex>
        %col_ind = arith.constant dense<[5, 3, 3, 2, 7]> : tensor<5xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<5xindex>), tensor<5xf64> to tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }
    
}
