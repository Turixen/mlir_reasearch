// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @matmul(%t : tensor<10x10xf64, #CSR>, %s : tensor<10x10xf64>, %out : tensor<10x10xf64>)
        -> tensor<10x10xf64> {
        %0 = linalg.matmul
            ins(%t, %s: tensor<10x10xf64, #CSR>, tensor<10x10xf64>)
            outs(%out: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %0 : tensor<10x10xf64>
    }

    func.func @main() -> i64 {
        %c = tensor.empty() : tensor<10x10xf64>
        %t_sparse = call @test_assemble() : () -> tensor<10x10xf64, #CSR>
        %s = arith.constant dense<[
            [1.0033117154398619, 4.509158926281469, 9.568959409825318, 5.281112609209011, 1.2245410683238556, 0.7770176834119458, 9.85098152159158, 2.6865838981791157, 0.5223954913900808, 0.37763833380921374], [6.68257533967738, 1.442635238361698, 9.078571759873297, 1.4863365008955154, 6.403070530817329, 2.1150842054851227, 0.012739004438530044, 1.4291924030225123, 5.0043859244868845, 2.1718195095083948], [2.6051497256536793, 0.874632673402177, 7.210082868745884, 9.630229278260968, 4.035852465614832, 2.5647314868235127, 7.496655349461289, 0.5555083064655864, 9.533849016036767, 9.872358074029695], [4.984848096524801, 0.8682779637655402, 8.603255292107887, 3.8204549998976454, 7.01420449329475, 5.818674713100553, 4.7233748228209835, 6.632725823526304, 3.359965299466726, 0.8749619991739643], [6.1892135162214625, 9.112121770981663, 2.7379738538498364, 4.974120645256015, 6.84873727524807, 6.661968222363173, 5.989092590295967, 7.499272899362124, 5.438586722584785, 4.295556476651702], [8.289527498320677, 8.821711189864867, 5.851787200996944, 9.009023643124776, 9.911563365994688, 2.2940625752360377, 2.585436966733573, 3.1435794938711616, 5.909522640130992, 3.1867765780817594], [2.60013061288742, 6.970831642188759, 4.226012988638564, 2.955567995501145, 0.35915273058891417, 3.4376315913048305, 2.620400150610015, 0.2522132773013952, 4.411045407239758, 0.18193807105936988], [8.634196067312374, 8.741325348530287, 7.853336202594084, 0.8298114641874221, 5.809603650066845, 9.086389537822244, 1.6835778445975724, 9.203945379901135, 5.569718900080963, 8.106500557030964], [6.905426085195149, 9.304077603756976, 6.876032138410011, 6.289668770827726, 6.015219709504356, 3.404868309921898, 2.162015693260033, 9.345548715694228, 1.0935006563366712, 4.899407689646416], [9.007170799344955, 8.64987881111025, 5.229771141385297, 4.582738597063926, 3.1309738833518583, 6.969202918713994, 4.7179172290059626, 1.3276131493485543, 0.9202544746957231, 5.609134075946462]
        ]> : tensor<10x10xf64>
        %result_matrix = call @matmul(%t_sparse, %s, %c) :
            (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %c1 = arith.constant 1 : index
        %element_f64 = tensor.extract %result_matrix[%c1, %c1] : tensor<10x10xf64>
        %element_i64 = arith.fptosi %element_f64 : f64 to i64
        return %element_i64 : i64
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[5.200034, 7.762770, 8.027645, 4.417478, 5.239693]> : tensor<5xf64>
        %row_ptr = arith.constant dense<[0, 2, 2, 2, 2, 2, 2, 3, 3, 5, 5]> : tensor<11xindex>
        %col_ind = arith.constant dense<[0, 2, 0, 0, 6]> : tensor<5xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<5xindex>), tensor<5xf64> to tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }
    
}
