// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @matmul(%t : tensor<10x10xf64, #CSR>, %s : tensor<10x10xf64>, %out : tensor<10x10xf64>)
        -> tensor<10x10xf64> {
        %0 = linalg.matmul
            ins(%t, %s: tensor<10x10xf64, #CSR>, tensor<10x10xf64>)
            outs(%out: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %0 : tensor<10x10xf64>
    }

    func.func @main() -> i64 {
        %c = tensor.empty() : tensor<10x10xf64>
        %t_sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %s = arith.constant dense<[
            [2.094908692069165, 0.9760942740569667, 0.4668077363642342, 7.750440959279569, 9.929084294008334, 7.386018770609696, 9.049425991929628, 2.009827067856774, 0.8689694051395402, 3.061455402015325], [1.2350881211669718, 1.8016259788384126, 6.776085681245779, 8.412019653389349, 7.403419399675264, 0.5206927330663247, 7.842654594560694, 0.8993048539046389, 3.248061396757959, 8.345227822376698], [3.363655681774691, 9.092784032729531, 6.3512699680366245, 4.128216856681557, 8.627595334686971, 3.2752014025872955, 6.7107359227005805, 7.36962993663406, 6.7602410532721136, 7.010971254233407], [9.15376251244697, 9.39604205051648, 5.663126539352566, 2.168177517399952, 0.568497860914704, 0.24012897475158668, 6.346505037256678, 4.508563831591862, 7.344308155964459, 6.82346817370499], [2.342348009911983, 8.70479465292523, 0.43674954381541675, 2.5168272937322556, 8.983707687437644, 9.310126405685603, 0.5860909900440436, 3.0899458489049647, 2.2428753230953813, 6.200946564312978], [2.171353179794364, 1.9935593732367363, 1.5029095568284456, 3.3753557300149484, 3.468281112109295, 5.47360671700281, 4.4863620777668665, 4.510147202686947, 7.9673060139603455, 0.20919104562271862], [1.2766400047881454, 4.925975946288421, 7.169083597417724, 6.572609568937863, 8.91151813587072, 8.49735953832104, 4.747152207373862, 9.52233385650362, 1.9897710877733887, 8.794182709633231], [5.165797975529975, 2.520754940868326, 2.0084674106858893, 7.771160692140832, 8.947656311819225, 0.189661979362854, 4.764793693835684, 9.607817484013124, 9.926172632923357, 7.4354657953058805], [1.7212807578205624, 9.530587682000276, 4.840178720418724, 2.4108120559109247, 8.729855905433869, 4.755448637566043, 8.493458001794123, 5.46253045948281, 2.7727558140384767, 6.568882750043593], [0.0696251807449122, 1.0963328033785524, 4.567816419512845, 8.127958839091361, 5.036044998473938, 0.9949369306871114, 5.994276464763308, 5.875089653732304, 4.141594282247998, 1.352044475528582]
        ]> : tensor<10x10xf64>
        %result_matrix = call @matmul(%t_sparse, %s, %c) :
            (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %c1 = arith.constant 1 : index
        %element_f64 = tensor.extract %result_matrix[%c1, %c1] : tensor<10x10xf64>
        %element_i64 = arith.fptosi %element_f64 : f64 to i64
        return %element_i64 : i64
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[9.643690, 7.108579, 3.388545, 3.129627, 5.158062]> : tensor<5xf64>
        %row_ptr = arith.constant dense<[0, 2, 2, 2, 2, 3, 3, 4, 4, 5, 5]> : tensor<11xindex>
        %col_ind = arith.constant dense<[0, 6, 6, 2, 2]> : tensor<5xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<5xindex>), tensor<5xf64> to tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }
    
}
