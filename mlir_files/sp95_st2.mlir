// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @matmul(%t : tensor<10x10xf64, #CSR>, %s : tensor<10x10xf64>, %out : tensor<10x10xf64>)
        -> tensor<10x10xf64> {
        %0 = linalg.matmul
            ins(%t, %s: tensor<10x10xf64, #CSR>, tensor<10x10xf64>)
            outs(%out: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %0 : tensor<10x10xf64>
    }

    func.func @main() -> i64 {
        %c = tensor.empty() : tensor<10x10xf64>
        %t_sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %s = arith.constant dense<[
            [1.3814562112079276, 7.762117020877333, 8.79442177355011, 3.56558564103185, 3.377737007492214, 8.550083727755771, 7.389523738030876, 3.8524359143010556, 2.7553943119511946, 9.604599853679284], [6.8498058484780575, 0.022833633700166667, 9.657122629040591, 9.501514732544642, 2.7031742530407934, 4.916992174497247, 6.955636384611042, 1.3837391245053698, 6.940040258222638, 5.8035988097297375], [5.086740347858502, 0.7376711018635673, 5.192381023257973, 9.707492237536288, 9.429950214849494, 5.2847046340881025, 6.080645201183428, 3.567758962329121, 4.709208474586433, 1.70103202622931], [2.267594096807949, 9.895097604689694, 0.529251602955989, 3.8741224249772643, 5.443228596295277, 2.0195568621163518, 4.177782488424886, 8.39552703330958, 4.070874756739828, 2.00485044830606], [1.3137821900417335, 4.994657234918271, 3.1199224177463014, 9.8840122577503, 5.9358166935916215, 7.22474999073799, 3.4847395005424575, 2.180515722984472, 5.867855220198357, 8.676454814367979], [5.619855902675188, 2.072207282090308, 2.205738957734388, 4.698753148157265, 6.857066261992376, 6.184330903147962, 3.3593397208717435, 2.883471303134285, 1.8409041098923717, 0.8535449816390395], [8.777240094352633, 2.7379214846262, 1.6798098781706394, 6.168031321646886, 0.2780866294824913, 9.452434635036743, 0.878391812388275, 4.542029234627001, 5.33873910850709, 3.290467444458524], [5.22747435908234, 7.500509027082294, 6.655862320653885, 4.376309315874264, 3.735054667107952, 8.125852516619712, 3.264350024127929, 9.683222709064022, 9.523905196107913, 3.326383802779991], [6.152081742891568, 2.9009922566778448, 2.1425205470642505, 0.10880432048512856, 5.6582258266022, 6.459163962920499, 5.683992699531558, 9.887950843473755, 4.989436041174544, 8.18633619553697], [0.9733199805756165, 1.5251557413664285, 4.163285757320737, 0.7484950114983036, 1.065971853661194, 3.7282019729694427, 0.15992288423223533, 1.6418629937413487, 3.3125235727979008, 5.352825664473419]
        ]> : tensor<10x10xf64>
        %result_matrix = call @matmul(%t_sparse, %s, %c) :
            (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %c1 = arith.constant 1 : index

        %element_f64 = tensor.extract %result_matrix[%c1, %c1] : tensor<10x10xf64>
        %element_i64 = arith.fptosi %element_f64 : f64 to i64
        return %element_i64 : i64
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[3.865596, 1.686905, 3.759753, 5.355862, 6.579914]> : tensor<5xf64>
        %row_ptr = arith.constant dense<[0, 2, 2, 2, 2, 3, 3, 4, 4, 5, 5]> : tensor<11xindex>
        %col_ind = arith.constant dense<[2, 6, 2, 2, 4]> : tensor<5xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<5xindex>), tensor<5xf64> to tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }
    
}
