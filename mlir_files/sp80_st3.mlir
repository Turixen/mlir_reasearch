// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @matmul(%t : tensor<10x10xf64, #CSR>, %s : tensor<10x10xf64>, %out : tensor<10x10xf64>)
        -> tensor<10x10xf64> {
        %0 = linalg.matmul
            ins(%t, %s: tensor<10x10xf64, #CSR>, tensor<10x10xf64>)
            outs(%out: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %0 : tensor<10x10xf64>
    }

    func.func @main() -> i64 {
        %c = tensor.empty() : tensor<10x10xf64>
        %t_sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %s = arith.constant dense<[
            [5.886961161141576, 8.39456534464382, 3.7495515569932634, 0.09076295770927167, 8.590368324234529, 2.4806598499432675, 3.6514889459314013, 6.4184130482482535, 7.7549085549806325, 4.992952491537307], [7.438230357946358, 1.772848617602687, 4.930317478221981, 5.225769460421855, 4.208363229156415, 8.006838269520905, 2.031421470401388, 6.459136974012901, 6.6049591739338185, 4.83744405399987], [4.2551742134074235, 1.3098391315636837, 8.78187025298682, 8.675023720929305, 8.721280507277303, 9.907739544497101, 1.5562814449219864, 2.337122033457316, 5.696365147246063, 4.2394523954433625], [8.395977670695448, 4.014097414484236, 8.386889039694786, 6.237458641107723, 5.084307436725312, 0.02476162056341824, 6.144554723574719, 0.8852797039671267, 8.345648776450155, 2.594101739105339], [5.8157448732761505, 2.9356976475617147, 9.01564874460587, 9.720474255409163, 5.669047923749364, 2.960607369946021, 5.621558904493151, 0.5092022876019053, 4.349383934033656, 1.498059158064079], [7.443527623001481, 8.968528104665177, 8.926958608770379, 5.579440718012918, 6.096936922212456, 6.060811943568827, 1.065375884928369, 3.271920576468781, 8.72955053821192, 7.313193067790747], [5.869701653983514, 6.26969067501716, 7.653104450315644, 1.5960873231213601, 0.8317954594748078, 4.226241764515931, 6.895726921893646, 5.412357485093305, 7.286871877887789, 5.022909910217244], [5.256901063161749, 7.033528971412743, 5.80169610938672, 9.505525500775713, 4.841852382961896, 1.0310438256916898, 8.994636497148804, 8.715483289338481, 5.260167481781734, 7.168948589793626], [0.6013749432491, 3.9687534891407736, 4.577068164994513, 8.16078499568517, 8.3854995302244, 6.670984933848802, 8.77578661982232, 0.725138093023826, 7.0075411150653135, 9.392791793200082], [5.228936652811038, 3.9454049251633827, 6.278019715022979, 6.502351374686305, 7.506454181732174, 8.739947136919001, 7.078114022688853, 6.328401119316514, 8.891184500805144, 6.989468004496952]
        ]> : tensor<10x10xf64>
        %result_matrix = call @matmul(%t_sparse, %s, %c) :
            (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %c1 = arith.constant 1 : index
        %element_f64 = tensor.extract %result_matrix[%c1, %c1] : tensor<10x10xf64>
        %element_i64 = arith.fptosi %element_f64 : f64 to i64
        return %element_i64 : i64
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[9.038617, 6.430869, 2.601238, 8.201855, 2.732629, 0.921603, 8.350141, 7.649042, 5.232983, 7.565038, 5.082418, 4.191877, 7.178522, 2.829003, 0.673933, 9.606382, 8.479239, 0.561284, 9.201247]> : tensor<19xf64>
        %row_ptr = arith.constant dense<[0, 4, 4, 4, 9, 10, 10, 14, 15, 15, 19]> : tensor<11xindex>
        %col_ind = arith.constant dense<[0, 3, 6, 9, 0, 1, 3, 6, 9, 5, 0, 3, 6, 9, 7, 0, 3, 6, 9]> : tensor<19xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<19xindex>), tensor<19xf64> to tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }
    
}
