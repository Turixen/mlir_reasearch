// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @matmul(%t : tensor<10x10xf64, #CSR>, %s : tensor<10x10xf64>, %out : tensor<10x10xf64>)
        -> tensor<10x10xf64> {
        %0 = linalg.matmul
            ins(%t, %s: tensor<10x10xf64, #CSR>, tensor<10x10xf64>)
            outs(%out: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %0 : tensor<10x10xf64>
    }

    func.func @main() -> i64 {
        %c = tensor.empty() : tensor<10x10xf64>
        %t_sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %s = arith.constant dense<[
            [9.764484713963705, 7.682332552092843, 4.083201249224974, 4.958090277932437, 2.52341203146748, 0.3021376640082285, 2.1746549363496848, 3.124143870513658, 7.482450397219674, 0.5967302763316185], [3.9535387387052143, 7.5522941267423525, 4.313134564697215, 5.178996091224816, 0.17154317168980193, 2.9679579444040236, 5.471893970748495, 2.3766122387778488, 4.141547814277214, 7.7110740627894625], [2.6219962742092005, 3.4771533157992094, 0.006775989747473954, 0.08164634814365135, 7.1574853462813355, 8.893991588465902, 7.224582500760891, 8.57986878794318, 1.301500663938765, 8.340160735176653], [2.3114936863648836, 4.230951026449152, 7.589347220488873, 4.78747526926851, 1.5199413689241537, 1.1857202539753708, 7.310935145036152, 3.38232137217659, 6.688208424384073, 0.9202462252160204], [1.335232413796904, 2.01925515790341, 1.1109445347769642, 8.958629246084794, 0.48729840194794094, 0.9230914365886711, 1.195895793259989, 3.979245822938635, 7.25007059556404, 4.405432658023269], [8.529979391359067, 7.245039189914085, 9.632793749144428, 3.4774824342055988, 5.072072883265157, 1.8505381340545246, 7.677310228524371, 7.868432456027913, 7.101388823340272, 6.2645338040494245], [2.884678059509839, 5.788149463188468, 5.557462618252145, 1.7078985961377202, 3.085247007645041, 8.971022326549221, 2.799996617463092, 4.967963783599487, 4.3921522608018595, 3.5583203839316035], [3.072166991257288, 1.363391603615628, 1.1280745988073015, 8.459782639149296, 6.515492243844037, 6.344591260296748, 2.418105755752765, 3.0923585946093413, 8.33148924215707, 7.224376163590815], [5.2204927186414665, 1.2521784744392461, 9.783790877292592, 6.542096925104595, 8.571967172293972, 9.688306800533136, 1.4645988623164419, 3.431329989686952, 8.63384489756346, 4.888866914912581], [1.573964678317048, 9.307465126634895, 7.294221874781344, 0.973856583314795, 8.891593628162346, 2.2843775795527477, 1.5034416228131275, 3.987511825925567, 1.0950770901554607, 7.045943382540663]
        ]> : tensor<10x10xf64>
        %result_matrix = call @matmul(%t_sparse, %s, %c) :
            (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %c1 = arith.constant 1 : index

        %element_f64 = tensor.extract %result_matrix[%c1, %c1] : tensor<10x10xf64>
        %element_i64 = arith.fptosi %element_f64 : f64 to i64
        return %element_i64 : i64
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[5.300176, 9.963978, 8.003764, 9.346294, 1.090679, 7.176792, 4.168296, 2.785056, 8.910295, 1.012162, 7.982967, 4.120568, 6.982830, 1.533650, 1.118221, 2.320909, 9.669364, 6.959641, 6.254461]> : tensor<19xf64>
        %row_ptr = arith.constant dense<[0, 4, 4, 4, 8, 9, 9, 13, 13, 14, 19]> : tensor<11xindex>
        %col_ind = arith.constant dense<[0, 3, 6, 9, 0, 3, 6, 9, 0, 0, 3, 6, 9, 1, 0, 3, 5, 6, 9]> : tensor<19xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<19xindex>), tensor<19xf64> to tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }
    
}
