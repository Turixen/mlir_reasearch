// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @matmul(%t : tensor<10x10xf64, #CSR>, %s : tensor<10x10xf64>, %out : tensor<10x10xf64>)
        -> tensor<10x10xf64> {
        %0 = linalg.matmul
            ins(%t, %s: tensor<10x10xf64, #CSR>, tensor<10x10xf64>)
            outs(%out: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %0 : tensor<10x10xf64>
    }

    func.func @main() -> i64 {
        %c = tensor.empty() : tensor<10x10xf64>
        %t_sparse = call @test_assemble() : () -> tensor<10x10xf64, #CSR>
        %s = arith.constant dense<[
            [5.70027312502916, 6.695963791339218, 2.6356432815713218, 3.547792267633465, 9.695505974279014, 9.150564245744173, 8.212564225407233, 0.4916919663398833, 9.109081447931302, 6.373106799622481], [1.4919657428754096, 1.905867025612351, 0.6279823813827234, 6.669822337176243, 0.22373456742481035, 1.8100263013226348, 1.554285177004896, 2.483772130752074, 7.99347117576771, 3.3849179129101516], [4.238125410503385, 7.941935848374536, 7.761370135740075, 6.6825805660618816, 2.3644386814298715, 6.597239214371282, 5.818829563803863, 2.974110831770144, 0.68715923667243, 3.8687678223832025], [3.6570346546733346, 9.38801761779336, 2.9847745541959703, 5.253874441425373, 6.580740421829626, 7.862785892370741, 2.8505095782910637, 1.0883669882766056, 4.402501696821474, 9.207223802086583], [3.279335751298155, 8.407447474925887, 0.29048175848352065, 6.850430700023832, 8.498729408084527, 4.653146140604578, 2.837628876476368, 2.3997112042305813, 6.8259551802140805, 0.22760970485098286], [3.5891925182223847, 3.6650408333253037, 4.070247899637857, 4.938123278918778, 1.6986418012656401, 8.381217584700103, 0.07357903441226221, 2.0869919165985893, 2.9467439328733946, 7.263121080237323], [5.621986771498397, 2.4377600819228884, 5.261508542149484, 0.8261754096161855, 4.578267746272702, 6.134644347767989, 8.712439199515762, 5.2192943354546495, 5.59923681392516, 3.680090887114449], [1.9794364991253999, 0.10977132343927498, 0.8296887232847061, 9.470368836616254, 8.850637462327498, 4.042223741866751, 6.271759825988658, 4.563788268001543, 4.270851050590476, 5.97795322378658], [6.936503791020919, 0.7590482100693685, 8.36690398746519, 8.430436643476538, 3.029360830947452, 3.8453651406707667, 0.636190666344767, 6.863311043354605, 5.225811738589737, 9.622913466897467], [1.928756226394709, 2.5837495917982753, 5.6873054657900415, 6.0042743595315535, 1.0744178167913943, 3.918554345907138, 7.379406883123768, 2.315445588327125, 7.8843850957627275, 1.15385039206105]
        ]> : tensor<10x10xf64>
        %result_matrix = call @matmul(%t_sparse, %s, %c) :
            (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %c1 = arith.constant 1 : index
        %element_f64 = tensor.extract %result_matrix[%c1, %c1] : tensor<10x10xf64>
        %element_i64 = arith.fptosi %element_f64 : f64 to i64
        return %element_i64 : i64
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[9.615738, 1.289634, 9.160835, 5.433672, 5.708613, 8.490239, 5.296042, 4.447130, 2.244919, 8.143379, 5.226656, 0.353460, 2.970028, 9.371652, 8.513277, 2.713127, 0.492093, 1.615547, 2.314669]> : tensor<19xf64>
        %row_ptr = arith.constant dense<[0, 4, 5, 5, 9, 10, 10, 14, 15, 15, 19]> : tensor<11xindex>
        %col_ind = arith.constant dense<[0, 3, 6, 9, 9, 0, 3, 6, 9, 7, 0, 3, 6, 9, 6, 0, 3, 6, 9]> : tensor<19xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<19xindex>), tensor<19xf64> to tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }
    
}
