// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @sparse_dense_matmul(%sparse: tensor<10x10xf64, #CSR>,%dense: tensor<10x10xf64>,%init: tensor<10x10xf64>
    ) -> tensor<10x10xf64> {
        %res = linalg.matmul ins(%sparse, %dense: tensor<10x10xf64, #CSR>, tensor<10x10xf64>) 
            outs(%init: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %res : tensor<10x10xf64>
    }

    func.func @main() -> i32 {
        %c0 = arith.constant 0 : index
        %c1 = arith.constant 1 : index
        %rows = arith.constant 10 : index
        %cols = arith.constant 10 : index
        %zero_f64 = arith.constant 0.0 : f64

        %init = tensor.empty() : tensor<10x10xf64>
        %sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %dense = arith.constant dense<[[9.172304, 3.159148, 5.920367, 8.560574, 3.468733, 3.845564, 2.790297, 3.099484, 5.913215, 3.469619], [1.253618, 6.803301, 6.118907, 1.160840, 5.385121, 1.529743, 5.446331, 9.872622, 9.439774, 9.527909], [9.439822, 4.920457, 4.847349, 2.384691, 6.226012, 2.179911, 8.925684, 3.180284, 2.156354, 2.108235], [7.572631, 7.399246, 9.534911, 6.580766, 1.591953, 5.177473, 6.611833, 8.232780, 9.512338, 1.187227], [9.751170, 5.049822, 4.691128, 9.687866, 4.378216, 0.642702, 1.631123, 2.121797, 9.154073, 1.363822], [4.788408, 7.177434, 0.352996, 1.717078, 7.048434, 2.949292, 6.689791, 7.014068, 7.795444, 6.892189], [0.193372, 8.447041, 0.863677, 0.739804, 5.704696, 2.679165, 3.001092, 5.185309, 5.803193, 8.974748], [8.489500, 0.833002, 4.302772, 0.351587, 7.210984, 9.749513, 2.827064, 7.541408, 6.379033, 2.681997], [5.760986, 4.244316, 5.387609, 2.885623, 8.132983, 6.367865, 4.276723, 6.702294, 8.291378, 8.793542], [0.188040, 8.197124, 9.303566, 3.935863, 6.275193, 7.581556, 3.189957, 2.405370, 1.290791, 8.997814]]> : tensor<10x10xf64>

        %computed = call @sparse_dense_matmul(%sparse, %dense, %init) : (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %expected = arith.constant dense<[[28.939934, 21.321041, 27.064297, 14.495734, 40.855503, 31.988546, 21.483833, 33.668530, 41.651187, 44.173777], [71.278101, 64.434097, 28.035370, 47.334692, 64.506476, 36.661030, 59.235576, 63.695721, 80.595649, 64.291880], [91.724703, 47.811010, 47.100643, 23.171527, 60.496807, 21.181717, 86.728933, 30.902126, 20.952827, 20.485261], [48.282144, 38.470136, 41.038149, 18.211030, 53.050509, 29.745320, 48.119846, 46.195106, 47.874400, 49.536177], [67.828279, 6.655409, 34.377717, 2.809061, 57.613361, 77.895364, 22.587298, 60.253337, 50.966348, 21.428265], [100.041274, 52.135329, 48.766253, 85.381906, 49.081467, 9.802073, 31.562729, 24.189396, 80.643956, 15.854520], [132.501450, 48.874368, 93.527916, 52.619037, 105.238789, 117.209191, 60.764103, 122.482110, 124.871417, 77.623755], [79.518274, 74.672228, 93.258317, 67.872772, 37.485016, 47.188452, 67.273047, 87.100166, 100.897120, 44.382413], [77.860137, 205.271183, 170.160582, 80.896148, 151.934998, 114.977605, 147.513079, 190.043388, 188.344127, 207.253664], [76.586648, 125.204943, 100.215393, 70.042873, 50.649326, 67.898589, 84.145387, 113.609588, 130.120146, 66.565430]]> : tensor<10x10xf64>

        // Validate each element
        %false = arith.constant "false" : i1
        %flag = scf.for %i = %c0 to %rows step %c1 iter_args(%f_iter = %false) -> (i1) {
            %flag_row = scf.for %j = %c0 to %cols step %c1 iter_args(%f_in = %f_iter) -> (i1) {
                %cmp_c = tensor.extract %computed[%i, %j] : tensor<10x10xf64>
                %cmp_e = tensor.extract %expected[%i, %j] : tensor<10x10xf64>
                %neq = arith.cmpf une, %cmp_c, %cmp_e : f64
                %new_f = arith.ori %f_in, %neq : i1
                scf.yield %new_f : i1
            }
            scf.yield %flag_row : i1
        }

        %zero_i32 = arith.constant 0 : i32
        %one_i32 = arith.constant 1 : i32
        %status = scf.if %flag -> (i32) {
            scf.yield %one_i32 : i32
        } else {
            scf.yield %zero_i32 : i32
        }
        return %status : i32
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[5.023434, 4.102357, 0.210283, 6.972343, 9.716783, 1.492183, 2.887936, 3.324069, 7.989667, 2.005644, 8.317181, 0.031532, 5.275211, 3.586017, 9.378657, 2.797228, 2.775635, 0.528956, 5.993744, 8.917889, 4.280221, 6.851004, 7.777980, 9.957852, 6.099692]> : tensor<25xf64>
        %row_ptr = arith.constant dense<[0, 1, 4, 5, 8, 9, 12, 15, 19, 23, 25]> : tensor<11xindex>
        %col_ind = arith.constant dense<[8, 0, 1, 5, 2, 1, 2, 8, 7, 2, 4, 6, 0, 1, 7, 0, 1, 2, 3, 1, 3, 5, 9, 3, 6]> : tensor<25xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<25xindex>), tensor<25xf64> to tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }

}
