// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @matmul(%t : tensor<10x10xf64, #CSR>, %s : tensor<10x10xf64>, %out : tensor<10x10xf64>)
        -> tensor<10x10xf64> {
        %0 = linalg.matmul
            ins(%t, %s: tensor<10x10xf64, #CSR>, tensor<10x10xf64>)
            outs(%out: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %0 : tensor<10x10xf64>
    }

    func.func @main() -> i64 {
        %c = tensor.empty() : tensor<10x10xf64>
        %t_sparse = call @test_assemble() : () -> tensor<10x10xf64, #CSR>
        %s = arith.constant dense<[
            [1.231568383626046, 5.391756844741352, 0.6716902903025057, 1.595795315861196, 1.3482918940531186, 2.7644327806115365, 2.2022057925212426, 9.757160903462873, 6.536628251865128, 0.49769868571469034], [7.250852853843652, 9.256097994073599, 0.51127662945606, 5.653342731901474, 0.6829097524392358, 2.009775960674239, 2.5559146075097914, 7.830724249196156, 5.579581141934598, 3.012767617722516], [8.21188833064039, 5.211185624118703, 2.626764612424312, 6.44622371944013, 7.220050534671685, 1.4105809240052514, 5.663695334502381, 2.077137897177408, 4.980349105646278, 4.0138308317206], [0.5732904738753186, 5.528536990425872, 4.137144919431979, 7.026307142573415, 1.4363703604907763, 5.206452306035667, 7.07163521134929, 6.799214079033362, 0.20949316818202668, 4.034277433512053], [2.7428731865812486, 2.3612714731892313, 6.304403845298677, 1.2286305951833476, 0.6842118360373517, 2.3214312272111712, 1.6084573812047187, 4.66368946540889, 9.677355613887944, 8.931070099055873], [4.509989510220237, 5.337620345003261, 4.0108565150356155, 7.223144603158946, 4.096052321147308, 3.593291848473875, 2.1931952068711933, 1.8805564084828674, 5.574409249308369, 1.2272386527034362], [2.393819674747426, 0.5186190741199193, 0.749231443832229, 3.1684460824875305, 1.0563405224061917, 4.102727575069908, 7.9237585951572465, 9.719168971480293, 4.001932713471233, 9.333740073797491], [7.175798011679034, 7.735119037934912, 1.1965062756790235, 2.8253994681099046, 6.558219760528054, 6.663301685324543, 1.2483046435451106, 9.423901516074103, 7.060813156866295, 5.964723963390577], [8.370637586140374, 6.141701828681749, 8.432347449069047, 7.642279114632516, 5.690089918242589, 9.891188939122038, 2.746565551034763, 5.907150761500908, 6.596018527681098, 1.660748586590829], [8.618334040267511, 9.614825896568286, 3.2562521209106055, 5.038790421179672, 3.9616890053983687, 1.3840895850060553, 6.0749636458282446, 6.421263917056366, 5.514011500807063, 5.733923015723303]
        ]> : tensor<10x10xf64>
        %result_matrix = call @matmul(%t_sparse, %s, %c) :
            (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %c1 = arith.constant 1 : index
        %element_f64 = tensor.extract %result_matrix[%c1, %c1] : tensor<10x10xf64>
        %element_i64 = arith.fptosi %element_f64 : f64 to i64
        return %element_i64 : i64
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[9.564651, 1.461543, 5.726266, 5.700804, 5.644417, 9.675644, 4.948621, 2.310827, 4.528856, 0.095975, 8.796209, 4.440117, 5.605253, 6.128362, 8.698289, 7.974873, 5.640978, 8.409512, 1.853160, 3.629058, 4.495625, 1.876093, 6.556965, 2.585610, 6.092213]> : tensor<25xf64>
        %row_ptr = arith.constant dense<[0, 2, 7, 10, 13, 16, 18, 18, 20, 21, 25]> : tensor<11xindex>
        %col_ind = arith.constant dense<[1, 8, 0, 2, 4, 5, 7, 0, 7, 8, 0, 6, 8, 4, 5, 6, 0, 7, 2, 9, 2, 0, 4, 7, 8]> : tensor<25xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<25xindex>), tensor<25xf64> to tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }
    
}
