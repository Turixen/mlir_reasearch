// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @sparse_dense_matmul(%sparse: tensor<10x10xf64, #CSR>,%dense: tensor<10x10xf64>,%init: tensor<10x10xf64>
    ) -> tensor<10x10xf64> {
        %res = linalg.matmul ins(%sparse, %dense: tensor<10x10xf64, #CSR>, tensor<10x10xf64>) 
            outs(%init: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %res : tensor<10x10xf64>
    }

    func.func @main() -> i32 {
        %c0 = arith.constant 0 : index
        %c1 = arith.constant 1 : index
        %rows = arith.constant 10 : index
        %cols = arith.constant 10 : index
        %zero_f64 = arith.constant 0.0 : f64

        %init = tensor.empty() : tensor<10x10xf64>
        %sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %dense = arith.constant dense<[[4.311493, 6.060596, 7.632663, 5.736614, 7.953032, 7.700063, 0.814942, 1.269962, 4.898268, 6.195197], [8.229261, 9.879151, 5.920698, 7.897893, 7.628158, 0.919593, 5.710314, 4.224421, 0.205238, 2.711617], [6.762053, 2.742160, 9.511238, 3.008705, 9.818405, 0.731040, 9.121368, 5.471852, 3.897716, 4.725890], [6.787458, 9.046343, 1.855418, 0.625948, 2.527901, 6.735978, 3.739663, 3.935100, 0.180145, 8.551103], [2.404524, 5.040996, 0.224410, 4.049746, 0.293423, 0.962425, 0.681690, 6.670120, 6.006706, 9.335798], [7.661696, 5.689056, 3.648377, 8.725878, 8.464504, 6.860989, 5.203792, 6.028635, 7.710021, 9.729788], [4.228776, 8.897928, 6.772549, 2.743379, 0.286363, 9.630985, 9.580932, 9.589155, 5.023655, 2.094117], [6.653610, 4.743460, 9.717761, 0.020098, 1.278536, 9.433372, 9.504234, 8.553549, 1.739033, 3.375484], [0.460467, 6.182797, 2.469346, 0.442086, 3.781839, 9.870882, 2.727314, 4.182500, 4.927604, 0.086318], [9.780385, 5.478875, 5.771144, 2.960773, 5.992707, 7.952076, 7.367322, 9.644541, 9.897684, 6.067170]]> : tensor<10x10xf64>

        %computed = call @sparse_dense_matmul(%sparse, %dense, %init) : (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %expected = arith.constant dense<[[55.411867, 31.041179, 32.697061, 16.774594, 33.952351, 45.053377, 41.740387, 54.642230, 56.076437, 34.374230], [91.356629, 131.954941, 153.800895, 38.581120, 79.027343, 207.522481, 123.356900, 127.443998, 83.907861, 66.279540], [78.815213, 196.725006, 97.485410, 74.862139, 47.464439, 193.661051, 132.047810, 198.781603, 151.650521, 110.750376], [122.855816, 108.813599, 100.710816, 32.223754, 109.704860, 69.540698, 114.956621, 84.818153, 35.833092, 121.549464], [114.724124, 116.379721, 63.905304, 15.670939, 47.061227, 116.095947, 86.241288, 92.874463, 39.164024, 109.792721], [50.586203, 60.728263, 36.395204, 48.549247, 46.891151, 5.652844, 35.101949, 25.967997, 1.261620, 16.668620], [83.716890, 106.709050, 39.301552, 39.644722, 51.585423, 50.673517, 51.385263, 46.091540, 2.163008, 71.233866], [47.271267, 101.963790, 65.040702, 37.370235, 34.815344, 99.308305, 82.622367, 84.785063, 50.278443, 19.582464], [116.418760, 96.172044, 103.378332, 104.074132, 115.027596, 132.931982, 92.092450, 97.630096, 98.517503, 129.308327], [3.164184, 6.633594, 0.295307, 5.329179, 0.386123, 1.266483, 0.897056, 8.777407, 7.904402, 12.285251]]> : tensor<10x10xf64>

        // Validate each element
        %false = arith.constant "false" : i1
        %flag = scf.for %i = %c0 to %rows step %c1 iter_args(%f_iter = %false) -> (i1) {
            %flag_row = scf.for %j = %c0 to %cols step %c1 iter_args(%f_in = %f_iter) -> (i1) {
                %cmp_c = tensor.extract %computed[%i, %j] : tensor<10x10xf64>
                %cmp_e = tensor.extract %expected[%i, %j] : tensor<10x10xf64>
                %neq = arith.cmpf une, %cmp_c, %cmp_e : f64
                %new_f = arith.ori %f_in, %neq : i1
                scf.yield %new_f : i1
            }
            scf.yield %flag_row : i1
        }

        %zero_i32 = arith.constant 0 : i32
        %one_i32 = arith.constant 1 : i32
        %status = scf.if %flag -> (i32) {
            scf.yield %one_i32 : i32
        } else {
            scf.yield %zero_i32 : i32
        }
        return %status : i32
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[5.665612, 5.247806, 1.931382, 8.632000, 6.796157, 0.769539, 9.001097, 9.784377, 8.673007, 0.559237, 8.760151, 9.373054, 9.388917, 2.830427, 3.288694, 6.147114, 4.471821, 6.912324, 2.400666, 6.081735, 3.903154, 3.690002, 9.491546, 4.176379, 1.315929]> : tensor<25xf64>
        %row_ptr = arith.constant dense<[0, 1, 5, 10, 12, 15, 16, 18, 21, 24, 25]> : tensor<11xindex>
        %col_ind = arith.constant dense<[9, 0, 6, 7, 8, 1, 4, 6, 8, 9, 2, 3, 3, 7, 9, 1, 1, 3, 1, 6, 8, 0, 5, 7, 4]> : tensor<25xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<25xindex>), tensor<25xf64> -> tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }

}
