// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @matmul(%t : tensor<10x10xf64, #CSR>, %s : tensor<10x10xf64>, %out : tensor<10x10xf64>)
        -> tensor<10x10xf64> {
        %0 = linalg.matmul
            ins(%t, %s: tensor<10x10xf64, #CSR>, tensor<10x10xf64>)
            outs(%out: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %0 : tensor<10x10xf64>
    }

    func.func @main() -> i64 {
        %c = tensor.empty() : tensor<10x10xf64>
        %t_sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %s = arith.constant dense<[
            [3.1852281865120835, 3.5341481998675373, 2.2704666796029738, 8.412624764093747, 1.3627896453983113, 9.508257270320712, 1.4293400710907367, 5.328375616582855, 6.595862741476884, 8.57160932498664], [8.934428430587843, 5.109880437538524, 5.511824672841209, 4.603211464493217, 9.59782921827841, 9.32182860257596, 2.2114035760394044, 2.7324910139286662, 9.942209487442783, 4.4649907935994815], [4.049888246354359, 4.702905076052653, 5.583857634486168, 3.4450614916544176, 3.5625765707766077, 7.12981431448311, 9.226316663108898, 2.093371145827181, 9.031720762353357, 4.55508810479563], [4.778442753595929, 6.609884530606694, 0.04785117214729406, 2.9761787246314264, 9.272656423800775, 2.501635744426569, 1.3073591096902437, 2.5855394724677194, 8.44829499520716, 0.8879835699243421], [5.556946276250305, 7.779817353010229, 4.962735247932665, 6.14252785644712, 4.747584676441913, 3.5637764395190166, 7.341167329371354, 1.1043591962739985, 9.697991453395263, 4.320470288411754], [1.6447969692459863, 6.837708649578362, 4.6878273307846365, 2.712558992791018, 4.486794410918132, 5.808991090751951, 1.6144807350048307, 0.32407433017402676, 0.557771897117203, 4.777354282252674], [8.967210280039929, 0.22337972881230184, 7.611467629807585, 6.4198038013673, 0.65268678841095, 4.750684856181193, 4.684551330019133, 8.320741697498223, 2.4433765449513976, 3.0196797668171795], [0.8686603513789448, 4.697422481468876, 4.43621306651821, 8.405448695780326, 0.4021707418275844, 6.846021109184948, 1.0064529043762438, 4.470052494235283, 7.655432875417714, 7.016085678945714], [5.384925292623511, 1.1796228391679908, 9.851622012375003, 0.5524128073733836, 5.660874799611602, 0.2691028346547797, 4.7531070419348715, 0.7668362826526176, 4.567790988637633, 7.184835149299134], [9.75516641566154, 6.317106925807716, 6.9000908403472705, 8.253982422172207, 2.3379976252943404, 9.028135332060913, 5.769351065802356, 3.7609767189644083, 1.8345281987518136, 1.5981671677170572]
        ]> : tensor<10x10xf64>
        %result_matrix = call @matmul(%t_sparse, %s, %c) :
            (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %c1 = arith.constant 1 : index

        %element_f64 = tensor.extract %result_matrix[%c1, %c1] : tensor<10x10xf64>
        %element_i64 = arith.fptosi %element_f64 : f64 to i64
        return %element_i64 : i64
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[6.782722, 0.315900, 3.265087, 3.545336, 2.963453, 0.811562, 7.706419, 1.122918, 6.244508, 7.840729, 2.852970, 9.058743, 6.432977, 1.354784, 3.050028, 5.477311, 8.556743, 8.144190, 1.824149, 6.245416, 4.466189, 5.893845, 6.568834, 9.476756, 1.252778]> : tensor<25xf64>
        %row_ptr = arith.constant dense<[0, 2, 5, 7, 10, 12, 13, 14, 16, 22, 25]> : tensor<11xindex>
        %col_ind = arith.constant dense<[6, 9, 4, 6, 9, 0, 8, 0, 3, 7, 0, 9, 5, 3, 1, 2, 4, 5, 6, 7, 8, 9, 2, 5, 7]> : tensor<25xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<25xindex>), tensor<25xf64> to tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }
    
}
