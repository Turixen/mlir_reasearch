// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @sparse_dense_matmul(%sparse: tensor<10x10xf64, #CSR>,%dense: tensor<10x10xf64>,%init: tensor<10x10xf64>
    ) -> tensor<10x10xf64> {
        %res = linalg.matmul ins(%sparse, %dense: tensor<10x10xf64, #CSR>, tensor<10x10xf64>) 
            outs(%init: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %res : tensor<10x10xf64>
    }

    func.func @main() -> i32 {
        %c0 = arith.constant 0 : index
        %c1 = arith.constant 1 : index
        %rows = arith.constant 10 : index
        %cols = arith.constant 10 : index
        %zero_f64 = arith.constant 0.0 : f64

        %init = tensor.empty() : tensor<10x10xf64>
        %sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %dense = arith.constant dense<[[8.714367, 9.185082, 3.901451, 6.676312, 3.196061, 9.020748, 1.050000, 9.325650, 2.784024, 1.492580], [8.509800, 4.737331, 2.060454, 7.306351, 7.370187, 2.747170, 8.899378, 3.987653, 2.178440, 6.297500], [7.086720, 5.186740, 5.494267, 9.973741, 8.181355, 3.815416, 0.484839, 5.878999, 7.658667, 9.256382], [3.453348, 1.189060, 6.308112, 9.891893, 8.337082, 0.387688, 8.813724, 8.878856, 5.742186, 9.193230], [3.962874, 0.362621, 1.074214, 6.408362, 4.704807, 2.530015, 2.939328, 0.924766, 6.893151, 2.341807], [2.013338, 7.552310, 3.245966, 5.410548, 0.746386, 7.907899, 8.457548, 2.192020, 3.993850, 9.629820], [0.296310, 2.977167, 4.695173, 0.317468, 9.294811, 8.670938, 9.968755, 0.782672, 3.715192, 0.949202], [7.580705, 5.004181, 5.276093, 3.477725, 6.465497, 4.723517, 1.729414, 5.864256, 8.713930, 4.414790], [5.209675, 0.037407, 0.271371, 7.056240, 6.729708, 2.564054, 5.829371, 9.410897, 3.034767, 9.762134], [0.743776, 8.513322, 8.810782, 6.861687, 1.683141, 1.046593, 3.728462, 2.365278, 3.284853, 9.556269]]> : tensor<10x10xf64>

        %computed = call @sparse_dense_matmul(%sparse, %dense, %init) : (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %expected = arith.constant dense<[[103.783890, 130.513445, 120.639682, 174.019281, 109.261618, 72.511102, 60.020773, 127.137105, 101.350728, 186.137003], [31.090689, 64.304042, 67.689148, 86.204287, 45.602705, 20.427584, 56.602786, 63.858350, 39.588804, 119.738234], [51.143733, 53.838157, 66.192358, 71.387188, 112.255545, 78.124173, 62.629415, 45.618710, 75.449924, 70.143215], [38.899949, 72.550066, 81.912154, 110.715721, 54.937685, 31.509728, 62.437237, 33.684068, 82.781814, 103.145401], [0.161896, 1.626644, 2.565317, 0.173456, 5.078435, 4.737568, 5.446660, 0.427631, 2.029881, 0.518618], [20.546552, 1.880104, 5.569543, 33.225819, 24.393297, 13.117519, 15.239713, 4.794689, 35.739333, 12.141706], [36.722598, 134.269817, 110.335904, 130.467305, 45.744167, 83.309307, 132.216795, 67.334442, 77.798553, 188.922500], [54.727999, 81.744368, 53.986436, 94.696914, 52.359670, 76.264754, 60.802907, 48.979805, 71.613239, 119.491251], [47.379198, 29.258548, 40.251941, 37.341157, 50.487526, 26.226620, 25.714400, 48.208268, 57.748572, 41.068254], [42.023417, 5.858359, 7.668672, 49.296138, 50.549686, 21.796927, 39.441163, 67.122523, 29.304636, 67.754818]]> : tensor<10x10xf64>

        // Validate each element
        %false = arith.constant "false" : i1
        %flag = scf.for %i = %c0 to %rows step %c1 iter_args(%f_iter = %false) -> (i1) {
            %flag_row = scf.for %j = %c0 to %cols step %c1 iter_args(%f_in = %f_iter) -> (i1) {
                %cmp_c = tensor.extract %computed[%i, %j] : tensor<10x10xf64>
                %cmp_e = tensor.extract %expected[%i, %j] : tensor<10x10xf64>
                %neq = arith.cmpf une, %cmp_c, %cmp_e : f64
                %new_f = arith.or %f_in, %neq : i1
                scf.yield %new_f : i1
            }
            scf.yield %flag_row : i1
        }

        %zero_i32 = arith.constant 0 : i32
        %one_i32 = arith.constant 1 : i32
        %status = scf.if %flag -> (i32) {
            scf.yield %one_i32 : i32
        } else {
            scf.yield %zero_i32 : i32
        }
        return %status : i32
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[2.910698, 7.170352, 4.184694, 7.803201, 4.892567, 7.531846, 6.968325, 5.943661, 0.868523, 7.338559, 0.593377, 7.561661, 0.546373, 5.184760, 2.627477, 9.218876, 0.713231, 7.223396, 5.774206, 6.858175, 0.022374, 1.860344, 5.381587, 1.122606, 6.432891]> : tensor<25xf64>
        %row_ptr = arith.constant dense<[0, 4, 6, 8, 12, 13, 14, 18, 20, 23, 25]> : tensor<11xindex>
        %col_ind = arith.constant dense<[0, 2, 8, 9, 8, 9, 2, 6, 3, 4, 5, 9, 6, 4, 3, 5, 8, 9, 2, 5, 2, 3, 7, 7, 8]> : tensor<25xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<25xindex>), tensor<25xf64> -> tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }

}
