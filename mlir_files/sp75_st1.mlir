// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @matmul(%t : tensor<10x10xf64, #CSR>, %s : tensor<10x10xf64>, %out : tensor<10x10xf64>)
        -> tensor<10x10xf64> {
        %0 = linalg.matmul
            ins(%t, %s: tensor<10x10xf64, #CSR>, tensor<10x10xf64>)
            outs(%out: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %0 : tensor<10x10xf64>
    }

    func.func @main() -> i64 {
        %c = tensor.empty() : tensor<10x10xf64>
        %t_sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %s = arith.constant dense<[
            [2.2671115751979656, 8.408574134991763, 4.456785147628196, 8.01653905688232, 7.864333324110592, 9.526922063635832, 9.294173431875477, 9.201349474557842, 5.038201764413994, 9.448419956675142], [3.9782255694138104, 8.651911407284757, 5.595354100842456, 0.4329351661926095, 6.556484627418342, 3.99140833372038, 1.9011222707114384, 1.5241119063428044, 3.9818934189134625, 5.3287538987809295], [7.146819278672586, 3.847662388556415, 5.785000040203933, 7.734260094330865, 1.4793321643372581, 3.7084439123284785, 5.103312782835188, 7.338744144759316, 0.5406840501529697, 9.069822090830558], [5.3356063836691705, 8.521174765589828, 1.6815658337550987, 6.566462379236551, 0.895209740943208, 5.185626856189939, 6.96533930729765, 8.067903809279263, 4.485633267421366, 8.716792545032035], [2.7758210661124014, 1.7778471329693435, 7.6273462997922366, 2.413933726119896, 4.327137560605606, 8.523822032583952, 1.2898941253995233, 9.720936230644657, 9.144748268248375, 4.0054738667596546], [9.934210180446607, 2.609009728900541, 9.43598005388457, 6.872718591758591, 4.478573376167847, 4.242383078626045, 9.283440341672728, 4.057830123256824, 2.87567862922258, 8.495341166938232], [5.562100897727219, 8.509939447479542, 6.731376911976362, 2.0619570287541023, 4.907078153823061, 8.825055822568176, 6.575395329476567, 1.107686483503404, 0.7281087495955385, 0.8290483838077001], [2.8554995332324804, 4.567314903600566, 0.1928597712157032, 3.095449880217741, 6.586828092284542, 3.2971280012747792, 5.689313184315987, 3.5590171530465375, 8.294806133944693, 6.418566093802708], [5.446174129300887, 5.333015539262931, 2.5499512659212478, 5.8991758613361895, 9.742396894128785, 4.746417688869888, 1.0106722240064525, 2.1795702118975657, 0.8094408203725667, 5.191660223233439], [4.105932557857558, 1.6714343166013668, 2.3351404294620814, 5.063793629043153, 4.3579545386273635, 0.09143622080834857, 7.5217558730795435, 4.845730414394033, 7.5189405654047725, 8.79582143590265]
        ]> : tensor<10x10xf64>
        %result_matrix = call @matmul(%t_sparse, %s, %c) :
            (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %c1 = arith.constant 1 : index
        %element_f64 = tensor.extract %result_matrix[%c1, %c1] : tensor<10x10xf64>
        %element_i64 = arith.fptosi %element_f64 : f64 to i64
        return %element_i64 : i64
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[3.149105, 8.987023, 1.334036, 2.152526, 2.029775, 0.086595, 9.538426, 5.856417, 5.437852, 8.629610, 1.220062, 4.070955, 3.250714, 2.297971, 3.614064, 6.994042, 5.265611, 4.687002, 0.798794, 6.738758, 2.989634, 1.139847, 3.969821, 9.626569, 8.694429]> : tensor<25xf64>
        %row_ptr = arith.constant dense<[0, 4, 6, 9, 10, 13, 14, 18, 19, 23, 25]> : tensor<11xindex>
        %col_ind = arith.constant dense<[3, 6, 8, 9, 6, 9, 1, 8, 9, 5, 1, 6, 7, 1, 2, 3, 4, 8, 9, 3, 4, 6, 9, 1, 5]> : tensor<25xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<25xindex>), tensor<25xf64> to tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }
    
}
