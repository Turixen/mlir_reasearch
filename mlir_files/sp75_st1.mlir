// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @sparse_dense_matmul(%sparse: tensor<10x10xf64, #CSR>,%dense: tensor<10x10xf64>,%init: tensor<10x10xf64>
    ) -> tensor<10x10xf64> {
        %res = linalg.matmul ins(%sparse, %dense: tensor<10x10xf64, #CSR>, tensor<10x10xf64>) 
            outs(%init: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %res : tensor<10x10xf64>
    }

    func.func @main() -> i32 {
        %c0 = arith.constant 0 : index
        %c1 = arith.constant 1 : index
        %rows = arith.constant 10 : index
        %cols = arith.constant 10 : index
        %zero_f64 = arith.constant 0.0 : f64

        %init = tensor.empty() : tensor<10x10xf64>
        %sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %dense = arith.constant dense<[[9.074381, 7.711783, 1.819360, 8.290678, 8.791221, 4.448658, 6.311817, 4.490935, 7.303197, 2.927383], [9.482208, 8.901071, 8.429051, 9.538224, 0.661293, 2.508563, 7.908433, 1.159678, 5.854500, 9.382071], [3.739182, 4.600082, 4.299268, 8.571096, 0.306230, 2.016424, 1.070368, 6.209147, 5.338887, 7.695027], [6.183183, 8.096350, 4.874475, 9.029090, 1.614590, 9.785935, 0.449525, 8.878611, 0.971285, 6.335878], [8.493464, 7.574657, 4.294932, 2.267362, 6.473242, 7.277221, 1.712291, 9.400763, 0.487323, 2.970080], [7.288872, 7.584264, 3.915112, 6.972851, 5.292234, 5.276169, 3.638239, 7.444221, 2.973167, 5.847531], [7.028105, 2.221393, 6.887240, 5.147245, 9.182149, 9.402006, 4.346761, 9.988127, 7.508260, 3.586478], [6.644128, 9.499653, 8.151135, 3.139290, 3.345253, 3.223816, 9.159100, 4.756355, 0.984927, 8.058805], [6.806778, 1.006195, 6.923345, 8.700503, 4.469086, 0.202555, 1.917954, 9.922970, 4.401057, 6.543155], [9.110650, 7.847398, 6.173054, 9.629276, 4.649973, 6.688850, 4.462925, 1.461600, 0.605971, 5.559301]]> : tensor<10x10xf64>

        %computed = call @sparse_dense_matmul(%sparse, %dense, %init) : (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %expected = arith.constant dense<[[94.787613, 30.737028, 89.644718, 79.308638, 102.344557, 88.983387, 46.295256, 132.867816, 81.495303, 58.521538], [38.250363, 48.855853, 35.768184, 68.777397, 7.204496, 44.332200, 6.097672, 58.413684, 25.744892, 55.242768], [182.618706, 199.458474, 153.178076, 152.690850, 100.543020, 118.064681, 145.613040, 95.200012, 29.578569, 156.211990], [113.440208, 101.122368, 31.070228, 104.706720, 103.897070, 61.391526, 74.047058, 69.161541, 81.481612, 48.458957], [15.642941, 14.586996, 8.044858, 7.126997, 11.767821, 12.834102, 4.426789, 16.948089, 2.397380, 7.406621], [10.444590, 7.830152, 11.076618, 15.377168, 7.578949, 10.016585, 4.813905, 16.029521, 12.939184, 12.997149], [51.146092, 53.218859, 27.472383, 48.928573, 37.135663, 37.022936, 25.529562, 52.236180, 20.862747, 41.032189], [107.119210, 98.473119, 78.212479, 74.956561, 38.200054, 54.623407, 61.272760, 56.794768, 41.282243, 77.595302], [159.703927, 172.893228, 134.619521, 134.560289, 86.331040, 103.312271, 126.830468, 77.120894, 23.724989, 135.072320], [164.181926, 178.647496, 132.043854, 197.588434, 66.108449, 157.285427, 72.700771, 118.370473, 32.319179, 148.439825]]> : tensor<10x10xf64>

        // Validate each element
        %false = arith.constant false : i1
        %flag = scf.for %i = %c0 to %rows step %c1 iter_args(%f_iter = %false) -> (i1) {
            %flag_row = scf.for %j = %c0 to %cols step %c1 iter_args(%f_in = %f_iter) -> (i1) {
                %cmp_c = tensor.extract %computed[%i, %j] : tensor<10x10xf64>
                %cmp_e = tensor.extract %expected[%i, %j] : tensor<10x10xf64>
                %neq = arith.cmpf une, %cmp_c, %cmp_e : f64
                %new_f = arith.or %f_in, %neq : i1
                scf.yield %new_f : i1
            }
            scf.yield %flag_row : i1
        }

        %zero_i32 = arith.constant 0 : i32
        %one_i32 = arith.constant 1 : i32
        %status = scf.if %flag -> (i32) {
            scf.yield %one_i32 : i32
        } else {
            scf.yield %zero_i32 : i32
        }
        return %status : i32
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[1.041838, 8.576690, 3.769907, 4.153691, 3.674314, 4.942394, 9.454115, 9.195818, 9.775571, 3.393248, 1.337985, 0.587034, 1.324926, 0.781213, 7.017011, 6.616420, 5.225305, 0.037478, 3.403823, 8.171061, 8.808257, 3.006801, 8.270782, 2.692444, 9.210127]> : tensor<25xf64>
        %row_ptr = arith.constant dense<[0, 3, 5, 8, 10, 12, 14, 15, 17, 21, 25]> : tensor<11xindex>
        %col_ind = arith.constant dense<[4, 6, 8, 2, 3, 5, 7, 9, 0, 5, 4, 5, 2, 6, 5, 1, 4, 1, 5, 7, 9, 2, 3, 7, 9]> : tensor<25xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<25xindex>), tensor<25xf64> -> tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }

}
