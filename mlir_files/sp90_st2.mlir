// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @matmul(%t : tensor<10x10xf64, #CSR>, %s : tensor<10x10xf64>, %out : tensor<10x10xf64>)
        -> tensor<10x10xf64> {
        %0 = linalg.matmul
            ins(%t, %s: tensor<10x10xf64, #CSR>, tensor<10x10xf64>)
            outs(%out: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %0 : tensor<10x10xf64>
    }

    func.func @main() -> i64 {
        %c = tensor.empty() : tensor<10x10xf64>
        %t_sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %s = arith.constant dense<[
            [0.40803604068288646, 9.68374479940956, 7.441576258341192, 9.646145142740753, 2.161269758406749, 1.0841491891053034, 5.8333663037433965, 4.683625925833881, 5.542110603669417, 7.843336590842142], [5.290600126365213, 3.85132241321847, 7.490526594508156, 8.489131751339992, 5.135048311105843, 8.990365879483015, 1.275929365061662, 6.7808682903243085, 6.121531435783568, 8.897000606030584], [7.60000889182853, 9.360034441047562, 1.8956743972485512, 8.772723014373224, 0.28226442309511546, 9.625341642824536, 2.227148714542264, 0.39238027006464393, 5.637978968056867, 3.084221156551518], [1.443526392108675, 6.721932545784513, 5.51379950383689, 7.029660754804628, 9.196506095285269, 3.647908878449061, 7.858370489681122, 4.734817410638077, 9.303956071341158, 5.858595337278433], [9.991300758048391, 2.31043146455474, 2.6219281968503614, 9.230139887403219, 1.4649326933627205, 0.0463402512101585, 6.010546144940837, 8.474721294085823, 3.072683051257589, 8.720820102921138], [1.5252101024782938, 0.47799360996902296, 8.912171793858416, 4.733072728165197, 5.380073547333193, 6.561435559907919, 7.3456012949668, 1.654753160738609, 9.484615792456774, 4.154338172829734], [8.017377908295725, 4.339211921925417, 4.823796888059112, 5.926824735076056, 3.3682095671118253, 7.592779308013418, 0.24498060468052252, 0.27394927746192677, 0.2765065366144115, 1.318661160153063], [1.3156478154891371, 8.036236789095367, 0.44301391270632373, 2.014135401668584, 5.258991522102764, 3.6316513406597983, 2.528526372286567, 8.186731402269125, 7.429559154569752, 1.5398268088360711], [0.05046158070294959, 0.6938488621115002, 7.216410466392955, 0.9624974718302437, 6.017238979954388, 8.1187932329577, 3.21461128638993, 5.63325617500991, 0.9242006970070371, 4.441841199748955], [1.397412000400986, 7.973285335346199, 2.506451278935545, 0.19699913045786666, 9.246106357885411, 6.48273150653735, 5.173131266621055, 6.422782691568303, 6.300952404644566, 0.8590942542773039]
        ]> : tensor<10x10xf64>
        %result_matrix = call @matmul(%t_sparse, %s, %c) :
            (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %c1 = arith.constant 1 : index

        %element_f64 = tensor.extract %result_matrix[%c1, %c1] : tensor<10x10xf64>
        %element_i64 = arith.fptosi %element_f64 : f64 to i64
        return %element_i64 : i64
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[6.941727, 4.472423, 8.643356, 7.130149, 9.215441, 1.526742, 5.686134, 7.139875, 5.525666]> : tensor<9xf64>
        %row_ptr = arith.constant dense<[0, 3, 3, 4, 4, 5, 5, 8, 8, 9, 9]> : tensor<11xindex>
        %col_ind = arith.constant dense<[2, 4, 8, 6, 0, 0, 2, 8, 6]> : tensor<9xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<9xindex>), tensor<9xf64> to tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }
    
}
