// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @matmul(%t : tensor<10x10xf64, #CSR>, %s : tensor<10x10xf64>, %out : tensor<10x10xf64>)
        -> tensor<10x10xf64> {
        %0 = linalg.matmul
            ins(%t, %s: tensor<10x10xf64, #CSR>, tensor<10x10xf64>)
            outs(%out: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %0 : tensor<10x10xf64>
    }

    func.func @main() -> i64 {
        %c = tensor.empty() : tensor<10x10xf64>
        %t_sparse = call @test_assemble() : () -> tensor<10x10xf64, #CSR>
        %s = arith.constant dense<[
            [8.619225879929123, 7.1883793551792525, 3.777968247615119, 1.7292753246354908, 8.989617596917952, 2.220547183215361, 9.69292849053268, 2.340591411778279, 6.49631674561944, 2.1422829357107407], [4.464454850090051, 9.863682259247424, 0.6385668857332483, 7.07780815754835, 5.287787221824054, 5.332018326197126, 2.7740971129630845, 6.759205359392295, 9.928784263823353, 6.871926821371669], [3.706167225935897, 9.23312611425842, 8.36007622684739, 9.852378011965467, 8.79701159601311, 6.01444501725859, 7.385377429925452, 5.8709599383156945, 9.330796806719857, 9.018318808188416], [4.051959154876975, 0.9195372949151615, 9.505413714391377, 8.300677175436581, 4.543641471321866, 7.53429912221368, 0.1914183066242825, 0.41003044208219097, 1.64833239395333, 0.9849484882854775], [4.063610615994307, 9.96830914099508, 4.640164436548687, 1.764416219763646, 5.705092461033573, 0.4522626203958158, 9.039407152629735, 9.399398273191094, 7.7776611876259185, 7.192546608847405], [8.622847579682961, 0.345667251149524, 5.894486771635052, 9.315005189077882, 6.417565366404685, 1.8548816616532482, 6.010288639249689, 6.378521739404603, 7.569714882177183, 6.96904522053693], [9.140259982421984, 5.4140137262606745, 4.895681196973664, 2.1647636659347445, 2.8878991352498473, 3.3110345484323855, 4.406412866556748, 5.931851216110447, 2.4970547380350294, 1.654494908810552], [1.4525341332265396, 1.4270886639651692, 2.364351636141717, 3.3903121483580767, 9.056178803219106, 3.6528055197676323, 0.4905897112638502, 8.349235903681425, 8.815195121512783, 9.019590189288177], [7.2940357566217005, 6.848644208646357, 9.1829132994129, 7.448154948414166, 5.146412357615199, 5.560595908668706, 3.657874649753623, 3.107436128028227, 0.38326414766735817, 0.7419853534811705], [0.9633981169036432, 1.7416914964820895, 9.085803932388167, 4.891281610441329, 2.2168386422986854, 7.943035558690019, 7.360654008372677, 7.679865041864198, 1.3609451157348873, 5.720553203788268]
        ]> : tensor<10x10xf64>
        %result_matrix = call @matmul(%t_sparse, %s, %c) :
            (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %c1 = arith.constant 1 : index
        %element_f64 = tensor.extract %result_matrix[%c1, %c1] : tensor<10x10xf64>
        %element_i64 = arith.fptosi %element_f64 : f64 to i64
        return %element_i64 : i64
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[0.244693, 5.906185, 1.657551, 7.082021, 6.911543, 9.071056, 9.077031, 8.205143, 4.952168]> : tensor<9xf64>
        %row_ptr = arith.constant dense<[0, 1, 1, 2, 2, 3, 3, 6, 6, 9, 9]> : tensor<11xindex>
        %col_ind = arith.constant dense<[8, 2, 2, 0, 4, 6, 0, 2, 8]> : tensor<9xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<9xindex>), tensor<9xf64> to tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }
    
}
