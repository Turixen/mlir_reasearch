// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @matmul(%t : tensor<10x10xf64, #CSR>, %s : tensor<10x10xf64>, %out : tensor<10x10xf64>)
        -> tensor<10x10xf64> {
        %0 = linalg.matmul
            ins(%t, %s: tensor<10x10xf64, #CSR>, tensor<10x10xf64>)
            outs(%out: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %0 : tensor<10x10xf64>
    }

    func.func @main() -> i64 {
        %c = tensor.empty() : tensor<10x10xf64>
        %t_sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %s = arith.constant dense<[
            [2.251041647994363, 9.442526598659525, 7.8903279620528854, 4.583308662421713, 2.283991163597893, 6.191780092848883, 3.8502221476169716, 0.14214135914890624, 0.7279776970652319, 8.56550051602364], [5.234637588946999, 2.4341577506843324, 8.336644457561503, 7.874780532614066, 8.643209215121463, 8.27323617355748, 0.1272663439010535, 7.154717764676501, 7.132301052833016, 0.9194180134590602], [5.84093786175544, 2.0170877948926194, 5.2959516008950835, 8.36164470373945, 1.7112246328025449, 3.025021702532966, 4.220508294660354, 5.286657498333735, 4.32742177236805, 2.3256313306204457], [0.36978687535139554, 2.864123240791004, 3.3936412866586996, 8.984835420378946, 4.46239400620448, 5.333739450997501, 7.157042965707009, 9.195288532949396, 8.176485283988574, 8.783275779922041], [2.9456370497670914, 1.649590027453145, 4.743057251996838, 9.46204375719391, 4.940151281749231, 5.895060270713795, 3.278593284708269, 1.8766537139503747, 4.618940277770774, 1.0254133942217203], [9.84564306597845, 1.5935143286673226, 9.992923135839456, 0.05708861190288239, 4.341179421689187, 7.217976203141415, 5.724662962784798, 1.5490320727614892, 1.781203014103756, 4.540097595836704], [4.187890871868917, 8.217970073978561, 9.298455173449174, 6.75995009490327, 4.969347353686214, 8.567616815351005, 2.2422731368704882, 9.509992176018631, 5.811775192914849, 4.88956663035421], [5.085935689983901, 9.252455372345947, 2.507944697729508, 6.267758793251842, 3.890689677489764, 7.913190363275097, 8.502619380827623, 1.0611951326973945, 2.6198935121121503, 8.194495828102097], [1.3656506172639515, 2.3892922598286215, 6.679743153065687, 4.192438653603152, 9.314558515971958, 6.933537999241216, 8.241700701063412, 9.554248671100442, 1.8028093381306287, 4.495679980373247], [1.7489991582742292, 1.8615502256696137, 8.504790462532322, 9.082218054417734, 7.24546886263279, 3.693946869614039, 8.944412329674021, 9.56760128709896, 8.97757551242662, 9.515291816385513]
        ]> : tensor<10x10xf64>
        %result_matrix = call @matmul(%t_sparse, %s, %c) :
            (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %c1 = arith.constant 1 : index
        %element_f64 = tensor.extract %result_matrix[%c1, %c1] : tensor<10x10xf64>
        %element_i64 = arith.fptosi %element_f64 : f64 to i64
        return %element_i64 : i64
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[7.095673, 2.062566, 8.263886, 9.454429, 2.289869, 1.876454, 1.126156, 6.244774, 8.494993]> : tensor<9xf64>
        %row_ptr = arith.constant dense<[0, 2, 2, 3, 3, 5, 5, 9, 9, 9, 9]> : tensor<11xindex>
        %col_ind = arith.constant dense<[0, 8, 2, 2, 8, 0, 2, 4, 8]> : tensor<9xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<9xindex>), tensor<9xf64> to tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }
    
}
