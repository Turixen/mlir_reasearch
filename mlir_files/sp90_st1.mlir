// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @matmul(%t : tensor<10x10xf64, #CSR>, %s : tensor<10x10xf64>, %out : tensor<10x10xf64>)
        -> tensor<10x10xf64> {
        %0 = linalg.matmul
            ins(%t, %s: tensor<10x10xf64, #CSR>, tensor<10x10xf64>)
            outs(%out: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %0 : tensor<10x10xf64>
    }

    func.func @main() -> i64 {
        %c = tensor.empty() : tensor<10x10xf64>
        %t_sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %s = arith.constant dense<[
            [9.256856285176893, 5.276758206135873, 1.8344417477653774, 9.250192889766671, 4.382184801837133, 1.7395796967360488, 5.4369919553113135, 8.67613140956781, 4.515241138992588, 5.994723612604781], [3.5207349540712762, 8.356324356103448, 1.4042828745599312, 5.7235720457418875, 5.170185038134981, 2.0062448394618304, 6.729938863650843, 9.126042114463079, 9.941695391277143, 6.329516277528211], [8.298164651968108, 1.4165154105492372, 9.825120925452325, 6.162378248332506, 4.412899164569334, 4.5279923258614545, 2.676468705008501, 7.449852647619827, 6.227017730847341, 7.76395579574995], [7.342269722256354, 4.85890234630117, 4.120682693271195, 9.727875059313439, 6.234048580053405, 1.4991868533519137, 2.8538803443922847, 6.9411437666097155, 0.424887234768343, 0.8329716783775054], [7.515282494003873, 0.06456605922393721, 1.913248074711963, 1.4626767589908818, 5.289594032658713, 8.523399547427623, 0.838567033707367, 6.6630556166327, 7.388169857481185, 8.67604828600517], [3.3085542209811036, 3.420871790010115, 3.8971759528466965, 2.3625604280771317, 8.977250463597628, 6.715230456385958, 0.23685504774267896, 3.8785689968784984, 4.515780222183877, 7.782850091261038], [1.8488358300066943, 7.201607186908346, 9.257993960459347, 0.5367561633647566, 7.063891899975554, 7.980197189700534, 2.559992198381491, 0.9065242854127831, 1.5436756523900086, 6.705799997718858], [7.840717707177603, 3.958963608191508, 2.1141282710862375, 2.5506476484852616, 5.592968017402365, 4.063867101960689, 3.978478865312689, 9.842878755211594, 8.851582851360504, 6.7352524536163845], [7.987817164463513, 2.1886712305614453, 5.588533507607631, 5.472011602273373, 5.5718664755206815, 2.994207448311199, 1.194669761827637, 5.560822584105693, 4.514426987994112, 5.4409610048532056], [9.719882144324208, 8.412670452169785, 2.3258215610370714, 9.941264114463621, 6.014646048984746, 2.4793866257102835, 9.752519364600005, 9.915455116716199, 0.6557183930149124, 5.720551703333773]
        ]> : tensor<10x10xf64>
        %result_matrix = call @matmul(%t_sparse, %s, %c) :
            (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %c1 = arith.constant 1 : index
        %element_f64 = tensor.extract %result_matrix[%c1, %c1] : tensor<10x10xf64>
        %element_i64 = arith.fptosi %element_f64 : f64 to i64
        return %element_i64 : i64
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[8.951729, 6.358270, 4.932182, 4.898345, 8.601078, 8.729780, 3.842245, 5.139216, 9.422011]> : tensor<9xf64>
        %row_ptr = arith.constant dense<[0, 1, 4, 5, 6, 7, 7, 7, 8, 8, 9]> : tensor<11xindex>
        %col_ind = arith.constant dense<[4, 2, 4, 7, 0, 3, 9, 9, 9]> : tensor<9xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<9xindex>), tensor<9xf64> to tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }
    
}
