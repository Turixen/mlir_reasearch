// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @matmul(%t : tensor<10x10xf64, #CSR>, %s : tensor<10x10xf64>, %out : tensor<10x10xf64>)
        -> tensor<10x10xf64> {
        %0 = linalg.matmul
            ins(%t, %s: tensor<10x10xf64, #CSR>, tensor<10x10xf64>)
            outs(%out: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %0 : tensor<10x10xf64>
    }

    func.func @main() -> i64 {
        %c = tensor.empty() : tensor<10x10xf64>
        %t_sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %s = arith.constant dense<[
            [0.7473985925817295, 3.3726963971801105, 0.21443876747050172, 3.7125564651718834, 9.418969492754783, 5.6180430260083805, 7.304380166180604, 8.891254768752635, 0.055208936336775816, 8.944573662306341], [9.735295789222302, 6.165553772434142, 9.637288300757525, 8.8112664140516, 3.5485949099175507, 7.795444435440489, 2.506132464310574, 7.396111879834257, 8.799183842878186, 7.945023524262482], [8.520375206797508, 8.548867956052389, 4.230554800056332, 4.303724823868912, 3.825459468457412, 4.595763151649061, 6.532001673318475, 9.605567679805533, 4.4610296180464415, 7.947516959523162], [8.213394614356982, 9.68781830467514, 4.467806067779963, 6.498846968795765, 3.93417496204839, 4.908432637983165, 8.094050229755984, 9.825281881221832, 3.3571305342676983, 4.473251940922458], [8.370877548888272, 4.626813884347846, 8.993066803784542, 1.8732246486513204, 1.6670452903312083, 0.30083970810967364, 8.839795024495666, 3.1005805107127706, 3.5866618795578784, 5.646867829347608], [9.024974276181057, 6.474659986046333, 7.49773019877784, 9.85366493984715, 4.293081800602209, 6.880168322211694, 0.019928510432148938, 7.294736691534292, 3.9886947780273516, 3.2603945036032336], [1.471403775981286, 4.345908793231078, 9.687009136874792, 5.276587006122498, 9.879294379411284, 4.325809807224667, 5.5016754209854, 0.3060644918509259, 9.43242480679921, 1.9919321280485436], [2.5079320061420574, 2.896358924148691, 8.165841358033033, 2.4857238565795936, 3.707137482484235, 8.588675153567877, 2.793864061527703, 6.901341529395049, 9.71979147139519, 0.9740071687934915], [1.6262337238244717, 3.1825476863096593, 4.837770467983203, 5.436668544238833, 1.0345592177830765, 6.101267369470106, 8.004096191981633, 3.2910376822200806, 6.845230910585821, 9.16746672501101], [5.373685743616723, 2.412022367929745, 0.7328118952943974, 8.509742919044678, 1.1270700058993666, 3.0081995464878473, 1.584116622640661, 1.0435777170977412, 8.852005371380605, 7.101230566613244]
        ]> : tensor<10x10xf64>
        %result_matrix = call @matmul(%t_sparse, %s, %c) :
            (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %c1 = arith.constant 1 : index

        %element_f64 = tensor.extract %result_matrix[%c1, %c1] : tensor<10x10xf64>
        %element_i64 = arith.fptosi %element_f64 : f64 to i64
        return %element_i64 : i64
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[4.230835, 5.762038, 7.791981, 1.310833, 7.213168, 0.114660, 3.743349, 4.514432, 5.364506]> : tensor<9xf64>
        %row_ptr = arith.constant dense<[0, 0, 2, 2, 3, 5, 6, 6, 7, 9, 9]> : tensor<11xindex>
        %col_ind = arith.constant dense<[1, 7, 8, 1, 2, 8, 3, 1, 4]> : tensor<9xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<9xindex>), tensor<9xf64> to tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }
    
}
