// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @matmul(%t : tensor<10x10xf64, #CSR>, %s : tensor<10x10xf64>, %out : tensor<10x10xf64>)
        -> tensor<10x10xf64> {
        %0 = linalg.matmul
            ins(%t, %s: tensor<10x10xf64, #CSR>, tensor<10x10xf64>)
            outs(%out: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %0 : tensor<10x10xf64>
    }

    func.func @main() -> i64 {
        %c = tensor.empty() : tensor<10x10xf64>
        %t_sparse = call @test_assemble() : () -> tensor<10x10xf64, #CSR>
        %s = arith.constant dense<[
            [2.3335285092830595, 5.035599174453571, 5.814226997440998, 4.761590265805299, 3.2821466133115296, 7.67466110192108, 2.024637372323592, 3.2278344691393035, 9.141956112985062, 6.874464832950405], [0.8202309667107754, 1.072196188255039, 6.774571313122994, 9.715946949215459, 9.516888201273144, 8.259855474482354, 3.6373859150284904, 2.7222859614598836, 2.3719613843491705, 9.932999562979376], [5.887999280262654, 1.028238197160204, 2.0884738692652673, 6.085156270700965, 5.323643091513493, 7.923031290159301, 4.156547290192495, 8.537070514321286, 9.730394706840917, 5.379178171906092], [2.369910726319069, 5.807989766728204, 0.3097146317565158, 2.9903306198773363, 1.6522993028725463, 7.117115153801423, 2.306988825832822, 3.78142875849338, 4.667115204342562, 9.106434574274257], [8.49416115903587, 8.538702869417564, 8.009507767917913, 2.4940244396599764, 6.29769358842978, 8.941525044010863, 7.261984881381457, 9.549545742282996, 0.9659496068594542, 2.4831761897038773], [0.15622931364660864, 6.834006107793056, 1.7181256271745649, 6.63157426429425, 4.559982974600915, 4.518059004734881, 0.470336601559439, 3.1139729811065333, 2.089997123918652, 8.694785325421678], [1.285214553846099, 0.28163252747497314, 9.842754829929108, 6.924472428043832, 2.163459798455757, 9.39503026773225, 5.387770223160471, 4.215914005167827, 2.4043041004671895, 9.316651360111972], [7.595075898881502, 7.477988265699329, 8.29169170050139, 1.33342897205731, 1.3728452586759898, 8.43427936570187, 7.009886233853832, 7.598510973144203, 1.6773571096157647, 1.875114847540048], [3.2028124640846256, 4.62265056696041, 4.80145358990554, 2.2647271494987296, 4.717947177316162, 5.321448285645055, 7.929416162097965, 7.859297267778436, 7.370596356842217, 7.8427307340840615], [2.523602471482893, 2.061298424830793, 8.36246757096394, 9.340105112254253, 2.9153949802964654, 9.57828371454837, 0.9645050536108368, 6.0908696359861665, 2.138816678727722, 0.32177768603695145]
        ]> : tensor<10x10xf64>
        %result_matrix = call @matmul(%t_sparse, %s, %c) :
            (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %c1 = arith.constant 1 : index
        %element_f64 = tensor.extract %result_matrix[%c1, %c1] : tensor<10x10xf64>
        %element_i64 = arith.fptosi %element_f64 : f64 to i64
        return %element_i64 : i64
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[0.347503, 3.008478, 8.943307, 8.446470, 5.956686, 7.916454, 9.776651, 2.197713, 3.961290]> : tensor<9xf64>
        %row_ptr = arith.constant dense<[0, 1, 2, 2, 3, 5, 5, 6, 8, 8, 9]> : tensor<11xindex>
        %col_ind = arith.constant dense<[8, 7, 2, 2, 6, 6, 1, 7, 1]> : tensor<9xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<9xindex>), tensor<9xf64> to tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }
    
}
