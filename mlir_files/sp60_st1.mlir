// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @matmul(%t : tensor<10x10xf64, #CSR>, %s : tensor<10x10xf64>, %out : tensor<10x10xf64>)
        -> tensor<10x10xf64> {
        %0 = linalg.matmul
            ins(%t, %s: tensor<10x10xf64, #CSR>, tensor<10x10xf64>)
            outs(%out: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %0 : tensor<10x10xf64>
    }

    func.func @main() -> i64 {
        %c = tensor.empty() : tensor<10x10xf64>
        %t_sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %s = arith.constant dense<[
            [[4.356580, 9.270317, 0.433833, 5.300753, 8.453352, 3.199185, 5.363123, 9.632347, 1.399164, 8.624095], [4.011999, 8.867760, 0.835376, 6.641102, 4.199584, 7.996278, 5.008290, 5.474525, 9.113868, 1.027367], [0.679450, 6.179350, 6.376364, 6.715553, 4.850098, 1.177432, 4.811452, 6.775252, 6.237665, 4.897873], [8.625662, 5.118990, 5.018479, 9.576803, 2.172512, 0.371159, 7.996712, 9.624590, 8.140690, 4.195957], [6.663592, 1.792153, 0.684522, 6.909509, 3.338865, 2.624404, 4.557813, 3.657374, 9.512917, 7.476348], [3.799958, 7.917952, 7.809942, 0.333314, 2.377684, 8.669463, 4.811836, 2.581930, 3.513726, 3.066381], [1.435343, 0.176357, 5.156723, 0.008126, 8.524760, 0.040717, 9.445833, 9.284997, 9.089510, 4.085471], [7.522300, 0.152590, 2.067878, 4.456676, 8.085309, 2.667850, 9.663533, 2.168687, 9.235861, 5.347044], [8.246395, 2.486155, 1.920964, 5.050391, 4.034434, 9.567978, 6.286340, 1.055847, 0.765366, 7.915702], [3.127387, 1.818927, 8.660047, 2.839414, 9.827832, 0.100730, 7.370950, 4.693220, 7.307371, 7.637609]]
        ]> : tensor<10x10xf64>
        %result_matrix = call @matmul(%t_sparse, %s, %c) :
            (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %c1 = arith.constant 1 : index

        %element_f64 = tensor.extract %result_matrix[%c1, %c1] : tensor<10x10xf64>
        %element_i64 = arith.fptosi %element_f64 : f64 to i64
        return %element_i64 : i64
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[9.121986, 9.586703, 2.029535, 3.214250, 7.934605, 5.284635, 4.499778, 8.464611, 2.109290, 1.528908, 8.443122, 7.306784, 0.125970, 9.034602, 1.014614, 2.207753, 9.358032, 7.237058, 4.271700, 5.718780, 6.067291, 7.117428, 6.355327, 8.727395, 5.567337, 9.311269, 8.842530, 8.730332, 6.067379, 9.174927, 5.451373, 2.195701, 1.601730, 4.910706, 8.622005, 8.540909, 4.854685, 9.600000, 3.554387, 1.322722]> : tensor<40xf64>
        %row_ptr = arith.constant dense<[0, 2, 8, 13, 16, 21, 26, 29, 33, 36, 40]> : tensor<11xindex>
        %col_ind = arith.constant dense<[1, 7, 0, 1, 2, 6, 7, 9, 2, 3, 4, 5, 6, 0, 5, 9, 0, 1, 4, 8, 9, 3, 4, 6, 7, 9, 0, 1, 8, 1, 3, 5, 7, 0, 4, 5, 0, 1, 2, 4]> : tensor<40xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<40xindex>), tensor<40xf64> to tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }
    
}
