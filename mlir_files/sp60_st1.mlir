// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @sparse_dense_matmul(%sparse: tensor<10x10xf64, #CSR>,%dense: tensor<10x10xf64>,%init: tensor<10x10xf64>
    ) -> tensor<10x10xf64> {
        %res = linalg.matmul ins(%sparse, %dense: tensor<10x10xf64, #CSR>, tensor<10x10xf64>) 
            outs(%init: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %res : tensor<10x10xf64>
    }

    func.func @main() -> i32 {
        %c0 = arith.constant 0 : index
        %c1 = arith.constant 1 : index
        %rows = arith.constant 10 : index
        %cols = arith.constant 10 : index
        %zero_f64 = arith.constant 0.0 : f64

        %init = tensor.empty() : tensor<10x10xf64>
        %sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %dense = arith.constant dense<[[1.609722, 3.525854, 5.465467, 4.783633, 0.303369, 8.748225, 1.260956, 5.187587, 8.021913, 6.439223], [7.100345, 4.500567, 9.887268, 8.759556, 7.057435, 1.690850, 0.696807, 5.296074, 4.890635, 6.800202], [6.518892, 3.134359, 0.848078, 2.756183, 6.275079, 8.803552, 3.132610, 6.022788, 8.846349, 5.701344], [5.663337, 3.657712, 8.631971, 0.426258, 2.049483, 2.463250, 3.368166, 6.392600, 1.729663, 5.225739], [6.634965, 6.723220, 9.804782, 9.033491, 5.843724, 7.052175, 7.130145, 0.315156, 2.400859, 0.866295], [7.070878, 6.429445, 4.641282, 8.454192, 2.741989, 8.488461, 9.160675, 0.941035, 4.030373, 1.460742], [8.501811, 5.844574, 8.289785, 0.435027, 7.369025, 7.914435, 9.268145, 0.639643, 4.115693, 5.943438], [6.922894, 8.268828, 3.478751, 1.920361, 9.898488, 2.068334, 9.502137, 0.529967, 9.691808, 5.526497], [6.479661, 8.967528, 6.967617, 0.475681, 4.096326, 5.534075, 8.702264, 2.586268, 6.422398, 0.639472], [9.143243, 4.155135, 4.437438, 0.494297, 6.601256, 2.659218, 4.437851, 8.362653, 4.987285, 3.239238]]> : tensor<10x10xf64>

        %computed = call @sparse_dense_matmul(%sparse, %dense, %init) : (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %expected = arith.constant dense<[[201.023701, 122.488820, 168.008394, 100.320609, 187.345279, 173.419020, 125.373014, 105.255000, 162.423526, 165.995322], [202.495297, 132.535482, 217.208444, 98.946524, 152.622248, 137.875479, 110.613545, 167.875442, 153.067717, 165.679980], [102.693873, 70.933605, 94.581197, 67.431258, 80.913445, 62.399647, 72.841272, 56.726653, 49.912318, 31.097858], [151.261747, 152.113809, 143.959305, 109.708466, 159.169185, 114.234779, 149.703116, 61.489039, 179.240430, 138.635617], [147.119046, 125.706969, 60.762675, 87.760607, 141.052723, 138.242413, 151.352195, 58.597040, 168.215448, 96.200919], [125.987334, 112.958060, 120.323606, 97.137080, 151.112202, 35.502556, 88.859905, 54.441060, 130.239669, 111.031712], [243.646783, 184.597818, 171.566486, 63.671636, 218.899111, 165.740432, 195.603765, 173.265997, 242.354390, 184.585235], [110.382799, 105.735801, 144.591833, 56.335844, 86.777800, 85.065719, 90.607740, 98.637666, 121.796540, 125.075126], [148.948413, 146.211024, 157.580603, 72.397135, 143.964506, 79.088918, 157.970822, 58.212024, 120.136226, 99.758988], [121.505847, 132.770259, 117.532310, 61.227344, 61.185555, 112.337083, 147.646400, 48.627886, 89.080890, 30.701491]]> : tensor<10x10xf64>

        // Validate each element
        %false = arith.constant "false" : i1
        %flag = scf.for %i = %c0 to %rows step %c1 iter_args(%f_iter = %false) -> (i1) {
            %flag_row = scf.for %j = %c0 to %cols step %c1 iter_args(%f_in = %f_iter) -> (i1) {
                %cmp_c = tensor.extract %computed[%i, %j] : tensor<10x10xf64>
                %cmp_e = tensor.extract %expected[%i, %j] : tensor<10x10xf64>
                %neq = arith.cmpf une, %cmp_c, %cmp_e : f64
                %new_f = arith.ori %f_in, %neq : i1
                scf.yield %new_f : i1
            }
            scf.yield %flag_row : i1
        }

        %zero_i32 = arith.constant 0 : i32
        %one_i32 = arith.constant 1 : i32
        %status = scf.if %flag -> (i32) {
            scf.yield %one_i32 : i32
        } else {
            scf.yield %zero_i32 : i32
        }
        return %status : i32
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[8.012356, 9.395124, 9.749383, 6.102282, 7.041894, 4.031490, 5.108545, 8.356868, 0.899986, 5.828313, 0.468543, 5.941000, 4.917685, 5.045987, 2.632056, 2.563520, 9.694194, 8.131908, 6.044050, 7.420491, 9.122537, 0.260931, 8.596578, 5.140340, 4.726346, 4.642458, 2.823427, 9.383931, 9.766964, 5.551323, 1.760876, 9.012345, 5.475159, 8.036352, 5.599780, 9.574247, 2.852643, 6.591638, 8.843058, 0.157677]> : tensor<40xf64>
        %row_ptr = arith.constant dense<[0, 3, 8, 12, 17, 20, 23, 29, 33, 36, 40]> : tensor<11xindex>
        %col_ind = arith.constant dense<[1, 2, 6, 0, 1, 3, 6, 9, 1, 4, 5, 9, 0, 1, 5, 6, 7, 2, 5, 7, 1, 2, 7, 0, 2, 3, 6, 7, 9, 0, 1, 3, 7, 3, 4, 7, 3, 5, 8, 9]> : tensor<40xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<40xindex>), tensor<40xf64> to tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }

}
