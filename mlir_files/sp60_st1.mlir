// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @matmul(%t : tensor<10x10xf64, #CSR>, %s : tensor<10x10xf64>, %out : tensor<10x10xf64>)
        -> tensor<10x10xf64> {
        %0 = linalg.matmul
            ins(%t, %s: tensor<10x10xf64, #CSR>, tensor<10x10xf64>)
            outs(%out: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %0 : tensor<10x10xf64>
    }

    func.func @main() -> i64 {
        %c = tensor.empty() : tensor<10x10xf64>
        %t_sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %s = arith.constant dense<[
            [0.6582896091655577, 3.9354051891416555, 3.769429956315593, 8.738357444840524, 6.423936554879887, 8.39599979426705, 8.90927263004649, 6.658198743056652, 9.17239778620482, 1.2344009030161918], [2.939601867444156, 3.576573332283013, 9.214892036186884, 5.283149282636261, 7.9458791400169275, 0.8388498368449793, 2.7178320279979875, 7.399616069426546, 0.05013085475746082, 5.613340911945009], [0.09500698231892368, 5.121461036907528, 8.127883913681508, 8.025309602900881, 8.788608925804013, 8.215399094903217, 7.093360317448836, 0.1864804845581325, 3.145573255774581, 9.680672892522804], [4.24476106369191, 8.645191312364501, 1.2872643234941727, 7.316605874325186, 4.492404206086013, 4.0193536552529405, 2.067196645869127, 8.55328405461722, 9.29024091138485, 1.6625812495694658], [4.843669719132344, 6.467789436522045, 8.426144210981194, 2.1181239367918723, 2.3633190141214397, 4.891682626887559, 3.4794747109804245, 2.186822635991442, 5.110377017683687, 7.777028544191617], [8.251882325164575, 7.96395832889078, 7.931857608053342, 2.569817739982967, 4.086376620762859, 5.298231105900333, 2.517778800387147, 5.5323297576783945, 2.0666170701489395, 8.874859805190917], [5.14243414059375, 8.615379690692395, 0.6871652899455627, 3.7679232741530866, 2.9435595929946956, 2.6325372807716088, 2.4473491026897918, 8.645918652907818, 8.23518187800734, 0.3294667944736951], [9.260580264814656, 3.476299192459684, 5.276484599271135, 9.21805178823548, 7.234239934750324, 7.380376323297169, 5.464606667944785, 0.09735114550850521, 4.83392593783695, 2.1627192072084824], [9.117068639854729, 8.568127032478527, 8.553391674566933, 5.7713427366915315, 5.898572938630194, 7.73832890937531, 7.043540431239675, 3.1494656129016088, 1.5348115032731757, 7.604098182126529], [5.2977224200001025, 4.637310787471892, 8.200866480443693, 4.23957677392539, 2.880619123848568, 5.828694294709029, 6.034401248436838, 8.460993342369974, 9.671851463214459, 0.8866836258358124]
        ]> : tensor<10x10xf64>
        %result_matrix = call @matmul(%t_sparse, %s, %c) :
            (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %c1 = arith.constant 1 : index
        %element_f64 = tensor.extract %result_matrix[%c1, %c1] : tensor<10x10xf64>
        %element_i64 = arith.fptosi %element_f64 : f64 to i64
        return %element_i64 : i64
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[2.997586, 0.398765, 5.314364, 3.975319, 7.184125, 0.058315, 0.280391, 7.781553, 5.806365, 4.970884, 9.646195, 1.617603, 9.904219, 9.605894, 1.981331, 6.681980, 2.097836, 0.991425, 3.288358, 0.817420, 6.566577, 7.075648, 3.934470, 9.102659, 1.295089, 5.856929, 4.410887, 7.034859, 4.146438, 7.906051, 3.909956, 8.593182, 5.523338, 9.195397, 1.547153, 8.640301, 6.822484, 9.275954, 3.271724, 8.707175]> : tensor<40xf64>
        %row_ptr = arith.constant dense<[0, 4, 12, 14, 17, 19, 24, 29, 32, 35, 40]> : tensor<11xindex>
        %col_ind = arith.constant dense<[4, 5, 6, 8, 0, 1, 2, 4, 5, 6, 8, 9, 4, 7, 1, 8, 9, 1, 5, 0, 2, 3, 4, 9, 0, 1, 3, 6, 8, 0, 4, 8, 0, 4, 9, 0, 1, 3, 5, 8]> : tensor<40xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<40xindex>), tensor<40xf64> to tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }
    
}
