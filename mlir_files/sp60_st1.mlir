// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @sparse_dense_matmul(%sparse: tensor<10x10xf64, #CSR>,%dense: tensor<10x10xf64>,%init: tensor<10x10xf64>
    ) -> tensor<10x10xf64> {
        %res = linalg.matmul ins(%sparse, %dense: tensor<10x10xf64, #CSR>, tensor<10x10xf64>) 
            outs(%init: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %res : tensor<10x10xf64>
    }

    func.func @main() -> i32 {
        %c0 = arith.constant 0 : index
        %c1 = arith.constant 1 : index
        %rows = arith.constant 10 : index
        %cols = arith.constant 10 : index
        %zero_f64 = arith.constant 0.0 : f64

        %init = tensor.empty() : tensor<10x10xf64>
        %sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %dense = arith.constant dense<[[0.286304, 0.417947, 0.036821, 8.434861, 6.106410, 7.104478, 0.569897, 9.193978, 6.349005, 2.914479], [0.923871, 0.911989, 5.077321, 9.652246, 9.323424, 1.031851, 9.341316, 8.856226, 7.297832, 9.283170], [2.076672, 9.454403, 8.979442, 6.668625, 2.914074, 6.912204, 9.799106, 7.560953, 4.723999, 9.712577], [9.390194, 5.299172, 7.064952, 9.659521, 2.609722, 9.295251, 5.890009, 0.333849, 1.616274, 8.276231], [5.726006, 0.045269, 4.438632, 8.851685, 1.578745, 0.030890, 9.581264, 8.719400, 0.875480, 6.928246], [8.078173, 1.158061, 9.830907, 4.860587, 4.610105, 7.736301, 9.237090, 4.804913, 4.240121, 1.043057], [6.821654, 0.659230, 5.654147, 4.790416, 6.558065, 2.895146, 9.355211, 8.041689, 7.560601, 0.642626], [5.703573, 7.923782, 5.605103, 1.832313, 3.333243, 9.651069, 2.905603, 2.542885, 0.714402, 1.330706], [8.759521, 4.200371, 4.938510, 9.296090, 6.856162, 8.151997, 6.794631, 6.645936, 2.439123, 4.659838], [1.760544, 9.480541, 7.299634, 5.291645, 2.699213, 6.177224, 6.007595, 6.494823, 0.183388, 9.135654]]> : tensor<10x10xf64>

        %computed = call @sparse_dense_matmul(%sparse, %dense, %init) : (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %expected = arith.constant dense<[[87.543947, 29.961214, 72.707632, 76.477089, 60.941637, 82.438783, 81.054651, 60.560729, 33.186948, 32.169022], [32.188094, 24.083559, 37.906372, 108.942305, 55.982903, 66.601534, 63.480990, 115.643757, 57.005019, 67.912184], [315.308310, 153.722213, 304.804307, 340.208656, 221.856132, 284.574490, 383.926123, 314.142697, 182.320972, 213.035137], [124.363850, 165.265736, 200.139941, 302.208863, 199.539300, 222.629901, 258.130079, 317.644044, 161.688763, 253.879514], [0.313838, 0.150492, 0.176938, 0.333062, 0.245644, 0.292071, 0.243439, 0.238112, 0.087389, 0.166953], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [204.291574, 107.597413, 251.861706, 247.454978, 175.228994, 206.496144, 285.836874, 181.601512, 155.357462, 188.185816], [91.526053, 15.786909, 124.875568, 137.587864, 100.752167, 64.438359, 170.817939, 131.616461, 81.468875, 98.713726], [98.116558, 134.503109, 130.306717, 88.726266, 92.974649, 143.954019, 122.238519, 119.493950, 57.540429, 83.744974], [71.533578, 107.383129, 149.789589, 139.471925, 113.730709, 94.709724, 196.312298, 168.524345, 120.533775, 143.365229]]> : tensor<10x10xf64>

        // Validate each element
        %false = arith.constant false : i1
        %flag = scf.for %i = %c0 to %rows step %c1 iter_args(%f_iter = %false) -> (i1) {
            %flag_row = scf.for %j = %c0 to %cols step %c1 iter_args(%f_in = %f_iter) -> (i1) {
                %cmp_c = tensor.extract %computed[%i, %j] : tensor<10x10xf64>
                %cmp_e = tensor.extract %expected[%i, %j] : tensor<10x10xf64>
                %neq = arith.cmpf une, %cmp_c, %cmp_e : f64
                %new_f = arith.or %f_in, %neq : i1
                scf.yield %new_f : i1
            }
            scf.yield %flag_row : i1
        }

        %zero_i32 = arith.constant 0 : i32
        %one_i32 = arith.constant 1 : i32
        %status = scf.if %flag -> (i32) {
            scf.yield %one_i32 : i32
        } else {
            scf.yield %zero_i32 : i32
        }
        return %status : i32
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[4.425526, 5.912855, 6.967579, 1.864993, 4.175491, 0.422786, 2.556432, 5.971738, 4.078925, 7.745901, 7.953928, 8.801799, 2.612073, 9.170125, 9.939322, 7.652903, 6.094310, 8.220666, 8.711182, 2.860232, 0.035828, 6.814654, 4.313308, 7.712820, 9.787064, 3.679218, 1.421718, 6.390388, 4.561853, 7.244175, 0.172043, 0.543154, 0.923991, 5.282262, 8.728862, 6.411618, 4.165119, 8.026516, 6.847565, 2.445488]> : tensor<40xf64>
        %row_ptr = arith.constant dense<[0, 2, 6, 14, 20, 21, 21, 27, 31, 36, 40]> : tensor<11xindex>
        %col_ind = arith.constant dense<[5, 8, 0, 2, 4, 7, 0, 2, 3, 4, 5, 6, 7, 8, 0, 1, 2, 4, 7, 9, 8, 1, 2, 3, 5, 6, 8, 1, 4, 5, 7, 0, 1, 6, 7, 9, 1, 2, 6, 9]> : tensor<40xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<40xindex>), tensor<40xf64> -> tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }

}
