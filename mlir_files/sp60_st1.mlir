// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @matmul(%t : tensor<10x10xf64, #CSR>, %s : tensor<10x10xf64>, %out : tensor<10x10xf64>)
        -> tensor<10x10xf64> {
        %0 = linalg.matmul
            ins(%t, %s: tensor<10x10xf64, #CSR>, tensor<10x10xf64>)
            outs(%out: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %0 : tensor<10x10xf64>
    }

    func.func @main() -> i64 {
        %c = tensor.empty() : tensor<10x10xf64>
        %t_sparse = call @test_assemble() : () -> tensor<10x10xf64, #CSR>
        %s = arith.constant dense<[
            [7.735792040084321, 5.417084892060153, 6.960021305963101, 3.521201616315804, 4.853602745239578, 9.264645883838924, 8.191533791261863, 1.3929333529124988, 7.303216418901304, 1.8972962048794118], [5.729252519414735, 7.69851062905774, 5.034374930993612, 9.415886850233179, 4.96191684158846, 2.0202580084529522, 2.934331922812757, 4.443192987962005, 8.163375188483116, 1.878444188980346], [8.671737367141874, 2.548114700912778, 1.511073719531072, 8.334450892508965, 3.7349484756521867, 8.961267486694805, 9.368891955598835, 4.602623150711219, 6.804975898387561, 4.995679022086097], [1.0546366347771552, 8.166410665325264, 6.138474695150224, 7.0937650155973255, 2.2355139352741302, 1.2358549119379503, 8.569832712782194, 8.973873460425521, 8.853110642211847, 0.00388932475583581], [5.639516849852986, 6.286648800268048, 1.9759950986314068, 7.196749524206299, 3.3586572488626034, 2.267256427762745, 0.9855702394834598, 6.456918926594798, 7.762858601146682, 9.316180114399904], [1.9790450304187779, 3.3978016066751957, 8.863182719530041, 4.08815415226421, 2.5383312474387045, 0.9295687583004397, 4.227114313647111, 8.216076805360169, 3.7947054095931767, 3.761195056304374], [6.00964058738875, 3.022168269887777, 7.884180185156775, 0.1349547559931441, 7.45652506412969, 6.4048099437448744, 2.0350478977962725, 6.355567045109915, 0.9093697354325125, 6.167821992559062], [9.281396967211384, 0.3700948915948976, 6.033817236186236, 3.3825709345066155, 8.920650628058128, 8.506895361666553, 2.803494324834208, 4.144949856046237, 8.86516701984482, 4.117449110947221], [8.497960199477925, 9.599045851066299, 3.435698878604083, 0.7946959781156393, 0.2802096940804921, 9.324141469386984, 3.3779932932456678, 4.35341176471373, 3.6592878954449937, 7.879517906586143], [8.129438292553736, 8.092944193573363, 6.907411081846523, 0.35684214699532313, 6.039154683514493, 6.119147145697133, 1.137065681841154, 1.5774297647467495, 2.736618412116049, 9.701734066782125]
        ]> : tensor<10x10xf64>
        %result_matrix = call @matmul(%t_sparse, %s, %c) :
            (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %c1 = arith.constant 1 : index
        %element_f64 = tensor.extract %result_matrix[%c1, %c1] : tensor<10x10xf64>
        %element_i64 = arith.fptosi %element_f64 : f64 to i64
        return %element_i64 : i64
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[8.862351, 4.956516, 0.533463, 3.120593, 2.437759, 6.401462, 2.425247, 1.835039, 0.884467, 2.860503, 2.583385, 4.141550, 5.634888, 0.831566, 4.517060, 2.410738, 7.301284, 2.578352, 5.893688, 5.137369, 2.363009, 8.660066, 0.835861, 4.273368, 0.563629, 8.897013, 3.192345, 9.942533, 2.878966, 2.446967, 7.505915, 9.220631, 0.810472, 9.973849, 9.092030, 6.678420, 8.197251, 8.274705, 5.606776, 9.212758]> : tensor<40xf64>
        %row_ptr = arith.constant dense<[0, 2, 4, 8, 13, 17, 21, 26, 31, 36, 40]> : tensor<11xindex>
        %col_ind = arith.constant dense<[5, 7, 7, 8, 0, 3, 7, 8, 0, 3, 4, 5, 7, 1, 2, 7, 9, 1, 6, 7, 8, 0, 2, 7, 8, 9, 0, 2, 3, 6, 9, 0, 3, 4, 7, 8, 3, 4, 5, 8]> : tensor<40xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<40xindex>), tensor<40xf64> to tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }
    
}
