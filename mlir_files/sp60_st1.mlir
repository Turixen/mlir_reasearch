// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @sparse_dense_matmul(%sparse: tensor<10x10xf64, #CSR>,%dense: tensor<10x10xf64>,%init: tensor<10x10xf64>
    ) -> tensor<10x10xf64> {
        %res = linalg.matmul ins(%sparse, %dense: tensor<10x10xf64, #CSR>, tensor<10x10xf64>) 
            outs(%init: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %res : tensor<10x10xf64>
    }

    func.func @main() -> i32 {
        %c0 = arith.constant 0 : index
        %c1 = arith.constant 1 : index
        %rows = arith.constant 10 : index
        %cols = arith.constant 10 : index
        %zero_f64 = arith.constant 0.0 : f64

        %init = tensor.empty() : tensor<10x10xf64>
        %sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %dense = arith.constant dense<[[5.720608, 1.798276, 4.813814, 7.140140, 6.116447, 3.798132, 5.681669, 2.776655, 0.398097, 9.827045], [2.916549, 5.848152, 9.713124, 5.926042, 6.368039, 3.758585, 2.264406, 3.570067, 9.839104, 6.068805], [1.463447, 2.765425, 6.704711, 3.923356, 2.822142, 8.750635, 6.263301, 0.943461, 2.833052, 1.603954], [8.233670, 4.416676, 1.160975, 4.633449, 7.092890, 6.360433, 4.904456, 6.127348, 0.667867, 9.043266], [2.563689, 3.258991, 9.773114, 6.441076, 7.905723, 1.163487, 4.897325, 4.288009, 1.744229, 1.143907], [3.186524, 8.067124, 0.879548, 5.448166, 2.906175, 2.238679, 0.915513, 1.503532, 4.895848, 0.809368], [8.234561, 4.756037, 1.714117, 9.724682, 0.119151, 5.225433, 6.596894, 7.408394, 5.031057, 3.941061], [3.138362, 8.280760, 4.390114, 4.646054, 0.050548, 4.109190, 8.243320, 5.962587, 8.837011, 2.365318], [5.640670, 4.588954, 3.909044, 7.250107, 8.637248, 9.227939, 0.564845, 6.055058, 0.913588, 5.865418], [6.456886, 4.789191, 3.935738, 4.521087, 8.008035, 1.871572, 0.426065, 2.173428, 0.140603, 2.582360]]> : tensor<10x10xf64>

        %computed = call @sparse_dense_matmul(%sparse, %dense, %init) : (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %expected = arith.constant dense<[[90.212061, 66.245235, 65.300079, 117.489857, 116.092910, 103.788138, 44.589538, 70.084937, 20.666657, 114.319754], [28.771560, 25.251662, 35.041091, 29.635505, 43.640368, 15.756019, 13.586360, 15.362127, 7.072121, 13.425909], [111.712441, 83.106354, 73.646951, 109.359871, 150.830122, 97.609345, 15.659983, 72.904434, 9.289791, 83.927044], [88.215266, 100.088441, 164.121119, 149.546975, 165.734576, 162.984005, 75.951730, 100.360796, 71.590357, 95.954407], [59.530064, 94.148684, 44.007843, 87.997597, 49.943659, 49.098100, 60.195812, 42.623809, 66.344720, 58.276126], [50.076940, 71.439475, 60.579936, 79.616129, 66.629953, 63.574424, 37.054543, 36.225594, 56.059769, 57.508296], [116.980195, 160.666634, 65.080712, 120.449204, 78.878175, 91.270611, 109.824626, 106.105231, 114.019106, 81.792870], [20.436998, 41.632242, 79.143325, 48.932708, 32.934053, 94.624599, 73.625662, 19.079630, 45.985377, 23.318239], [52.060406, 57.800990, 69.514174, 66.637957, 84.836933, 20.241032, 28.606995, 35.597406, 20.401088, 20.417044], [109.997919, 99.873530, 40.278048, 135.771585, 27.601037, 84.567463, 91.117934, 104.164169, 87.567360, 58.428247]]> : tensor<10x10xf64>

        // Validate each element
        %false = arith.constant "false" : i1
        %flag = scf.for %i = %c0 to %rows step %c1 iter_args(%f_iter = %false) -> (i1) {
            %flag_row = scf.for %j = %c0 to %cols step %c1 iter_args(%f_in = %f_iter) -> (i1) {
                %cmp_c = tensor.extract %computed[%i, %j] : tensor<10x10xf64>
                %cmp_e = tensor.extract %expected[%i, %j] : tensor<10x10xf64>
                %neq = arith.cmpf une, %cmp_c, %cmp_e : f64
                %new_f = arith.or %f_in, %neq : i1
                scf.yield %new_f : i1
            }
            scf.yield %flag_row : i1
        }

        %zero_i32 = arith.constant 0 : i32
        %one_i32 = arith.constant 1 : i32
        %status = scf.if %flag -> (i32) {
            scf.yield %one_i32 : i32
        } else {
            scf.yield %zero_i32 : i32
        }
        return %status : i32
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[6.703868, 2.191473, 7.956268, 0.201774, 0.749095, 1.406532, 3.636568, 1.263569, 8.234574, 8.988162, 3.756888, 5.938017, 5.039594, 9.865528, 4.520510, 0.295015, 7.330075, 3.148394, 2.471669, 2.506443, 1.901479, 4.758669, 1.893569, 4.703674, 5.484431, 1.200389, 8.767501, 3.620189, 0.758846, 9.936560, 1.173272, 4.913122, 2.209664, 0.063329, 4.940780, 2.398097, 9.715869, 2.865619, 1.683438, 0.598020]> : tensor<40xf64>
        %row_ptr = arith.constant dense<[0, 3, 7, 10, 14, 18, 23, 28, 31, 35, 40]> : tensor<11xindex>
        %col_ind = arith.constant dense<[0, 5, 8, 1, 2, 4, 9, 0, 8, 9, 1, 2, 4, 8, 0, 2, 5, 7, 0, 1, 2, 5, 8, 3, 5, 6, 7, 9, 1, 2, 7, 4, 5, 6, 9, 5, 6, 7, 8, 9]> : tensor<40xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<40xindex>), tensor<40xf64> -> tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }

}
