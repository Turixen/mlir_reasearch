// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @matmul(%t : tensor<10x10xf64, #CSR>, %s : tensor<10x10xf64>, %out : tensor<10x10xf64>)
        -> tensor<10x10xf64> {
        %0 = linalg.matmul
            ins(%t, %s: tensor<10x10xf64, #CSR>, tensor<10x10xf64>)
            outs(%out: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %0 : tensor<10x10xf64>
    }

    func.func @main() -> i64 {
        %c = tensor.empty() : tensor<10x10xf64>
        %t_sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %s = arith.constant dense<[
            [9.92174533554888, 8.403578186130531, 1.2034524520609868, 7.340928627667335, 0.23684423417199008, 9.39835920329676, 6.886919121091065, 5.313429382889735, 3.155153311568074, 5.827628754807941], [6.613937259501856, 6.11017606761867, 0.13638458733890246, 4.246207449036717, 2.3999026612013417, 2.694807972384509, 1.7848214165526743, 4.85321478916844, 7.7699953028440305, 1.8188657383689255], [9.43320949478589, 1.3694353845610086, 6.482546853623563, 8.919696096706105, 3.0014870216714296, 3.6488602745758225, 9.026069956215974, 7.636008209911045, 9.69321646403316, 8.149347534017974], [8.679013647357573, 0.7053625742094105, 9.240499463068977, 9.01057428471566, 9.78722887061293, 3.1545179615867927, 2.318752611978232, 2.8483624617237524, 8.728389288951053, 6.033394935335927], [4.095091098037203, 2.408554033166299, 2.5999570696039442, 8.645676778459949, 2.2725932215609, 7.813023268984399, 6.2969978550868095, 7.227606867509256, 8.457087258862117, 0.7350351028893809], [0.40644952451977967, 2.3037204649367826, 1.9760546499063913, 6.157314903048156, 7.989695760648191, 2.3922892247830707, 4.374313185646907, 3.9599897394972015, 6.501703299440884, 6.167520125548283], [7.366260358391065, 8.984317302344326, 5.888778996339184, 7.989676566492035, 0.9456380926071761, 4.19136418428971, 7.701976932832527, 6.090512414337171, 5.406900825603701, 5.74302263420455], [0.1457167810765636, 7.016744534687782, 1.69087111558753, 8.672433904063062, 8.064608791688999, 7.106367796493202, 0.49020566256521514, 8.57019507753845, 8.466368318189078, 8.116475108235663], [4.366874899921759, 6.928151108418893, 3.2631587522384, 4.7444859093012575, 8.529123927303425, 5.97229131274323, 4.30985807527153, 9.878901051412912, 8.856850804835124, 7.391510345247686], [5.925283898664977, 7.939778540155164, 6.449016665686452, 1.1978300276576481, 8.647383651878775, 5.299181145001468, 9.519702631545574, 0.8840880441452337, 8.432090264486455, 8.849464021483236]
        ]> : tensor<10x10xf64>
        %result_matrix = call @matmul(%t_sparse, %s, %c) :
            (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %c1 = arith.constant 1 : index

        %element_f64 = tensor.extract %result_matrix[%c1, %c1] : tensor<10x10xf64>
        %element_i64 = arith.fptosi %element_f64 : f64 to i64
        return %element_i64 : i64
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[8.168187, 3.215397, 7.260420, 4.589213, 5.945034, 6.168831, 8.168427, 3.016442, 0.055673, 3.084247, 5.974706, 2.861949, 1.019573, 8.707307, 4.981407, 4.068991, 5.260861, 5.693078, 3.674398, 4.486293, 5.579481, 8.333557, 2.156958, 1.782882, 0.629907, 4.606357, 7.212142, 3.411173, 9.483682, 3.049423, 3.980609, 8.127122, 0.923418, 8.683569, 4.862135, 4.845505, 9.985336, 0.819841, 0.754678, 3.582558]> : tensor<40xf64>
        %row_ptr = arith.constant dense<[0, 2, 7, 9, 13, 17, 21, 26, 31, 34, 40]> : tensor<11xindex>
        %col_ind = arith.constant dense<[3, 6, 0, 3, 4, 5, 7, 1, 5, 3, 6, 7, 8, 2, 4, 8, 9, 2, 4, 5, 8, 0, 2, 6, 8, 9, 1, 2, 3, 4, 6, 3, 4, 7, 0, 1, 2, 4, 6, 7]> : tensor<40xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<40xindex>), tensor<40xf64> to tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }
    
}
