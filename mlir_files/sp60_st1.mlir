// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @sparse_dense_matmul(%sparse: tensor<10x10xf64, #CSR>,%dense: tensor<10x10xf64>,%init: tensor<10x10xf64>
    ) -> tensor<10x10xf64> {
        %res = linalg.matmul ins(%sparse, %dense: tensor<10x10xf64, #CSR>, tensor<10x10xf64>) 
            outs(%init: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %res : tensor<10x10xf64>
    }

    func.func @main() -> i32 {
        %c0 = arith.constant 0 : index
        %c1 = arith.constant 1 : index
        %rows = arith.constant 10 : index
        %cols = arith.constant 10 : index
        %zero_f64 = arith.constant 0.0 : f64

        %init = tensor.empty() : tensor<10x10xf64>
        %sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %dense = arith.constant dense<[[8.411241, 4.372139, 9.042536, 3.187858, 5.805850, 8.980512, 6.853306, 6.270389, 3.168397, 3.622336], [0.678479, 8.800814, 6.910047, 2.681948, 5.779270, 6.847048, 6.605191, 7.322340, 8.969638, 2.194298], [5.372558, 5.655148, 1.893736, 4.559820, 2.089025, 6.647409, 4.598937, 6.537019, 9.045586, 7.916572], [5.409249, 2.186808, 9.732106, 7.395318, 4.584457, 4.693857, 4.753372, 0.705186, 9.713939, 8.908666], [9.438367, 4.572593, 4.305489, 6.306728, 8.313050, 1.940646, 9.929135, 1.235362, 1.931746, 0.519684], [9.472157, 5.703495, 9.808399, 0.197221, 6.313572, 8.834232, 5.711028, 9.949637, 3.720603, 7.974664], [3.923552, 2.667583, 7.595061, 3.220275, 2.206453, 9.455852, 3.999896, 6.935338, 7.005048, 5.131843], [8.676186, 4.460905, 2.462799, 0.528417, 7.191761, 7.486309, 5.165966, 4.139486, 9.991706, 0.136031], [5.902146, 4.352260, 7.707450, 0.893968, 1.439703, 7.778013, 8.170184, 4.180444, 6.769190, 6.708622], [2.753718, 7.215619, 8.123547, 1.858586, 4.719378, 3.127585, 8.379325, 1.586039, 0.029828, 8.244117]]> : tensor<10x10xf64>

        %computed = call @sparse_dense_matmul(%sparse, %dense, %init) : (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %expected = arith.constant dense<[[88.848249, 69.703169, 44.696443, 46.904405, 49.510377, 91.547084, 77.063093, 71.465873, 117.481016, 77.901450], [202.622093, 157.412752, 236.960128, 84.313643, 144.426655, 189.828622, 252.801354, 116.113345, 105.745541, 158.006519], [135.606864, 98.947333, 63.332728, 39.524880, 100.501010, 132.574776, 103.377021, 94.584387, 159.241106, 72.938624], [154.394751, 201.881299, 213.582758, 103.632583, 117.331447, 268.834040, 216.436323, 221.871245, 272.815061, 189.630277], [138.482810, 112.780855, 140.929325, 36.715018, 108.885748, 168.294343, 148.330824, 101.279282, 155.521715, 103.105195], [41.929511, 41.635889, 22.338494, 30.058294, 15.154668, 52.517496, 40.080305, 46.986108, 66.339460, 59.112994], [56.991195, 42.684224, 23.246591, 42.871268, 37.143981, 39.090820, 54.754459, 36.269612, 50.905442, 40.772909], [141.017312, 154.850531, 170.101216, 83.598067, 104.649670, 223.881154, 143.184221, 212.887493, 209.452914, 173.811072], [106.467866, 78.264153, 157.768167, 61.057334, 79.743055, 174.055129, 106.381527, 129.735894, 108.133396, 81.037446], [221.106827, 171.675702, 238.774988, 93.106731, 168.745635, 178.589193, 265.819472, 130.996089, 112.023106, 177.852574]]> : tensor<10x10xf64>

        // Validate each element
        %false = arith.constant "false" : i1
        %flag = scf.for %i = %c0 to %rows step %c1 iter_args(%f_iter = %false) -> (i1) {
            %flag_row = scf.for %j = %c0 to %cols step %c1 iter_args(%f_in = %f_iter) -> (i1) {
                %cmp_c = tensor.extract %computed[%i, %j] : tensor<10x10xf64>
                %cmp_e = tensor.extract %expected[%i, %j] : tensor<10x10xf64>
                %neq = arith.cmpf une, %cmp_c, %cmp_e : f64
                %new_f = arith.ori %f_in, %neq : i1
                scf.yield %new_f : i1
            }
            scf.yield %flag_row : i1
        }

        %zero_i32 = arith.constant 0 : i32
        %one_i32 = arith.constant 1 : i32
        %status = scf.if %flag -> (i32) {
            scf.yield %one_i32 : i32
        } else {
            scf.yield %zero_i32 : i32
        }
        return %status : i32
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[7.605428, 0.439757, 0.901464, 2.967772, 1.923300, 9.136479, 0.148998, 5.274355, 9.611908, 6.957751, 0.758363, 6.216000, 0.546555, 9.860393, 1.853717, 3.421234, 9.486502, 9.814858, 4.746752, 8.103242, 5.572679, 8.931751, 3.999488, 5.635658, 6.328625, 1.343343, 4.938478, 3.227140, 5.279550, 9.639006, 5.913938, 7.552182, 8.250218, 2.036963, 9.096670, 9.725149, 5.434135, 3.020285, 7.627781, 7.616539]> : tensor<40xf64>
        %row_ptr = arith.constant dense<[0, 5, 10, 15, 20, 24, 26, 28, 32, 35, 40]> : tensor<11xindex>
        %col_ind = arith.constant dense<[2, 3, 4, 7, 8, 0, 1, 4, 8, 9, 0, 2, 5, 7, 9, 0, 1, 2, 6, 8, 6, 7, 8, 9, 2, 8, 2, 4, 1, 2, 5, 6, 0, 1, 6, 4, 5, 6, 8, 9]> : tensor<40xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<40xindex>), tensor<40xf64> -> tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }

}
