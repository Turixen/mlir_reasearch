// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @sparse_dense_matmul(%sparse: tensor<10x10xf64, #CSR>,%dense: tensor<10x10xf64>,%init: tensor<10x10xf64>
    ) -> tensor<10x10xf64> {
        %res = linalg.matmul ins(%sparse, %dense: tensor<10x10xf64, #CSR>, tensor<10x10xf64>) 
            outs(%init: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %res : tensor<10x10xf64>
    }

    func.func @main() -> i32 {
        %c0 = arith.constant 0 : index
        %c1 = arith.constant 1 : index
        %rows = arith.constant 10 : index
        %cols = arith.constant 10 : index
        %zero_f64 = arith.constant 0.0 : f64

        %init = tensor.empty() : tensor<10x10xf64>
        %sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %dense = arith.constant dense<[[8.889202, 8.489705, 8.633808, 3.458997, 2.441191, 1.011786, 1.821414, 8.336592, 3.710747, 8.043727], [9.077188, 5.480099, 1.472460, 4.269403, 4.625908, 6.736599, 8.109121, 0.377315, 0.089481, 5.993250], [7.522091, 7.697573, 6.374591, 5.848814, 3.934840, 7.935159, 6.322281, 0.269146, 3.051917, 2.651982], [4.631967, 4.081176, 1.938773, 6.808194, 1.555708, 9.328040, 6.634852, 4.635595, 9.987863, 3.853018], [4.815346, 5.553336, 7.272979, 1.621395, 2.376037, 8.214124, 1.163385, 4.504952, 8.631064, 7.897573], [6.976725, 1.583491, 3.553785, 4.401912, 1.200484, 5.443144, 4.714401, 0.101518, 1.870711, 5.862272], [4.784256, 1.600181, 5.996371, 7.053875, 6.788919, 3.025227, 6.043245, 5.066701, 5.384332, 4.449397], [9.813934, 5.831371, 5.460929, 9.453739, 6.710356, 9.301458, 6.515020, 9.621212, 7.001543, 6.323487], [7.754469, 0.375098, 7.554260, 9.385166, 2.686573, 5.269343, 6.414598, 9.443979, 2.957706, 7.415772], [5.927656, 3.082692, 1.467555, 9.860755, 1.569988, 9.434893, 7.666921, 7.594049, 7.134140, 5.837585]]> : tensor<10x10xf64>

        %computed = call @sparse_dense_matmul(%sparse, %dense, %init) : (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %expected = arith.constant dense<[[124.693472, 83.457562, 103.160244, 148.382668, 82.949314, 118.734859, 125.270080, 130.038883, 147.023119, 113.155053], [47.947380, 25.237258, 23.281665, 50.225420, 12.268655, 64.937421, 49.697611, 25.189617, 55.508654, 40.323434], [80.027933, 48.314630, 12.981765, 37.640674, 40.783763, 59.392412, 71.493089, 3.326549, 0.788895, 52.838768], [171.595578, 123.169274, 99.644863, 144.940306, 91.156007, 170.432129, 156.434707, 110.909976, 144.158048, 146.528666], [118.388855, 65.460058, 124.925995, 108.729756, 53.678089, 117.453682, 85.585538, 97.825800, 82.254438, 109.671133], [1.622761, 1.549831, 1.576138, 0.631454, 0.445650, 0.184706, 0.332507, 1.521880, 0.677413, 1.468416], [168.441801, 128.978560, 89.676467, 171.306149, 71.012839, 192.797633, 159.096354, 123.864330, 151.644099, 125.577767], [194.055518, 136.280460, 68.318169, 177.311353, 84.994758, 220.920286, 200.230453, 82.658903, 115.815902, 133.613506], [333.266375, 182.169759, 128.897487, 324.534351, 141.973769, 371.785523, 308.314742, 211.321469, 244.783384, 256.678085], [134.872152, 84.313755, 71.183656, 196.531504, 67.288140, 191.831504, 165.178133, 151.888320, 187.049602, 122.717147]]> : tensor<10x10xf64>

        // Validate each element
        %false = arith.constant "false" : i1
        %flag = scf.for %i = %c0 to %rows step %c1 iter_args(%f_iter = %false) -> (i1) {
            %flag_row = scf.for %j = %c0 to %cols step %c1 iter_args(%f_in = %f_iter) -> (i1) {
                %cmp_c = tensor.extract %computed[%i, %j] : tensor<10x10xf64>
                %cmp_e = tensor.extract %expected[%i, %j] : tensor<10x10xf64>
                %neq = arith.cmpf une, %cmp_c, %cmp_e : f64
                %new_f = arith.or %f_in, %neq : i1
                scf.yield %new_f : i1
            }
            scf.yield %flag_row : i1
        }

        %zero_i32 = arith.constant 0 : i32
        %one_i32 = arith.constant 1 : i32
        %status = scf.if %flag -> (i32) {
            scf.yield %one_i32 : i32
        } else {
            scf.yield %zero_i32 : i32
        }
        return %status : i32
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[4.018815, 6.400226, 8.596765, 3.069452, 4.851786, 3.373991, 0.249490, 8.816379, 3.283225, 7.157719, 7.501928, 2.356743, 4.429486, 1.712204, 4.393252, 5.007038, 0.639279, 7.501909, 0.182554, 2.943885, 2.740580, 3.923456, 7.224963, 0.429153, 1.870026, 5.737916, 9.753985, 5.366472, 4.567095, 7.421998, 8.252311, 9.013242, 9.440628, 9.369377, 9.918667, 1.013140, 8.337663, 4.703912, 0.671866, 9.809611]> : tensor<40xf64>
        %row_ptr = arith.constant dense<[0, 4, 7, 8, 14, 18, 19, 26, 30, 35, 40]> : tensor<11xindex>
        %col_ind = arith.constant dense<[0, 3, 6, 9, 3, 5, 8, 1, 0, 1, 3, 4, 6, 9, 2, 4, 6, 8, 0, 0, 1, 2, 3, 6, 7, 9, 1, 2, 3, 9, 1, 3, 5, 7, 9, 0, 3, 6, 7, 9]> : tensor<40xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<40xindex>), tensor<40xf64> -> tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }

}
