// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @matmul(%t : tensor<10x10xf64, #CSR>, %s : tensor<10x10xf64>, %out : tensor<10x10xf64>)
        -> tensor<10x10xf64> {
        %0 = linalg.matmul
            ins(%t, %s: tensor<10x10xf64, #CSR>, tensor<10x10xf64>)
            outs(%out: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %0 : tensor<10x10xf64>
    }

    func.func @main() -> i64 {
        %c = tensor.empty() : tensor<10x10xf64>
        %t_sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %s = arith.constant dense<[
            [9.93594880953406, 8.209187780670227, 6.843427963250277, 5.865038677711125, 4.330060660676866, 6.655060681322032, 8.003238670815923, 1.419166483367249, 6.991577528900042, 2.0319888480282877], [8.65632454735738, 9.008052028354106, 4.568481558120098, 2.4206561805499236, 2.0836701588194027, 0.8067213475182289, 8.649162342736918, 9.704025852282323, 1.053471728391857, 4.3315685141674685], [5.501122597640697, 7.846696696854169, 7.438084775486437, 7.436760396653886, 1.6489981133142928, 9.533078643810272, 8.762973417433429, 4.79835372627956, 6.184324447658577, 6.0158572214536665], [3.697512608994092, 4.008810478891148, 5.089667705862136, 9.856890313551533, 9.411139347441818, 2.2163159408659916, 3.6942722659774887, 3.091410987638107, 7.729692072888343, 4.8617751838360075], [7.312595566875769, 6.35442108746606, 0.9532449678195598, 9.197144413815412, 4.763971880765464, 5.869825984329711, 5.530743187798909, 2.0297499713917744, 2.2934269838178203, 1.8590032810125623], [6.780358840486652, 2.135109527633323, 6.44394537622582, 4.658357680286648, 2.0401476529592957, 5.10000327641264, 7.52668394438852, 2.0334377644340296, 3.0963774569177795, 2.056789734771036], [1.7358063194680184, 8.660761534465603, 6.6402443542303144, 1.6697315625321096, 8.183344453489896, 4.842903812770486, 8.699873038504368, 4.420662015953684, 1.7447056694793628, 0.7598759789557874], [7.423493932501666, 2.8280962691861733, 0.8604748986306365, 0.6746422449023581, 1.0484703219306923, 3.1121451463802363, 6.898730928315137, 1.76520970788544, 0.9593212586959521, 8.996582364034888], [4.49519337705638, 0.41779265620365047, 2.9096701681205484, 8.401060436334978, 3.1041352878690542, 4.551312459336414, 0.8180280923597694, 9.5955847575685, 1.2462451599319802, 8.349671767962977], [6.17449079759464, 5.268335643278675, 5.677090505246624, 7.663203639057153, 0.3407196212540742, 6.286303940763695, 2.8655869483489873, 8.330724396543074, 7.639205370666193, 6.423656966897098]
        ]> : tensor<10x10xf64>
        %result_matrix = call @matmul(%t_sparse, %s, %c) :
            (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %c1 = arith.constant 1 : index
        %element_f64 = tensor.extract %result_matrix[%c1, %c1] : tensor<10x10xf64>
        %element_i64 = arith.fptosi %element_f64 : f64 to i64
        return %element_i64 : i64
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[7.354952, 7.735262, 4.128227, 3.383902, 4.786416, 0.137808, 8.437685, 7.188244, 5.456815, 1.578835, 0.509609, 5.763281, 9.086079, 1.329244, 5.858738, 1.766718, 8.235340, 5.572855, 2.504722, 5.985387, 6.892990, 4.668552, 6.808336, 3.490599, 4.139765, 3.512398, 5.241846, 4.927440, 4.041505, 1.590984, 2.835696, 2.711173, 8.639507, 3.263037, 0.786261, 3.484301, 5.582773, 9.624208, 9.565864, 2.836971]> : tensor<40xf64>
        %row_ptr = arith.constant dense<[0, 6, 9, 14, 19, 23, 26, 32, 33, 35, 40]> : tensor<11xindex>
        %col_ind = arith.constant dense<[0, 1, 3, 6, 7, 9, 0, 4, 6, 1, 2, 4, 7, 8, 0, 3, 6, 7, 9, 0, 2, 7, 9, 0, 4, 7, 0, 1, 3, 4, 6, 9, 6, 2, 4, 0, 3, 6, 8, 9]> : tensor<40xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<40xindex>), tensor<40xf64> to tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }
    
}
