// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @sparse_dense_matmul(%sparse: tensor<10x10xf64, #CSR>,%dense: tensor<10x10xf64>,%init: tensor<10x10xf64>
    ) -> tensor<10x10xf64> {
        %res = linalg.matmul ins(%sparse, %dense: tensor<10x10xf64, #CSR>, tensor<10x10xf64>) 
            outs(%init: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %res : tensor<10x10xf64>
    }

    func.func @main() -> i32 {
        %c0 = arith.constant 0 : index
        %c1 = arith.constant 1 : index
        %rows = arith.constant 10 : index
        %cols = arith.constant 10 : index
        %zero_f64 = arith.constant 0.0 : f64

        %init = tensor.empty() : tensor<10x10xf64>
        %sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %dense = arith.constant dense<[[9.936091, 3.882727, 5.754830, 6.562067, 0.767061, 8.380755, 8.619474, 2.670390, 9.284972, 3.612770], [0.194357, 2.678210, 6.623006, 9.643180, 1.793901, 1.142155, 2.072525, 4.683909, 6.318041, 6.495786], [1.955798, 2.829818, 7.678661, 1.135215, 1.940886, 6.297920, 9.748169, 9.243520, 4.129555, 2.544681], [8.884694, 0.254969, 4.139035, 3.392160, 1.699433, 7.929612, 2.473223, 0.840127, 0.482069, 8.652217], [6.573287, 0.064378, 1.715121, 2.001340, 4.973456, 1.544161, 0.054854, 5.740863, 2.399197, 8.115986], [9.072129, 6.861189, 0.934922, 1.983900, 1.253734, 7.161947, 5.143892, 3.074229, 6.621220, 0.296515], [2.427263, 4.661100, 0.476234, 6.352868, 3.428850, 9.904901, 9.698991, 6.882720, 7.250208, 3.592120], [7.988813, 9.716645, 9.488877, 7.638042, 1.292908, 0.637572, 3.435697, 0.426688, 5.038398, 5.348118], [6.194100, 7.485232, 3.839826, 5.633978, 9.268610, 3.903388, 2.302562, 2.789902, 5.556946, 9.145073], [8.186585, 5.844986, 0.213197, 3.097906, 8.636478, 5.234742, 0.379984, 8.090126, 3.675706, 2.440223]]> : tensor<10x10xf64>

        %computed = call @sparse_dense_matmul(%sparse, %dense, %init) : (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %expected = arith.constant dense<[[198.701690, 138.890428, 106.463295, 113.346947, 131.509543, 221.304829, 199.699752, 229.233526, 180.044964, 113.159776], [29.463076, 38.566995, 16.501333, 33.905596, 43.738989, 32.926523, 26.034474, 23.196621, 35.129436, 43.514299], [17.018941, 0.166681, 4.440631, 5.181683, 12.876808, 3.997997, 0.142022, 14.863709, 6.211777, 21.013154], [237.995722, 165.173728, 117.098070, 220.873738, 131.744792, 269.542297, 186.418899, 195.057155, 220.092294, 185.142703], [86.669496, 101.315854, 106.337821, 72.951595, 43.112550, 43.632337, 68.960416, 56.007063, 67.112339, 66.505766], [108.947842, 38.079650, 28.321144, 41.423400, 64.891996, 84.327959, 18.496664, 55.883998, 26.045106, 71.629345], [193.637424, 77.482292, 136.472030, 122.382267, 75.749905, 213.702389, 197.168852, 153.814065, 153.477612, 160.415593], [43.007911, 24.928923, 11.007898, 21.315982, 27.893220, 31.147843, 16.673647, 29.640210, 27.988501, 13.990931], [150.394810, 73.728706, 38.983632, 65.736241, 113.568667, 111.218888, 25.404480, 89.185727, 51.091144, 101.643148], [110.779648, 54.949063, 30.670096, 52.955474, 66.414321, 85.105064, 40.159287, 68.093046, 59.711901, 49.792811]]> : tensor<10x10xf64>

        // Validate each element
        %false = arith.constant "false" : i1
        %flag = scf.for %i = %c0 to %rows step %c1 iter_args(%f_iter = %false) -> (i1) {
            %flag_row = scf.for %j = %c0 to %cols step %c1 iter_args(%f_in = %f_iter) -> (i1) {
                %cmp_c = tensor.extract %computed[%i, %j] : tensor<10x10xf64>
                %cmp_e = tensor.extract %expected[%i, %j] : tensor<10x10xf64>
                %neq = arith.cmpf une, %cmp_c, %cmp_e : f64
                %new_f = arith.ori %f_in, %neq : i1
                scf.yield %new_f : i1
            }
            scf.yield %flag_row : i1
        }

        %zero_i32 = arith.constant 0 : i32
        %one_i32 = arith.constant 1 : i32
        %status = scf.if %flag -> (i32) {
            scf.yield %one_i32 : i32
        } else {
            scf.yield %zero_i32 : i32
        }
        return %status : i32
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[4.090380, 8.732769, 0.087050, 4.347425, 3.977724, 5.726196, 7.529888, 1.714511, 4.084775, 2.589107, 2.782428, 8.615483, 7.731863, 6.567479, 9.173822, 7.100794, 0.040596, 4.073974, 7.234602, 1.533051, 1.344456, 6.521528, 6.230444, 7.888348, 6.981954, 6.016086, 5.109034, 4.637202, 0.409352, 0.094945, 1.799081, 3.069910, 0.162138, 6.675706, 2.149676, 9.495582, 3.401378, 2.298533, 0.264031, 6.830763]> : tensor<40xf64>
        %row_ptr = arith.constant dense<[0, 7, 9, 10, 16, 21, 23, 30, 32, 36, 40]> : tensor<11xindex>
        %col_ind = arith.constant dense<[0, 2, 3, 4, 5, 6, 9, 6, 8, 4, 0, 1, 3, 5, 6, 9, 0, 2, 7, 8, 9, 3, 9, 0, 2, 3, 4, 6, 8, 9, 0, 9, 1, 3, 8, 9, 0, 3, 6, 9]> : tensor<40xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<40xindex>), tensor<40xf64> -> tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }

}
