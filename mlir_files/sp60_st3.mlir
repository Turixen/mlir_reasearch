// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @matmul(%t : tensor<10x10xf64, #CSR>, %s : tensor<10x10xf64>, %out : tensor<10x10xf64>)
        -> tensor<10x10xf64> {
        %0 = linalg.matmul
            ins(%t, %s: tensor<10x10xf64, #CSR>, tensor<10x10xf64>)
            outs(%out: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %0 : tensor<10x10xf64>
    }

    func.func @main() -> i64 {
        %c = tensor.empty() : tensor<10x10xf64>
        %t_sparse = call @test_assemble() : () -> tensor<10x10xf64, #CSR>
        %s = arith.constant dense<[
            [7.544755204386274, 7.951482445307171, 8.074976518314763, 7.059452299939566, 3.9294149214623744, 9.771875030056956, 7.169996513838176, 4.5745941657738065, 2.455771085037115, 1.4502342512628452], [3.7357828823967107, 8.25972878128633, 1.117235673134901, 2.00544962194084, 1.3576957184460858, 1.7976449848418807, 0.58958153926988, 4.9104944041747345, 7.029922656234157, 9.904765474724023], [1.775488578029396, 2.2543494702458666, 4.438313577476478, 3.119383140440768, 8.039072719874119, 7.335229076547144, 9.336873520167313, 5.463057794733725, 4.7043108750114415, 8.038885976235752], [1.3297379778540175, 1.3564701587550554, 4.461067427482321, 9.595150523972684, 2.971310399468515, 0.6023030652019257, 8.34614424612101, 5.051596750718313, 0.9829130777952277, 0.9005122582556313], [6.961991361476928, 9.389829111776804, 3.420867411180536, 4.4084917726392465, 8.603826798694158, 5.549218392500742, 2.9024608175074604, 3.1879051399317673, 9.617142516924293, 6.884858779913814], [0.6166859544450698, 4.712538515036732, 3.300208934017834, 0.5151703964984466, 3.7621665421411157, 9.531770652173526, 6.491309677747342, 4.39634576610683, 9.007197469081719, 8.560840137529667], [0.08220603791548764, 5.1440525981795275, 5.374509547908972, 7.90383971540053, 3.1713277429514997, 0.8833073857586093, 1.1469991070321894, 9.55335759965793, 5.7177498881238495, 4.241975444925009], [0.5505448666946133, 3.0486862347544417, 7.358357818534707, 0.7468869100469644, 1.4902944668014495, 9.761780376766753, 4.028313679925214, 5.008533082465148, 2.7101221757346305, 4.668209467029079], [1.294784711414545, 4.583193927116952, 2.446947113351754, 3.1303339400793617, 4.784281870413116, 4.788907717421576, 2.4346163852722444, 3.1349476323434655, 0.44865424854944824, 9.635422703873635], [3.8863429595850576, 7.614249632111322, 1.2268431494832543, 3.2966681326363267, 9.346397478929632, 8.443032573583976, 4.255408810227793, 2.0904967063870905, 0.2644517769964261, 0.3156012872598579]
        ]> : tensor<10x10xf64>
        %result_matrix = call @matmul(%t_sparse, %s, %c) :
            (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %c1 = arith.constant 1 : index
        %element_f64 = tensor.extract %result_matrix[%c1, %c1] : tensor<10x10xf64>
        %element_i64 = arith.fptosi %element_f64 : f64 to i64
        return %element_i64 : i64
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[4.100827, 6.259619, 2.330046, 8.261746, 9.910303, 6.179847, 5.493705, 7.909892, 8.350269, 9.095446, 8.757663, 0.007564, 4.265991, 3.978983, 3.388533, 9.619957, 6.443206, 0.192352, 6.521291, 5.079342, 7.268266, 2.793584, 8.528857, 9.142757, 3.509190, 5.693400, 0.698176, 6.545640, 7.733244, 2.877134, 9.593982, 5.083565, 2.361418, 2.719963, 6.305889, 1.339509, 8.564523, 0.010339, 8.214718, 1.738877]> : tensor<40xf64>
        %row_ptr = arith.constant dense<[0, 6, 8, 11, 17, 20, 22, 30, 31, 33, 40]> : tensor<11xindex>
        %col_ind = arith.constant dense<[0, 1, 3, 5, 6, 9, 2, 3, 0, 1, 3, 0, 3, 4, 6, 7, 9, 3, 4, 6, 1, 8, 0, 1, 3, 5, 6, 7, 8, 9, 2, 6, 8, 0, 3, 4, 5, 6, 8, 9]> : tensor<40xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<40xindex>), tensor<40xf64> to tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }
    
}
