// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @matmul(%t : tensor<10x10xf64, #CSR>, %s : tensor<10x10xf64>, %out : tensor<10x10xf64>)
        -> tensor<10x10xf64> {
        %0 = linalg.matmul
            ins(%t, %s: tensor<10x10xf64, #CSR>, tensor<10x10xf64>)
            outs(%out: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %0 : tensor<10x10xf64>
    }

    func.func @main() -> i64 {
        %c = tensor.empty() : tensor<10x10xf64>
        %t_sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %s = arith.constant dense<[
            [0.5889770197219246, 2.1483045105868137, 6.462472666976687, 6.141886545256815, 6.147487047112058, 3.5132868675093865, 7.945759734388643, 2.5368548348654087, 5.502573486609003, 2.335576612487862], [0.7210080292457433, 9.694992457630635, 0.1651369915583445, 5.698761773206788, 5.512902277927382, 4.032836216676832, 9.411569930183614, 4.431633571087563, 4.2881388136783265, 1.1990320695957946], [7.656941186987531, 0.32618045222534087, 6.357302547365363, 2.2160599482585996, 2.48615990040548, 5.33567539998061, 5.15187718761949, 5.059138810494785, 2.893013929853133, 9.469666039954518], [4.567366028700373, 5.540151164059174, 1.0284850014681701, 2.9472450593527566, 8.121329793524305, 2.5557474514386302, 3.6648106575776387, 4.845114648877341, 2.808057024985522, 9.197144076954917], [7.336403114905413, 9.628282258311081, 5.985080325999549, 7.510619608813068, 2.567224172949257, 4.747358165191019, 7.474879428005952, 1.1145126857498433, 7.971308178398954, 5.259584854747798], [8.381854756794256, 6.078754777589214, 8.951193364552193, 0.1406126263510321, 4.726153274937746, 9.03359799726912, 0.8443919459759064, 8.931121027925343, 6.491180933362749, 6.401948408484799], [5.695782667971572, 3.0933567854776323, 0.4253985185335363, 2.5107761280336693, 6.014397986111478, 8.646285461791557, 5.312120209818004, 6.145145094626288, 9.598914665975371, 8.258729220196093], [7.639733048797346, 8.345104355820641, 6.256053855132651, 3.646477544987905, 2.3683543736576143, 9.166775404241559, 3.716501832083716, 2.761758374879968, 7.92024052478888, 8.015978605443586], [8.265919475034073, 4.1333998191299335, 6.520812033543956, 3.7450832337619966, 5.531776208645468, 4.916780358088126, 6.146592899837785, 9.984022924514562, 2.7381679214278467, 1.8682022683951882], [1.5007894068336936, 2.2224626452969423, 2.327964616779287, 9.156807918384407, 7.80201269682096, 6.28501082226438, 2.4583623325430515, 9.02596160242722, 6.694597495124568, 2.1144098287533772]
        ]> : tensor<10x10xf64>
        %result_matrix = call @matmul(%t_sparse, %s, %c) :
            (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %c1 = arith.constant 1 : index

        %element_f64 = tensor.extract %result_matrix[%c1, %c1] : tensor<10x10xf64>
        %element_i64 = arith.fptosi %element_f64 : f64 to i64
        return %element_i64 : i64
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[4.258528, 0.620365, 6.128445, 1.008692, 1.575367, 1.964942, 1.730738, 7.908789, 7.753935, 5.421141, 4.457644, 7.507818, 9.512272, 0.841836, 5.388043, 6.135546, 3.085178, 6.342213, 7.020397, 2.488735, 5.845540, 4.665650, 0.514251, 4.248141, 2.373344, 8.151477, 9.375019, 2.808641, 5.437968, 2.571886, 6.000264, 1.322508, 2.192269, 7.293053, 6.780737, 3.539073, 2.460184, 6.583149, 3.110721, 7.563164]> : tensor<40xf64>
        %row_ptr = arith.constant dense<[0, 6, 8, 12, 20, 23, 24, 28, 32, 33, 40]> : tensor<11xindex>
        %col_ind = arith.constant dense<[0, 1, 3, 5, 6, 9, 0, 3, 1, 2, 4, 9, 0, 1, 2, 3, 6, 7, 8, 9, 1, 2, 9, 1, 0, 3, 6, 9, 0, 3, 5, 8, 0, 0, 1, 3, 4, 5, 6, 9]> : tensor<40xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<40xindex>), tensor<40xf64> to tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }
    
}
