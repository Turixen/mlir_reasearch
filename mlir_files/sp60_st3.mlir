// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @matmul(%t : tensor<10x10xf64, #CSR>, %s : tensor<10x10xf64>, %out : tensor<10x10xf64>)
        -> tensor<10x10xf64> {
        %0 = linalg.matmul
            ins(%t, %s: tensor<10x10xf64, #CSR>, tensor<10x10xf64>)
            outs(%out: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %0 : tensor<10x10xf64>
    }

    func.func @main() -> i64 {
        %c = tensor.empty() : tensor<10x10xf64>
        %t_sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %s = arith.constant dense<[
            [[4.000835, 3.504855, 1.937120, 3.588791, 4.847692, 5.476702, 0.063869, 8.389216, 1.496206, 1.017549], [0.920708, 9.056802, 3.424265, 1.622185, 0.001937, 7.875177, 0.492524, 8.296742, 4.610190, 4.024246], [1.679674, 8.007031, 0.176884, 9.127835, 3.188700, 6.536674, 5.202395, 5.477556, 6.953857, 9.820926], [3.144420, 1.890062, 5.078893, 7.100563, 6.530813, 9.245168, 1.987635, 9.490857, 7.249344, 2.179741], [7.165900, 5.253920, 4.191393, 7.817792, 7.554294, 3.932647, 4.772853, 7.811205, 0.013685, 7.805847], [5.593712, 8.254298, 4.510525, 0.880698, 5.509055, 2.658867, 0.808588, 9.497181, 2.384431, 9.868402], [5.755935, 9.570308, 1.125611, 0.870471, 8.430814, 9.214802, 5.271584, 9.140434, 5.437963, 2.539626], [0.592660, 5.399960, 7.826010, 2.488357, 0.592535, 9.990133, 6.935515, 1.327020, 0.016915, 9.603845], [2.387966, 7.800599, 0.863720, 6.503936, 0.906884, 3.309697, 3.899209, 6.944051, 4.675368, 3.708644], [0.215371, 7.673840, 7.723231, 4.187400, 9.454322, 2.133699, 2.421438, 9.663287, 8.587553, 3.517727]]
        ]> : tensor<10x10xf64>
        %result_matrix = call @matmul(%t_sparse, %s, %c) :
            (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %c1 = arith.constant 1 : index

        %element_f64 = tensor.extract %result_matrix[%c1, %c1] : tensor<10x10xf64>
        %element_i64 = arith.fptosi %element_f64 : f64 to i64
        return %element_i64 : i64
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[6.637088, 9.060584, 9.833668, 7.670743, 7.937926, 3.397422, 5.234919, 1.196690, 7.063459, 9.833821, 8.229170, 1.278687, 2.699789, 8.344722, 0.352046, 2.969787, 6.173208, 5.562337, 4.959673, 2.960808, 0.811718, 2.725574, 6.388944, 9.382452, 7.038584, 9.354977, 9.963710, 6.226623, 8.367599, 6.293471, 7.160717, 0.217409, 3.919338, 1.072697, 6.372842, 5.152138, 1.449009, 9.303093, 5.757264, 9.077856]> : tensor<40xf64>
        %row_ptr = arith.constant dense<[0, 5, 9, 12, 19, 21, 23, 27, 30, 34, 40]> : tensor<11xindex>
        %col_ind = arith.constant dense<[0, 3, 6, 8, 9, 2, 6, 8, 9, 0, 5, 8, 0, 1, 2, 3, 5, 6, 9, 1, 2, 5, 6, 0, 3, 6, 9, 0, 8, 9, 1, 2, 3, 5, 0, 1, 3, 5, 6, 9]> : tensor<40xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<40xindex>), tensor<40xf64> to tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }
    
}
