// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @sparse_dense_matmul(%sparse: tensor<10x10xf64, #CSR>,%dense: tensor<10x10xf64>,%init: tensor<10x10xf64>
    ) -> tensor<10x10xf64> {
        %res = linalg.matmul ins(%sparse, %dense: tensor<10x10xf64, #CSR>, tensor<10x10xf64>) 
            outs(%init: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %res : tensor<10x10xf64>
    }

    func.func @main() -> i32 {
        %c0 = arith.constant 0 : index
        %c1 = arith.constant 1 : index
        %rows = arith.constant 10 : index
        %cols = arith.constant 10 : index
        %zero_f64 = arith.constant 0.0 : f64

        %init = tensor.empty() : tensor<10x10xf64>
        %sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %dense = arith.constant dense<[[9.844658, 0.469572, 8.840834, 7.463379, 7.548654, 0.450317, 8.265456, 2.442688, 4.577578, 7.602694], [6.559869, 1.299680, 0.640821, 4.993922, 0.085974, 9.519573, 4.867459, 2.754329, 3.730773, 7.041611], [5.754068, 5.113283, 9.997758, 8.931615, 7.890690, 8.547283, 5.122906, 1.307779, 7.193292, 2.814529], [8.104924, 7.810230, 4.307830, 2.626800, 3.333399, 4.977080, 9.964460, 1.892085, 6.201997, 7.630835], [0.760365, 7.390047, 7.415698, 8.471510, 1.379726, 7.052751, 6.587346, 1.718829, 7.811700, 3.495950], [9.839754, 6.817972, 7.730184, 4.600311, 1.536184, 9.936933, 8.145953, 4.137527, 4.505381, 2.250917], [8.139629, 0.450396, 2.560119, 8.959807, 5.657024, 6.021120, 2.788278, 7.459265, 6.521062, 8.132344], [5.865479, 4.145625, 3.454505, 0.673117, 1.297687, 1.652246, 0.713567, 1.596605, 3.107824, 3.923950], [4.855741, 0.705498, 5.537993, 7.930338, 6.107368, 6.984755, 0.672397, 7.645020, 5.748881, 5.569645], [0.816064, 8.732956, 8.799943, 8.810390, 5.890056, 9.616711, 3.551636, 3.929195, 1.779700, 0.116500]]> : tensor<10x10xf64>

        %computed = call @sparse_dense_matmul(%sparse, %dense, %init) : (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %expected = arith.constant dense<[[87.375584, 80.338063, 90.822826, 95.077503, 76.774863, 84.731838, 91.869605, 52.013212, 65.419957, 76.056139], [29.905960, 24.784823, 27.530762, 18.786353, 5.415437, 33.921920, 28.285011, 13.403445, 18.111575, 8.807821], [81.474634, 69.923350, 72.892332, 114.976664, 54.555460, 95.031629, 86.833729, 63.688544, 106.418009, 95.942607], [127.702949, 105.537610, 124.835182, 117.684035, 102.272238, 99.384050, 137.660033, 59.987605, 89.687015, 109.638067], [69.508857, 98.368604, 157.287577, 166.935846, 127.479756, 164.717407, 59.403284, 86.192559, 90.501810, 52.567502], [52.938895, 97.195170, 78.327612, 75.589193, 28.565007, 80.103624, 103.801662, 23.769144, 90.623937, 67.401513], [280.903867, 164.491586, 228.765355, 259.878054, 161.400694, 308.660980, 223.805922, 139.901655, 202.096783, 187.386895], [95.941153, 165.804339, 176.601861, 159.258528, 128.852261, 179.106855, 129.612458, 58.004037, 102.748029, 67.047540], [141.436157, 222.822416, 206.155305, 184.137163, 90.132405, 228.805514, 208.133016, 87.141816, 158.991790, 108.580472], [167.745512, 25.958093, 101.577194, 191.923333, 121.952507, 168.305358, 79.055971, 148.953967, 134.778288, 170.151126]]> : tensor<10x10xf64>

        // Validate each element
        %false = arith.constant "false" : i1
        %flag = scf.for %i = %c0 to %rows step %c1 iter_args(%f_iter = %false) -> (i1) {
            %flag_row = scf.for %j = %c0 to %cols step %c1 iter_args(%f_in = %f_iter) -> (i1) {
                %cmp_c = tensor.extract %computed[%i, %j] : tensor<10x10xf64>
                %cmp_e = tensor.extract %expected[%i, %j] : tensor<10x10xf64>
                %neq = arith.cmpf une, %cmp_c, %cmp_e : f64
                %new_f = arith.ori %f_in, %neq : i1
                scf.yield %new_f : i1
            }
            scf.yield %flag_row : i1
        }

        %zero_i32 = arith.constant 0 : i32
        %one_i32 = arith.constant 1 : i32
        %status = scf.if %flag -> (i32) {
            scf.yield %one_i32 : i32
        } else {
            scf.yield %zero_i32 : i32
        }
        return %status : i32
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[2.572135, 4.720562, 2.450721, 4.712928, 0.591993, 2.993553, 3.060443, 5.836280, 6.417034, 4.894192, 7.415159, 1.875447, 5.093423, 5.553516, 6.475181, 7.489294, 5.514871, 7.053916, 0.292460, 2.126749, 7.006341, 8.081041, 3.103993, 8.516748, 6.875273, 3.167293, 6.543784, 6.226462, 9.585989, 7.772108, 8.427654, 6.372705, 0.847705, 6.388755, 2.537811, 5.373457, 0.150184, 7.803529, 8.675432, 0.798640]> : tensor<40xf64>
        %row_ptr = arith.constant dense<[0, 4, 6, 9, 13, 16, 19, 26, 29, 34, 40]> : tensor<11xindex>
        %col_ind = arith.constant dense<[0, 3, 6, 9, 4, 5, 3, 4, 6, 0, 3, 6, 9, 2, 8, 9, 3, 4, 5, 0, 1, 2, 3, 5, 6, 9, 2, 3, 9, 3, 4, 5, 8, 9, 0, 1, 3, 6, 8, 9]> : tensor<40xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<40xindex>), tensor<40xf64> to tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }

}
