// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @sparse_dense_matmul(%sparse: tensor<10x10xf64, #CSR>,%dense: tensor<10x10xf64>,%init: tensor<10x10xf64>
    ) -> tensor<10x10xf64> {
        %res = linalg.matmul ins(%sparse, %dense: tensor<10x10xf64, #CSR>, tensor<10x10xf64>) 
            outs(%init: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %res : tensor<10x10xf64>
    }

    func.func @main() -> i32 {
        %c0 = arith.constant 0 : index
        %c1 = arith.constant 1 : index
        %rows = arith.constant 10 : index
        %cols = arith.constant 10 : index
        %zero_f64 = arith.constant 0.0 : f64

        %init = tensor.empty() : tensor<10x10xf64>
        %sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %dense = arith.constant dense<[[2.709333, 3.172325, 0.833513, 7.527786, 8.414412, 1.416643, 7.542178, 2.779675, 6.215600, 4.036244], [5.511469, 0.555386, 9.686641, 5.352994, 2.856620, 5.969011, 0.057677, 7.968317, 9.484928, 8.834282], [1.683622, 7.918164, 0.716354, 1.080798, 4.535475, 6.127042, 2.470931, 6.013475, 5.299683, 2.020949], [7.392445, 1.682384, 2.474283, 8.327170, 5.809629, 9.762654, 2.460416, 6.311441, 5.241149, 5.467672], [3.579913, 0.061655, 3.522908, 6.273256, 2.373493, 7.224538, 2.422985, 5.726863, 8.787762, 4.034359], [4.761209, 1.984093, 1.482474, 8.954250, 9.142684, 6.434261, 0.660892, 8.207318, 5.392375, 4.469247], [5.844527, 0.356116, 9.575884, 1.612377, 2.200701, 3.867388, 6.226404, 0.069726, 5.163664, 2.328144], [5.676722, 4.035340, 6.518347, 1.059504, 8.269420, 6.120186, 4.544353, 1.623650, 4.495571, 7.954419], [3.263672, 2.847548, 8.723008, 1.758790, 3.203434, 8.838593, 5.684497, 3.961288, 8.091880, 6.574743], [9.985917, 5.915111, 0.414905, 5.443466, 6.952368, 0.782457, 9.339740, 6.598408, 8.269909, 7.760758]]> : tensor<10x10xf64>

        %computed = call @sparse_dense_matmul(%sparse, %dense, %init) : (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %expected = arith.constant dense<[[100.811808, 105.734907, 81.588879, 111.603422, 144.768791, 127.112416, 137.916995, 105.546402, 157.991938, 101.223615], [25.523077, 5.981127, 26.428337, 32.216653, 23.263038, 43.998067, 18.262961, 30.334447, 49.368118, 30.954414], [64.206502, 109.382849, 94.822755, 59.461784, 106.640550, 165.295869, 79.716877, 124.457416, 146.579039, 97.714874], [238.323474, 127.033337, 181.030482, 198.763951, 196.492421, 207.742183, 171.655318, 223.632376, 282.398755, 229.555512], [89.005588, 57.001704, 43.663182, 35.573130, 89.430374, 43.077210, 78.379485, 45.279426, 72.402419, 91.708466], [40.908302, 46.067950, 34.849176, 60.935856, 46.783191, 98.250161, 35.343595, 84.533029, 107.128667, 46.812061], [106.000700, 39.786556, 80.807711, 80.483279, 87.529790, 60.025366, 113.864443, 49.594494, 103.761169, 73.137360], [41.424033, 10.246864, 65.852713, 12.036997, 19.453049, 32.364223, 44.799915, 6.416464, 40.365265, 17.835361], [107.779698, 79.509966, 125.959655, 97.938622, 96.877412, 169.815015, 101.282367, 123.731700, 187.272596, 84.578508], [186.249944, 123.329613, 143.124306, 172.354161, 219.894457, 201.647746, 141.642348, 176.369662, 225.013261, 215.818093]]> : tensor<10x10xf64>

        // Validate each element
        %false = arith.constant false : i1
        %flag = scf.for %i = %c0 to %rows step %c1 iter_args(%f_iter = %false) -> (i1) {
            %flag_row = scf.for %j = %c0 to %cols step %c1 iter_args(%f_in = %f_iter) -> (i1) {
                %cmp_c = tensor.extract %computed[%i, %j] : tensor<10x10xf64>
                %cmp_e = tensor.extract %expected[%i, %j] : tensor<10x10xf64>
                %neq = arith.cmpf une, %cmp_c, %cmp_e : f64
                %new_f = arith.or %f_in, %neq : i1
                scf.yield %new_f : i1
            }
            scf.yield %flag_row : i1
        }

        %zero_i32 = arith.constant 0 : i32
        %one_i32 = arith.constant 1 : i32
        %status = scf.if %flag -> (i32) {
            scf.yield %one_i32 : i32
        } else {
            scf.yield %zero_i32 : i32
        }
        return %status : i32
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[8.015072, 7.363967, 3.036585, 3.839203, 2.847147, 1.253756, 4.897864, 1.407353, 9.496979, 3.633638, 9.472968, 3.617746, 9.432500, 6.044251, 7.521371, 5.389522, 1.025158, 7.601938, 6.361351, 5.296856, 5.750087, 8.722930, 3.956612, 2.393507, 7.324931, 3.482534, 0.988134, 6.803013, 9.228077, 9.817108, 1.390888, 8.636525, 6.442837, 6.311510, 4.988791, 7.347165, 0.064385, 7.497775, 0.488651, 2.679956]> : tensor<40xf64>
        %row_ptr = arith.constant dense<[0, 6, 8, 11, 18, 20, 22, 26, 28, 32, 40]> : tensor<11xindex>
        %col_ind = arith.constant dense<[0, 2, 3, 6, 8, 9, 4, 7, 2, 5, 8, 0, 1, 2, 3, 6, 8, 9, 7, 9, 2, 4, 0, 3, 6, 9, 2, 6, 2, 4, 5, 6, 0, 1, 2, 3, 6, 7, 8, 9]> : tensor<40xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<40xindex>), tensor<40xf64> -> tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }

}
