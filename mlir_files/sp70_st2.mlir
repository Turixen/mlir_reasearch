// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @matmul(%t : tensor<10x10xf64, #CSR>, %s : tensor<10x10xf64>, %out : tensor<10x10xf64>)
        -> tensor<10x10xf64> {
        %0 = linalg.matmul
            ins(%t, %s: tensor<10x10xf64, #CSR>, tensor<10x10xf64>)
            outs(%out: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %0 : tensor<10x10xf64>
    }

    func.func @main() -> i64 {
        %c = tensor.empty() : tensor<10x10xf64>
        %t_sparse = call @test_assemble() : () -> tensor<10x10xf64, #CSR>
        %s = arith.constant dense<[
            [4.038799705345331, 9.743671665860585, 0.7123219719849394, 2.6615287826767786, 7.946142965517352, 8.941823176870956, 7.701221467831197, 6.545478130755702, 5.418315302648429, 5.556015976930303], [2.1258299459595422, 2.2392866360971575, 3.6266367043533867, 9.555410117895747, 5.6735911607957465, 7.135487668760999, 0.6533815159538214, 1.9762580222344672, 3.1830535435405807, 9.645484548540988], [2.0788307548166083, 6.4687287136695595, 6.155648505626465, 0.5135566475782105, 0.6814155021194312, 7.223457671613428, 4.695689556351724, 6.971851762421361, 8.723447334303671, 1.9455336911797139], [9.700266859762598, 3.40330827568327, 0.6268505105978472, 2.3100807034699877, 1.2616628114478423, 2.848150217968226, 6.0426008057097915, 9.278947848001652, 4.027221898100942, 4.8554761165038745], [8.741755472619177, 2.9728066581605948, 8.203986688437935, 0.23195689044054002, 6.060976527857537, 2.1898809978169895, 4.706960701053399, 6.214252392740408, 4.883636400146863, 3.6929817366597426], [8.33078078747476, 7.213202195735827, 0.9834857307035128, 6.396342036570319, 5.026291453675146, 9.163023263174315, 9.032151181127823, 2.387662062269774, 6.222457385447968, 8.567615582286857], [6.9546318486356355, 9.032155137860958, 2.6872533153000533, 1.3947736955862633, 4.861672438172061, 8.720861296229131, 5.330976037521441, 1.610506618231673, 8.131214926935598, 0.7998942535381037], [4.830476521635313, 1.2420043372251766, 4.162594524419342, 3.998628901840532, 3.8650832983811814, 5.279767867225883, 2.9957679007611993, 6.02176215059262, 2.9931706573914707, 3.0176261016966253], [7.866835068952462, 7.1468286077270164, 3.7899991897740493, 3.0863488224864, 3.161913118338192, 5.587934296605511, 2.26548710748581, 6.122105247485146, 4.829775278945254, 1.0716266706779976], [0.07718673610702442, 2.0723383084618563, 6.796609692536597, 7.015576581253912, 6.929898706604007, 9.909653818861905, 2.177652016940267, 2.678238466727565, 4.791354528225266, 2.915022466668158]
        ]> : tensor<10x10xf64>
        %result_matrix = call @matmul(%t_sparse, %s, %c) :
            (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %c1 = arith.constant 1 : index
        %element_f64 = tensor.extract %result_matrix[%c1, %c1] : tensor<10x10xf64>
        %element_i64 = arith.fptosi %element_f64 : f64 to i64
        return %element_i64 : i64
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[6.078016, 4.333538, 5.181453, 6.766570, 1.280089, 0.545109, 7.951150, 0.214639, 8.645075, 1.063767, 3.458204, 8.073364, 8.333252, 6.786711, 0.190248, 9.603643, 9.576622, 7.358068, 4.756816, 9.420775, 9.453944, 3.632050, 8.357283, 9.578799, 2.057868, 5.744445, 6.055891, 5.439579, 0.031104, 8.604670]> : tensor<30xf64>
        %row_ptr = arith.constant dense<[0, 5, 5, 11, 11, 18, 19, 24, 24, 29, 30]> : tensor<11xindex>
        %col_ind = arith.constant dense<[0, 2, 4, 6, 8, 0, 2, 3, 4, 6, 8, 0, 2, 3, 4, 6, 7, 8, 0, 0, 2, 4, 6, 8, 0, 2, 4, 6, 8, 8]> : tensor<30xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<30xindex>), tensor<30xf64> to tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }
    
}
