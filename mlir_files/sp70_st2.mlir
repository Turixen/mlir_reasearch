// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @sparse_dense_matmul(%sparse: tensor<10x10xf64, #CSR>,%dense: tensor<10x10xf64>,%init: tensor<10x10xf64>
    ) -> tensor<10x10xf64> {
        %res = linalg.matmul ins(%sparse, %dense: tensor<10x10xf64, #CSR>, tensor<10x10xf64>) 
            outs(%init: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %res : tensor<10x10xf64>
    }

    func.func @main() -> i32 {
        %c0 = arith.constant 0 : index
        %c1 = arith.constant 1 : index
        %rows = arith.constant 10 : index
        %cols = arith.constant 10 : index
        %zero_f64 = arith.constant 0.0 : f64

        %init = tensor.empty() : tensor<10x10xf64>
        %sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %dense = arith.constant dense<[[2.756457, 1.173569, 2.916784, 1.910297, 5.617607, 6.870026, 5.462499, 8.616873, 1.690658, 3.584930], [3.265465, 7.822338, 4.291089, 8.866202, 6.606363, 8.025000, 5.043680, 9.058779, 6.627571, 3.934622], [3.614628, 2.841141, 5.612860, 6.401288, 1.527255, 5.153997, 2.341122, 9.987897, 1.172664, 1.226272], [7.166080, 5.563993, 6.581372, 3.516202, 7.249735, 3.831941, 9.816508, 0.878214, 4.198850, 8.300829], [3.595137, 9.011084, 4.937827, 2.192939, 0.334048, 8.803351, 8.402023, 8.941903, 2.058251, 0.287909], [4.181427, 2.784701, 5.868264, 4.282670, 0.646585, 0.054464, 9.095558, 7.150881, 3.650777, 4.177622], [6.118705, 4.142022, 0.328619, 8.624746, 1.257777, 5.150378, 8.229337, 7.088487, 1.079567, 2.831236], [2.381005, 2.241360, 7.845941, 3.947748, 1.061373, 0.773338, 9.009684, 3.938092, 6.908229, 5.437803], [1.210757, 9.501260, 0.980201, 4.360956, 3.608162, 5.137082, 0.023418, 1.511145, 0.960049, 3.406602], [0.632672, 3.004112, 0.293424, 3.366277, 0.827876, 2.439117, 6.604034, 2.551419, 9.441974, 6.528357]]> : tensor<10x10xf64>

        %computed = call @sparse_dense_matmul(%sparse, %dense, %init) : (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %expected = arith.constant dense<[[33.670241, 66.111290, 23.403297, 53.637841, 39.901819, 68.079461, 42.514964, 65.715104, 14.731300, 35.443123], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [106.807248, 178.681712, 93.754360, 136.815896, 55.693358, 149.178097, 180.265932, 190.806571, 56.587052, 81.202136], [11.158412, 27.968164, 15.325788, 6.806337, 1.036803, 27.323412, 26.077790, 27.753442, 6.388298, 0.893598], [105.427704, 113.947658, 58.849048, 122.615644, 69.966543, 165.954055, 170.366878, 197.377198, 37.887965, 66.651441], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [80.755550, 90.106334, 71.693800, 111.399498, 47.050518, 126.618765, 105.116990, 172.995417, 28.674929, 43.925564], [47.460335, 36.849849, 43.587864, 23.287503, 48.014373, 25.378615, 65.013897, 5.816336, 27.808627, 54.975684], [82.057802, 194.460611, 95.513146, 127.562375, 59.816768, 176.614634, 104.507788, 184.812709, 38.535368, 55.264398], [51.905607, 97.115374, 74.729346, 53.918864, 11.142003, 107.491232, 88.917786, 134.391512, 24.960167, 9.125499]]> : tensor<10x10xf64>

        // Validate each element
        %false = arith.constant "false" : i1
        %flag = scf.for %i = %c0 to %rows step %c1 iter_args(%f_iter = %false) -> (i1) {
            %flag_row = scf.for %j = %c0 to %cols step %c1 iter_args(%f_in = %f_iter) -> (i1) {
                %cmp_c = tensor.extract %computed[%i, %j] : tensor<10x10xf64>
                %cmp_e = tensor.extract %expected[%i, %j] : tensor<10x10xf64>
                %neq = arith.cmpf une, %cmp_c, %cmp_e : f64
                %new_f = arith.ori %f_in, %neq : i1
                scf.yield %new_f : i1
            }
            scf.yield %flag_row : i1
        }

        %zero_i32 = arith.constant 0 : i32
        %one_i32 = arith.constant 1 : i32
        %status = scf.if %flag -> (i32) {
            scf.yield %one_i32 : i32
        } else {
            scf.yield %zero_i32 : i32
        }
        return %status : i32
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[3.223054, 1.056932, 0.539618, 2.161605, 4.789887, 2.429708, 1.024125, 6.679517, 6.609029, 5.855766, 7.375024, 3.103751, 8.683379, 0.687273, 5.017278, 9.615395, 1.764627, 3.974534, 7.411059, 3.079371, 4.877970, 1.729555, 6.622915, 1.302210, 7.753052, 7.669628, 1.770545, 9.941793, 5.303950, 9.105020]> : tensor<30xf64>
        %row_ptr = arith.constant dense<[0, 5, 5, 11, 12, 17, 17, 22, 23, 28, 30]> : tensor<11xindex>
        %col_ind = arith.constant dense<[0, 2, 4, 6, 8, 0, 2, 4, 5, 6, 8, 4, 0, 2, 4, 6, 8, 0, 2, 4, 6, 8, 3, 0, 2, 4, 6, 8, 2, 4]> : tensor<30xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<30xindex>), tensor<30xf64> -> tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }

}
