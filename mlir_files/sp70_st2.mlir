// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @matmul(%t : tensor<10x10xf64, #CSR>, %s : tensor<10x10xf64>, %out : tensor<10x10xf64>)
        -> tensor<10x10xf64> {
        %0 = linalg.matmul
            ins(%t, %s: tensor<10x10xf64, #CSR>, tensor<10x10xf64>)
            outs(%out: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %0 : tensor<10x10xf64>
    }

    func.func @main() -> i64 {
        %c = tensor.empty() : tensor<10x10xf64>
        %t_sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %s = arith.constant dense<[
            [7.1402244417065, 7.5567583063307335, 4.792524937418115, 6.392366773477321, 1.4393649496100736, 1.9380820854503567, 2.5659562845695403, 5.651689179240435, 3.771261809527865, 6.401748770855806], [0.6181621742530252, 8.935145054233422, 1.7894163217985004, 3.6553312598500174, 0.22900293237997693, 7.43140762693996, 0.5137561752783049, 3.0716293624370836, 4.848984722695661, 7.979127994487153], [2.467828175972505, 8.6408399014428, 9.609102515862594, 1.338219448586343, 5.500037182082471, 7.308725452560822, 1.3229645901311204, 4.341160342428912, 7.891844746399856, 9.072272510515235], [3.8788880879652456, 2.315828631362997, 2.996276546985733, 8.914960152620028, 9.721456411169225, 2.513436553244098, 9.863009701727695, 5.119288803516384, 3.852204147308508, 9.53817641608485], [1.8938476875348709, 5.716706289012916, 7.646309127902196, 4.181211610375987, 7.330368589168462, 8.690222042892, 5.7751988492793815, 3.337402419324178, 4.444339148280077, 0.18888444506727775], [4.500881897604787, 8.530080766923254, 7.415682971473362, 8.6934855666785, 2.9603917534242075, 7.200213826858095, 1.899529885021447, 2.9494014873751495, 2.115732766696251, 4.350827719274113], [8.708161357641107, 5.965969509076122, 0.0051739752842538955, 7.943401119608721, 3.361750321816348, 4.1271694997739345, 0.0897951862852353, 8.69208123697994, 7.35401005319715, 2.5412191138758757], [7.705246302115478, 4.793696780510714, 0.5161942113143247, 2.4990075337954645, 6.929008695372957, 3.652356760398864, 5.7820822771387075, 9.011713317520607, 3.927061935229852, 1.2320984294196025], [2.9193294564557757, 0.47434846955775267, 5.444419414171829, 0.765937440115062, 8.205019090812653, 3.72964533717294, 8.340780656177348, 2.145442259629945, 2.4528516251265318, 8.934748722733985], [9.760573851919728, 2.952677308114203, 4.676145901504453, 6.512339848065278, 4.511144155104465, 8.81466819882968, 9.40819065259722, 7.481395232510457, 5.849045510047015, 0.975783836416273]
        ]> : tensor<10x10xf64>
        %result_matrix = call @matmul(%t_sparse, %s, %c) :
            (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %c1 = arith.constant 1 : index

        %element_f64 = tensor.extract %result_matrix[%c1, %c1] : tensor<10x10xf64>
        %element_i64 = arith.fptosi %element_f64 : f64 to i64
        return %element_i64 : i64
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[4.199562, 3.255076, 3.974922, 0.885005, 6.616020, 0.311184, 6.360474, 1.972471, 2.275925, 9.208781, 0.698944, 4.291013, 9.169996, 9.775147, 0.713010, 6.719533, 7.083203, 8.567593, 2.078855, 0.413958, 6.240055, 5.487044, 5.946379, 9.429255, 4.906891, 2.632351, 6.530924, 7.215624, 8.639701, 1.399882]> : tensor<30xf64>
        %row_ptr = arith.constant dense<[0, 5, 6, 11, 11, 16, 18, 23, 24, 29, 30]> : tensor<11xindex>
        %col_ind = arith.constant dense<[0, 2, 4, 6, 8, 2, 0, 2, 4, 6, 8, 0, 2, 4, 6, 8, 5, 8, 0, 2, 4, 6, 8, 6, 0, 2, 4, 6, 8, 3]> : tensor<30xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<30xindex>), tensor<30xf64> to tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }
    
}
