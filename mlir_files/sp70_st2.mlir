// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @sparse_dense_matmul(%sparse: tensor<10x10xf64, #CSR>,%dense: tensor<10x10xf64>,%init: tensor<10x10xf64>
    ) -> tensor<10x10xf64> {
        %res = linalg.matmul ins(%sparse, %dense: tensor<10x10xf64, #CSR>, tensor<10x10xf64>) 
            outs(%init: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %res : tensor<10x10xf64>
    }

    func.func @main() -> i32 {
        %c0 = arith.constant 0 : index
        %c1 = arith.constant 1 : index
        %rows = arith.constant 10 : index
        %cols = arith.constant 10 : index
        %zero_f64 = arith.constant 0.0 : f64

        %init = tensor.empty() : tensor<10x10xf64>
        %sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %dense = arith.constant dense<[[8.114235, 0.761085, 9.083703, 2.814061, 1.426944, 4.280276, 6.177750, 5.275363, 5.380365, 9.150271], [5.127485, 4.493278, 5.747290, 1.121469, 2.929906, 2.915893, 8.162529, 7.718622, 6.197477, 1.786609], [7.100041, 3.756223, 6.096577, 7.822697, 7.696961, 4.016834, 5.873155, 2.828505, 0.907831, 6.309799], [6.152610, 0.725023, 3.709338, 3.229522, 0.171207, 4.553926, 2.019094, 7.448210, 8.626430, 3.835602], [4.727634, 7.063788, 3.336394, 6.112182, 4.186206, 4.436619, 1.695991, 3.385553, 0.311081, 5.391890], [4.056934, 6.500548, 8.357298, 3.983321, 0.999757, 6.614968, 1.145060, 1.343727, 6.208142, 8.088028], [4.502977, 1.944411, 6.026634, 7.115033, 6.831285, 5.086689, 5.532113, 0.217306, 9.854223, 2.112016], [7.865107, 4.696074, 3.439625, 7.329777, 4.770846, 6.567316, 4.351312, 7.244565, 8.748717, 2.588397], [2.103887, 5.509434, 9.334327, 3.820798, 9.938710, 8.086749, 8.642146, 3.329987, 3.189214, 7.820168], [3.995271, 7.857290, 6.584848, 4.790710, 4.651064, 5.611583, 7.019134, 7.499895, 6.238193, 5.555355]]> : tensor<10x10xf64>

        %computed = call @sparse_dense_matmul(%sparse, %dense, %init) : (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %expected = arith.constant dense<[[106.176914, 60.355874, 113.160123, 113.980693, 108.640382, 83.002253, 95.984648, 46.779053, 73.481420, 99.534273], [14.263729, 37.352326, 63.283958, 25.903876, 67.381493, 54.825751, 58.591178, 22.576323, 21.621923, 53.018409], [200.899850, 131.779403, 256.550210, 190.735342, 206.945881, 187.907583, 207.616627, 119.318850, 141.754314, 238.431067], [33.322066, 3.926668, 20.089489, 17.490846, 0.927245, 24.663715, 10.935260, 40.338938, 46.720085, 20.773330], [171.877145, 114.411411, 178.324647, 191.031866, 174.363792, 139.979440, 146.322439, 78.866905, 119.039244, 162.035694], [19.147622, 50.141741, 84.952349, 34.773348, 90.452879, 73.598057, 78.652765, 30.306444, 29.025257, 71.171882], [68.072150, 92.745878, 130.346048, 86.428489, 132.205272, 112.898519, 111.363306, 58.820286, 49.166982, 122.613145], [0.366489, 0.158252, 0.490497, 0.579080, 0.555986, 0.413997, 0.450249, 0.017686, 0.802018, 0.171893], [173.516924, 145.074175, 183.434997, 195.119064, 171.747461, 149.750768, 154.339492, 106.443991, 129.830258, 170.134242], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]]> : tensor<10x10xf64>

        // Validate each element
        %false = arith.constant "false" : i1
        %flag = scf.for %i = %c0 to %rows step %c1 iter_args(%f_iter = %false) -> (i1) {
            %flag_row = scf.for %j = %c0 to %cols step %c1 iter_args(%f_in = %f_iter) -> (i1) {
                %cmp_c = tensor.extract %computed[%i, %j] : tensor<10x10xf64>
                %cmp_e = tensor.extract %expected[%i, %j] : tensor<10x10xf64>
                %neq = arith.cmpf une, %cmp_c, %cmp_e : f64
                %new_f = arith.ori %f_in, %neq : i1
                scf.yield %new_f : i1
            }
            scf.yield %flag_row : i1
        }

        %zero_i32 = arith.constant 0 : i32
        %one_i32 = arith.constant 1 : i32
        %status = scf.if %flag -> (i32) {
            scf.yield %one_i32 : i32
        } else {
            scf.yield %zero_i32 : i32
        }
        return %status : i32
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[2.843658, 6.539332, 2.654625, 4.904238, 0.969401, 6.779702, 9.824747, 6.781477, 6.641420, 5.799168, 7.376372, 5.415924, 4.153303, 8.494554, 7.933287, 8.365950, 1.277273, 9.101069, 1.424359, 1.539636, 4.627748, 0.902402, 9.335719, 0.081388, 3.654529, 6.922214, 9.119937, 7.269265, 0.461098, 4.479313]> : tensor<30xf64>
        %row_ptr = arith.constant dense<[0, 5, 6, 11, 12, 17, 18, 23, 24, 30, 30]> : tensor<11xindex>
        %col_ind = arith.constant dense<[0, 2, 4, 6, 8, 8, 0, 2, 4, 6, 8, 3, 0, 2, 4, 6, 8, 8, 0, 2, 4, 6, 8, 6, 0, 2, 4, 6, 8, 9]> : tensor<30xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<30xindex>), tensor<30xf64> to tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }

}
