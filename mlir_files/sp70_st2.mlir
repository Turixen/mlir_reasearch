// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @sparse_dense_matmul(%sparse: tensor<10x10xf64, #CSR>,%dense: tensor<10x10xf64>,%init: tensor<10x10xf64>
    ) -> tensor<10x10xf64> {
        %res = linalg.matmul ins(%sparse, %dense: tensor<10x10xf64, #CSR>, tensor<10x10xf64>) 
            outs(%init: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %res : tensor<10x10xf64>
    }

    func.func @main() -> i32 {
        %c0 = arith.constant 0 : index
        %c1 = arith.constant 1 : index
        %rows = arith.constant 10 : index
        %cols = arith.constant 10 : index
        %zero_f64 = arith.constant 0.0 : f64

        %init = tensor.empty() : tensor<10x10xf64>
        %sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %dense = arith.constant dense<[[9.376549, 7.122302, 6.842670, 5.275678, 4.380450, 9.628441, 8.403826, 6.065326, 0.609388, 3.910980], [9.398143, 1.082967, 4.255172, 2.250552, 8.479866, 4.814545, 5.000481, 1.142629, 9.426959, 2.403081], [5.095400, 7.851718, 6.395666, 4.260906, 6.512610, 7.579818, 7.604362, 6.340748, 2.758433, 7.329460], [2.171459, 4.260967, 0.792437, 2.094292, 4.617759, 1.130455, 5.511537, 4.333737, 5.652153, 1.354542], [9.398851, 9.529383, 1.583847, 5.225547, 0.439068, 4.615714, 6.423949, 3.039202, 4.491911, 0.015189], [4.377198, 5.972435, 0.249935, 1.166224, 3.282222, 2.642814, 0.304258, 7.542188, 2.801336, 7.289074], [8.113753, 2.174968, 8.494188, 1.242084, 9.250103, 4.321498, 4.458879, 0.277929, 2.622553, 0.011570], [7.921026, 8.271438, 5.786521, 6.214677, 4.976576, 9.187701, 9.841541, 0.917614, 2.890980, 1.128218], [0.174871, 3.103913, 3.535578, 1.586936, 2.783272, 4.535273, 6.941041, 7.269021, 4.041948, 7.459411], [7.601000, 5.239929, 0.413633, 6.062130, 4.519093, 2.157654, 0.652842, 7.155228, 4.131842, 1.857686]]> : tensor<10x10xf64>

        %computed = call @sparse_dense_matmul(%sparse, %dense, %init) : (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %expected = arith.constant dense<[[204.399896, 191.140829, 128.571022, 114.206154, 102.652319, 171.134574, 182.964415, 116.573602, 74.077874, 78.789347], [7.505356, 14.727457, 2.738950, 7.238638, 15.960663, 3.907266, 19.049886, 14.978978, 19.535905, 4.681792], [160.229578, 146.855334, 166.380771, 92.740324, 138.287285, 189.459385, 203.575768, 155.382354, 72.321293, 135.310320], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [156.950892, 119.458433, 76.726212, 77.215352, 90.651527, 115.923210, 150.819407, 94.349041, 139.264756, 77.949671], [45.060333, 45.686132, 7.593342, 25.052518, 2.104997, 22.128833, 30.797942, 14.570657, 21.535290, 0.072819], [141.004245, 132.341838, 95.908753, 85.031068, 65.926575, 139.108949, 142.924779, 103.709344, 43.310714, 72.547329], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [49.947561, 65.599987, 39.368080, 37.317086, 53.811511, 52.507045, 81.344609, 64.695480, 50.115027, 42.287055], [60.417412, 45.892265, 44.090469, 33.993618, 28.225253, 62.040472, 54.149715, 39.081682, 3.926568, 25.200241]]> : tensor<10x10xf64>

        // Validate each element
        %false = arith.constant false : i1
        %flag = scf.for %i = %c0 to %rows step %c1 iter_args(%f_iter = %false) -> (i1) {
            %flag_row = scf.for %j = %c0 to %cols step %c1 iter_args(%f_in = %f_iter) -> (i1) {
                %cmp_c = tensor.extract %computed[%i, %j] : tensor<10x10xf64>
                %cmp_e = tensor.extract %expected[%i, %j] : tensor<10x10xf64>
                %neq = arith.cmpf une, %cmp_c, %cmp_e : f64
                %new_f = arith.or %f_in, %neq : i1
                scf.yield %new_f : i1
            }
            scf.yield %flag_row : i1
        }

        %zero_i32 = arith.constant 0 : i32
        %one_i32 = arith.constant 1 : i32
        %status = scf.if %flag -> (i32) {
            scf.yield %one_i32 : i32
        } else {
            scf.yield %zero_i32 : i32
        }
        return %status : i32
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[7.046191, 5.504414, 9.098956, 3.021148, 1.436346, 3.456365, 9.657781, 3.457013, 1.057384, 4.982772, 9.669288, 0.435446, 7.242254, 0.241979, 8.684539, 0.075395, 7.632851, 4.794238, 9.397779, 1.753998, 4.348668, 0.313004, 3.065560, 2.206997, 1.432581, 5.737667, 0.761923, 0.243212, 2.060376, 6.443460]> : tensor<30xf64>
        %row_ptr = arith.constant dense<[0, 5, 6, 11, 11, 17, 18, 23, 23, 29, 30]> : tensor<11xindex>
        %col_ind = arith.constant dense<[0, 2, 4, 6, 8, 3, 0, 2, 4, 6, 8, 0, 1, 2, 4, 6, 8, 4, 0, 2, 4, 6, 8, 0, 2, 3, 4, 6, 8, 0]> : tensor<30xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<30xindex>), tensor<30xf64> -> tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }

}
