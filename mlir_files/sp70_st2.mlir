// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @matmul(%t : tensor<10x10xf64, #CSR>, %s : tensor<10x10xf64>, %out : tensor<10x10xf64>)
        -> tensor<10x10xf64> {
        %0 = linalg.matmul
            ins(%t, %s: tensor<10x10xf64, #CSR>, tensor<10x10xf64>)
            outs(%out: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %0 : tensor<10x10xf64>
    }

    func.func @main() -> i64 {
        %c = tensor.empty() : tensor<10x10xf64>
        %t_sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %s = arith.constant dense<[
            [0.2379064083469773, 9.16873577583784, 4.930071473981295, 9.933954269371023, 3.3374654110497373, 2.317370985576861, 0.4018788664054118, 9.122085990518546, 0.7139911334503313, 8.123013656323954], [4.681041878064254, 7.0145759085981485, 8.652320464312492, 9.887992564408014, 4.947109678310797, 7.871715369378059, 8.113754417737812, 0.5393735090637364, 2.7177312128033315, 0.5174674411981273], [5.311376679736161, 9.89144433428421, 1.970225491359724, 2.170964657801855, 9.360825926675476, 4.332300628376232, 7.889246224640453, 1.9012924538561715, 1.1441264205020951, 8.519126845652732], [8.922469117850953, 4.25366216301161, 2.9492822492346504, 6.041283208782307, 5.8687568845093505, 6.4395577390806755, 7.429754117221931, 2.529951093446292, 2.7113008047713794, 7.75581612141064], [6.9994350019791485, 2.240629262739003, 4.772952727319819, 4.034256501263846, 1.7755555662884348, 0.7385729271228969, 1.364018524953896, 6.890520396762556, 0.9346990987893344, 2.55277318130862], [4.531465826901667, 5.350855324472762, 8.1176181942288, 0.7258619431642244, 4.0469383628700335, 6.680938066601064, 1.5479105173844687, 5.891960513587115, 7.067241902997047, 5.1259848964728505], [0.40051148119502944, 2.3171439182551534, 4.696676631270411, 1.8109839194145672, 7.189037619822441, 6.833222790013448, 1.399482540391358, 4.5797458902623065, 5.408823209391278, 1.6315588159922423], [1.28487014750725, 0.2900253816686449, 6.917969139076953, 9.924546107679147, 2.75093256756179, 7.718802985711569, 7.164474218328275, 7.52567743920296, 6.305426724839087, 7.397128084132017], [6.431363965907232, 4.772786796495029, 2.3556323877918626, 4.150869062205777, 5.692278338785418, 6.396478417918995, 2.41034897527722, 7.074968716545595, 2.936795079656079, 0.9768055956131483], [9.014257421620075, 3.6313244400473565, 9.34181032987066, 6.795252752471491, 5.981180597850511, 2.575571654232137, 2.4477224068600165, 3.344382746471002, 9.51894459071623, 0.19816613144791217]
        ]> : tensor<10x10xf64>
        %result_matrix = call @matmul(%t_sparse, %s, %c) :
            (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %c1 = arith.constant 1 : index
        %element_f64 = tensor.extract %result_matrix[%c1, %c1] : tensor<10x10xf64>
        %element_i64 = arith.fptosi %element_f64 : f64 to i64
        return %element_i64 : i64
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[6.730825, 8.921434, 2.597307, 3.259759, 5.989063, 1.210561, 3.743675, 6.168187, 7.149125, 1.324877, 2.755235, 1.181854, 8.133703, 1.467949, 7.843505, 3.310890, 9.201797, 2.436365, 6.111243, 6.377704, 2.270386, 9.808936, 9.176494, 7.537201, 0.813046, 3.280178, 6.628280, 3.313540, 1.444612, 0.651962]> : tensor<30xf64>
        %row_ptr = arith.constant dense<[0, 5, 5, 10, 11, 16, 17, 22, 24, 30, 30]> : tensor<11xindex>
        %col_ind = arith.constant dense<[0, 2, 4, 6, 8, 0, 2, 4, 6, 8, 0, 0, 2, 4, 6, 8, 0, 0, 2, 4, 6, 8, 3, 4, 0, 1, 2, 4, 6, 8]> : tensor<30xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<30xindex>), tensor<30xf64> to tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }
    
}
