// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @sparse_dense_matmul(%sparse: tensor<10x10xf64, #CSR>,%dense: tensor<10x10xf64>,%init: tensor<10x10xf64>
    ) -> tensor<10x10xf64> {
        %res = linalg.matmul ins(%sparse, %dense: tensor<10x10xf64, #CSR>, tensor<10x10xf64>) 
            outs(%init: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %res : tensor<10x10xf64>
    }

    func.func @main() -> i32 {
        %c0 = arith.constant 0 : index
        %c1 = arith.constant 1 : index
        %rows = arith.constant 10 : index
        %cols = arith.constant 10 : index
        %zero_f64 = arith.constant 0.0 : f64

        %init = tensor.empty() : tensor<10x10xf64>
        %sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %dense = arith.constant dense<[[8.136950, 0.381052, 5.814642, 8.462707, 1.240948, 9.531269, 1.017516, 0.543728, 7.319552, 8.503837], [2.135195, 4.776882, 7.640682, 2.864692, 7.744220, 6.195220, 9.606065, 8.929694, 3.196242, 2.362714], [1.527470, 1.511130, 9.425686, 5.138830, 8.661229, 2.678250, 0.324536, 6.379070, 3.747920, 6.318767], [3.697651, 3.179943, 2.070921, 8.101652, 3.340508, 7.401466, 8.871206, 8.663187, 9.236164, 6.767401], [9.054120, 2.332064, 9.933399, 4.644301, 0.453465, 9.145451, 1.763715, 8.615079, 2.203944, 2.396340], [8.889540, 9.871147, 2.595748, 4.998580, 2.393989, 2.569014, 6.997710, 3.120112, 3.473894, 1.069137], [5.537132, 9.565267, 4.478835, 4.956601, 3.893998, 9.901438, 9.454295, 8.547047, 4.281932, 0.256172], [6.039859, 3.827351, 8.377050, 6.615610, 2.854464, 4.550768, 2.843475, 8.927026, 8.796370, 7.249869], [1.998564, 5.648226, 5.934507, 5.832061, 7.876318, 7.143550, 7.630501, 4.870056, 2.270287, 1.345472], [3.309524, 6.570688, 3.372068, 4.242273, 5.749670, 1.550269, 2.236111, 3.401133, 0.276365, 9.728232]]> : tensor<10x10xf64>

        %computed = call @sparse_dense_matmul(%sparse, %dense, %init) : (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %expected = arith.constant dense<[[43.811108, 38.893140, 74.764004, 58.850745, 58.118536, 65.862403, 38.991196, 57.279024, 38.571480, 41.071074], [37.076843, 58.837562, 38.724631, 38.994905, 31.532825, 62.999108, 59.308137, 58.723673, 34.214551, 11.110758], [117.714064, 110.250430, 119.306278, 114.113067, 66.234595, 169.638157, 112.427628, 128.637524, 93.443992, 59.698401], [0.929423, 0.919480, 5.735267, 3.126834, 5.270116, 1.629640, 0.197471, 3.881486, 2.280505, 3.844793], [221.647276, 177.465167, 207.073903, 195.119309, 120.798024, 238.130781, 166.927972, 171.286561, 126.088676, 99.020692], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [138.268664, 41.163526, 208.027954, 149.100271, 104.727672, 166.397699, 32.638111, 131.467856, 106.541751, 139.368558], [3.655172, 3.616071, 22.555280, 12.297009, 20.725965, 6.408942, 0.776601, 15.264854, 8.968620, 15.120550], [180.896649, 141.241972, 253.212404, 218.992476, 181.277844, 252.658050, 127.729044, 192.744208, 147.023584, 187.031821], [43.297994, 27.437164, 60.052636, 47.425381, 20.462821, 32.623129, 20.384043, 63.995251, 63.058619, 51.972200]]> : tensor<10x10xf64>

        // Validate each element
        %false = arith.constant false : i1
        %flag = scf.for %i = %c0 to %rows step %c1 iter_args(%f_iter = %false) -> (i1) {
            %flag_row = scf.for %j = %c0 to %cols step %c1 iter_args(%f_in = %f_iter) -> (i1) {
                %cmp_c = tensor.extract %computed[%i, %j] : tensor<10x10xf64>
                %cmp_e = tensor.extract %expected[%i, %j] : tensor<10x10xf64>
                %neq = arith.cmpf une, %cmp_c, %cmp_e : f64
                %new_f = arith.or %f_in, %neq : i1
                scf.yield %new_f : i1
            }
            scf.yield %flag_row : i1
        }

        %zero_i32 = arith.constant 0 : i32
        %one_i32 = arith.constant 1 : i32
        %status = scf.if %flag -> (i32) {
            scf.yield %one_i32 : i32
        } else {
            scf.yield %zero_i32 : i32
        }
        return %status : i32
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[1.456195, 3.385302, 1.242089, 0.427625, 1.164585, 2.649555, 5.045824, 1.151688, 1.091493, 3.669947, 0.357676, 2.574982, 8.492756, 2.029648, 2.355221, 0.608472, 5.810878, 1.959787, 7.326550, 7.861967, 3.572209, 7.688731, 7.120115, 9.601154, 6.914491, 0.137815, 1.150545, 2.392959, 8.632205, 9.208051, 4.375545, 6.069085, 5.584443, 3.689026, 7.168709]> : tensor<35xf64>
        %row_ptr = arith.constant dense<[0, 6, 9, 15, 16, 22, 22, 27, 28, 34, 35]> : tensor<11xindex>
        %col_ind = arith.constant dense<[0, 2, 4, 5, 6, 8, 6, 7, 8, 0, 2, 4, 6, 7, 8, 2, 0, 2, 4, 5, 6, 8, 0, 2, 4, 6, 8, 2, 0, 2, 4, 6, 8, 9, 7]> : tensor<35xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<35xindex>), tensor<35xf64> -> tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }

}
