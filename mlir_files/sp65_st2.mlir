// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @matmul(%t : tensor<10x10xf64, #CSR>, %s : tensor<10x10xf64>, %out : tensor<10x10xf64>)
        -> tensor<10x10xf64> {
        %0 = linalg.matmul
            ins(%t, %s: tensor<10x10xf64, #CSR>, tensor<10x10xf64>)
            outs(%out: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %0 : tensor<10x10xf64>
    }

    func.func @main() -> i64 {
        %c = tensor.empty() : tensor<10x10xf64>
        %t_sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %s = arith.constant dense<[
            [3.6678422314645864, 6.028631572284867, 8.930674370685995, 8.221973456098535, 1.9469802231467948, 5.615230907535354, 7.311983443466291, 1.8262348441800391, 4.155481444346854, 5.281321286687496], [2.674592159733087, 7.2004730699408075, 5.299938025691794, 8.266901724344267, 7.70970945801526, 7.652563664527891, 2.411073257926102, 0.6809255464393771, 3.4614750209863687, 0.286533820980851], [3.739148057354754, 5.277282624191782, 0.30984215604134335, 5.461639001176818, 9.580412670305538, 8.33749916709101, 4.990067971905003, 2.53180004301631, 3.921564555882575, 0.05372603958425204], [4.547638349627153, 8.596640485648411, 5.445957995891897, 6.389365253040156, 3.185598871194333, 0.6939026045889118, 4.341807025455513, 3.3138901154512257, 9.357506586111569, 5.431168353228955], [1.687352886689547, 3.440829585878804, 9.47444180943318, 9.782561914890351, 3.9452634225919803, 0.21057364975283321, 5.108121376102303, 1.8911780651980425, 9.955885986111625, 6.030442084995195], [8.52646966393109, 0.8594634742896035, 5.55630001193668, 9.13829157383853, 5.212498589093335, 1.4497127867691761, 7.967024310245801, 0.6321050679245144, 2.79699057825796, 0.5530746261721575], [0.46196550477117126, 4.729527135012564, 1.9727383500191709, 1.9742367647803138, 5.815634184461556, 3.5299934739908045, 5.06224018603009, 8.660727231032233, 3.977541655289467, 0.220892603098084], [9.717209127262832, 9.341825952456196, 9.427262701941128, 7.7610298398167075, 1.9852958480443772, 2.7617741321422162, 3.2199157836405035, 7.744113919490319, 0.05566558311222325, 9.3769906430908], [6.336980828683593, 8.505775799293003, 1.3537990040884595, 5.122620609012406, 1.209794370461087, 2.3881637885785247, 0.9421241166429339, 1.738505981828865, 3.723804573896796, 0.18082975734286855], [8.194479888585397, 5.742668292937642, 1.1587577775593716, 4.045761359265633, 9.866530093986746, 8.903390992052906, 6.477474615372919, 6.237445555596276, 8.920943276854109, 3.1532295862218973]
        ]> : tensor<10x10xf64>
        %result_matrix = call @matmul(%t_sparse, %s, %c) :
            (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %c1 = arith.constant 1 : index
        %element_f64 = tensor.extract %result_matrix[%c1, %c1] : tensor<10x10xf64>
        %element_i64 = arith.fptosi %element_f64 : f64 to i64
        return %element_i64 : i64
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[5.667040, 7.784855, 8.783403, 2.128210, 9.326423, 2.601405, 6.793373, 8.095137, 1.885216, 2.959287, 4.688581, 2.073919, 6.687014, 2.380052, 9.362977, 6.031991, 6.760454, 9.303765, 1.374704, 8.251350, 7.628847, 0.830278, 0.443133, 1.176433, 0.756383, 5.962980, 2.331469, 6.805025, 4.844631, 3.947797, 8.694946, 5.082686, 2.618711, 0.385360, 8.595176]> : tensor<35xf64>
        %row_ptr = arith.constant dense<[0, 6, 7, 12, 13, 19, 20, 25, 27, 32, 35]> : tensor<11xindex>
        %col_ind = arith.constant dense<[0, 2, 4, 6, 7, 8, 9, 0, 2, 4, 6, 8, 0, 0, 1, 2, 4, 6, 8, 1, 0, 2, 4, 6, 8, 7, 9, 0, 2, 4, 6, 8, 2, 4, 8]> : tensor<35xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<35xindex>), tensor<35xf64> to tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }
    
}
