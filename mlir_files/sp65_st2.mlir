// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @sparse_dense_matmul(%sparse: tensor<10x10xf64, #CSR>,%dense: tensor<10x10xf64>,%init: tensor<10x10xf64>
    ) -> tensor<10x10xf64> {
        %res = linalg.matmul ins(%sparse, %dense: tensor<10x10xf64, #CSR>, tensor<10x10xf64>) 
            outs(%init: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %res : tensor<10x10xf64>
    }

    func.func @main() -> i32 {
        %c0 = arith.constant 0 : index
        %c1 = arith.constant 1 : index
        %rows = arith.constant 10 : index
        %cols = arith.constant 10 : index
        %zero_f64 = arith.constant 0.0 : f64

        %init = tensor.empty() : tensor<10x10xf64>
        %sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %dense = arith.constant dense<[[6.119286, 5.204575, 5.928397, 2.122679, 2.742604, 4.018237, 2.978221, 2.575594, 2.985822, 2.799683], [2.393053, 8.807771, 3.677697, 2.335944, 9.385657, 4.724809, 5.711091, 4.487461, 4.796696, 7.606936], [7.308351, 8.169582, 2.606641, 6.614786, 7.931534, 7.129914, 7.503333, 1.819674, 6.431232, 8.231510], [8.855255, 8.181516, 5.676702, 2.208535, 1.475407, 8.900584, 3.873822, 0.072818, 6.614095, 1.320545], [3.706802, 9.901003, 9.291122, 2.748827, 7.952309, 9.754611, 8.283109, 5.539944, 9.150923, 8.445292], [9.011046, 7.076094, 3.911016, 9.314109, 9.957475, 0.554204, 8.047582, 0.913835, 4.658613, 6.762579], [7.154868, 6.985191, 9.429153, 2.550221, 7.009334, 6.212453, 3.971341, 3.912325, 0.988187, 5.956099], [2.270709, 9.441846, 8.359061, 8.039481, 9.575885, 6.567265, 1.119304, 5.314235, 7.008995, 0.226142], [8.613491, 4.108504, 7.151607, 5.237207, 7.989272, 3.189726, 6.274380, 2.870920, 8.978384, 3.926781], [4.177773, 0.894894, 1.200705, 5.429746, 7.135789, 5.510558, 6.014287, 2.629551, 3.160183, 9.650218]]> : tensor<10x10xf64>

        %computed = call @sparse_dense_matmul(%sparse, %dense, %init) : (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %expected = arith.constant dense<[[228.727275, 231.471194, 221.180454, 135.419874, 221.035995, 201.322284, 194.543467, 107.399131, 191.776282, 195.437006], [7.722129, 32.109425, 28.427136, 27.340322, 32.565258, 22.333672, 3.806481, 18.072423, 23.835889, 0.769052], [115.363820, 140.577921, 140.047030, 61.653876, 114.109895, 124.865389, 109.211812, 70.978673, 111.793449, 109.805450], [68.191646, 47.774239, 62.272820, 30.802291, 43.682961, 36.940820, 39.805265, 26.304196, 48.448532, 31.154272], [200.576767, 221.808173, 196.061804, 144.589619, 235.826138, 233.916190, 215.214697, 117.527474, 185.239440, 252.362006], [46.997696, 52.536002, 16.762488, 42.537601, 51.005189, 45.850224, 48.251567, 11.701752, 41.357223, 52.934245], [201.299612, 236.591983, 171.453483, 125.797868, 235.754042, 180.656983, 189.091422, 98.141028, 198.957111, 188.713931], [51.040741, 24.345659, 42.378097, 31.033981, 47.341824, 18.901278, 37.179934, 17.012137, 53.202983, 23.268826], [170.841531, 174.235448, 189.810316, 82.383808, 171.187094, 137.484364, 128.503118, 93.712877, 117.057153, 137.918778], [18.512508, 68.136366, 28.450435, 18.070713, 72.606856, 36.550825, 44.180644, 34.714718, 37.106941, 58.846778]]> : tensor<10x10xf64>

        // Validate each element
        %false = arith.constant "false" : i1
        %flag = scf.for %i = %c0 to %rows step %c1 iter_args(%f_iter = %false) -> (i1) {
            %flag_row = scf.for %j = %c0 to %cols step %c1 iter_args(%f_in = %f_iter) -> (i1) {
                %cmp_c = tensor.extract %computed[%i, %j] : tensor<10x10xf64>
                %cmp_e = tensor.extract %expected[%i, %j] : tensor<10x10xf64>
                %neq = arith.cmpf une, %cmp_c, %cmp_e : f64
                %new_f = arith.ori %f_in, %neq : i1
                scf.yield %new_f : i1
            }
            scf.yield %flag_row : i1
        }

        %zero_i32 = arith.constant 0 : i32
        %one_i32 = arith.constant 1 : i32
        %status = scf.if %flag -> (i32) {
            scf.yield %one_i32 : i32
        } else {
            scf.yield %zero_i32 : i32
        }
        return %status : i32
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[9.186951, 8.236287, 5.397139, 5.291216, 6.321705, 3.400757, 8.225417, 2.130122, 6.234720, 1.698180, 1.648732, 6.670779, 3.177718, 7.593595, 7.437959, 8.403628, 3.839446, 1.187632, 7.396094, 6.430684, 3.397373, 9.672027, 6.355880, 3.462975, 1.123852, 1.692573, 7.426941, 5.925674, 8.624050, 3.680688, 0.783283, 1.759248, 7.513182, 5.022227, 7.735937]> : tensor<35xf64>
        %row_ptr = arith.constant dense<[0, 5, 6, 11, 13, 19, 20, 27, 28, 34, 35]> : tensor<11xindex>
        %col_ind = arith.constant dense<[0, 2, 4, 6, 8, 7, 0, 2, 4, 6, 8, 0, 8, 0, 2, 4, 6, 8, 9, 2, 0, 1, 2, 3, 4, 6, 8, 8, 0, 1, 2, 4, 6, 8, 1]> : tensor<35xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<35xindex>), tensor<35xf64> -> tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }

}
