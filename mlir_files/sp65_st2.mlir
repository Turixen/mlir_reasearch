// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @matmul(%t : tensor<10x10xf64, #CSR>, %s : tensor<10x10xf64>, %out : tensor<10x10xf64>)
        -> tensor<10x10xf64> {
        %0 = linalg.matmul
            ins(%t, %s: tensor<10x10xf64, #CSR>, tensor<10x10xf64>)
            outs(%out: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %0 : tensor<10x10xf64>
    }

    func.func @main() -> i64 {
        %c = tensor.empty() : tensor<10x10xf64>
        %t_sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %s = arith.constant dense<[
            [5.627953884406334, 4.763473341093229, 0.8375579702059721, 8.252812920882983, 4.159582729678829, 1.6725243677963453, 2.6950784643508574, 3.5519869407812674, 7.110559840407973, 2.8395396592179676], [6.2752806488515445, 4.9300738838397695, 6.400721780758567, 5.0322319386213, 0.3827945847549108, 6.664064186060833, 1.2213263410721686, 1.6076220908009853, 2.908311676264199, 5.811131890496589], [5.9574389058868835, 9.186177897066962, 6.636079451565163, 7.4713637769933925, 8.771695982161745, 3.7222408207585342, 0.7012138385138766, 7.537925911615929, 2.546951039553557, 6.611296102050925], [9.37651033783937, 3.033433488060023, 8.494683610366305, 4.373557684557747, 1.044331216909563, 8.171515246290454, 9.41604045623935, 3.41461731399872, 5.374486927639915, 5.033671224889017], [4.690457883353183, 4.022008337142115, 0.7980995451143735, 8.764486251730505, 5.381010370050698, 7.8291666227370555, 8.372161723065663, 8.100583147174241, 4.225686290902733, 8.029142113934922], [8.463994121234077, 2.310767441335415, 4.600993848650413, 5.59056761996536, 7.546081537164191, 8.224118340741434, 3.861531705634078, 5.525925629834951, 9.128578391034187, 9.17635231201153], [3.1407215200036545, 3.369128741153846, 1.9578878533965627, 5.828190426869653, 6.066931158278356, 6.643466818478706, 9.492273992075352, 1.7118446111933483, 5.741915565041244, 1.7850990674186151], [7.346070779545201, 7.980504077416178, 0.15741622729458005, 5.356097160802584, 5.55570342737238, 9.733496071299726, 1.8613592470562257, 2.5545487734945835, 1.856791140754035, 5.510039441572319], [5.5586850121599864, 5.181433174005873, 0.7530428525623978, 4.235539971790047, 6.802866460022601, 9.485111310013021, 7.9107425068276624, 8.214226745413646, 9.910883785917244, 6.618488607333197], [1.6672244445509976, 7.603727187308373, 2.478650673680778, 3.2035152063188455, 0.6337684656465525, 5.118592343048867, 6.889757636792412, 6.369211187808842, 4.042966318435614, 3.9275737432007496]
        ]> : tensor<10x10xf64>
        %result_matrix = call @matmul(%t_sparse, %s, %c) :
            (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %c1 = arith.constant 1 : index

        %element_f64 = tensor.extract %result_matrix[%c1, %c1] : tensor<10x10xf64>
        %element_i64 = arith.fptosi %element_f64 : f64 to i64
        return %element_i64 : i64
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[8.149970, 9.237394, 6.447768, 4.061220, 3.514306, 1.725651, 2.897945, 4.592292, 4.431423, 3.442539, 5.282254, 8.640115, 8.066384, 5.651501, 0.342929, 3.592337, 6.915212, 3.772116, 0.910809, 2.977984, 3.714651, 5.264241, 9.866170, 3.444218, 3.597888, 5.515695, 2.289399, 4.256376, 8.494611, 8.383502, 8.347042, 4.347493, 0.309539, 6.456473, 6.942899]> : tensor<35xf64>
        %row_ptr = arith.constant dense<[0, 5, 8, 13, 13, 20, 20, 25, 25, 32, 35]> : tensor<11xindex>
        %col_ind = arith.constant dense<[0, 2, 4, 6, 8, 0, 3, 5, 0, 2, 4, 6, 8, 0, 2, 4, 5, 6, 7, 8, 0, 2, 4, 6, 8, 0, 2, 3, 4, 5, 6, 8, 0, 1, 3]> : tensor<35xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<35xindex>), tensor<35xf64> to tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }
    
}
