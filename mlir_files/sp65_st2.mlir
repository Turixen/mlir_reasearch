// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @sparse_dense_matmul(%sparse: tensor<10x10xf64, #CSR>,%dense: tensor<10x10xf64>,%init: tensor<10x10xf64>
    ) -> tensor<10x10xf64> {
        %res = linalg.matmul ins(%sparse, %dense: tensor<10x10xf64, #CSR>, tensor<10x10xf64>) 
            outs(%init: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %res : tensor<10x10xf64>
    }

    func.func @main() -> i32 {
        %c0 = arith.constant 0 : index
        %c1 = arith.constant 1 : index
        %rows = arith.constant 10 : index
        %cols = arith.constant 10 : index
        %zero_f64 = arith.constant 0.0 : f64

        %init = tensor.empty() : tensor<10x10xf64>
        %sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %dense = arith.constant dense<[[5.485419, 6.217083, 4.404286, 8.300395, 0.861918, 9.336648, 5.196101, 0.437450, 6.698421, 1.699706], [5.551921, 6.140218, 0.018235, 1.459525, 1.958958, 2.313901, 4.043328, 1.971153, 5.718172, 5.066133], [1.830896, 9.615657, 5.238658, 2.334640, 0.644883, 5.843845, 3.744065, 2.962949, 8.900951, 4.468899], [0.074588, 4.036948, 2.328923, 4.995000, 7.324160, 0.439214, 8.705451, 7.064979, 9.756122, 1.073196], [6.131063, 9.682044, 1.838923, 2.786873, 8.415971, 9.393145, 8.677096, 6.414045, 9.782547, 6.627458], [5.675103, 9.604894, 2.595783, 0.790073, 9.454171, 0.699831, 6.379701, 4.845773, 3.126722, 1.436187], [3.036706, 3.450067, 3.454950, 1.058998, 3.521040, 7.242865, 0.789115, 3.931680, 2.087562, 8.702700], [1.299855, 4.500333, 5.137255, 2.313384, 0.481939, 4.493050, 1.647309, 1.007023, 8.709483, 3.838740], [3.917113, 2.319213, 6.136854, 5.799890, 7.204193, 8.559006, 7.600786, 6.385548, 2.508663, 1.509622], [1.475598, 6.444410, 1.534183, 9.692787, 0.416845, 2.876547, 9.682886, 6.619320, 3.712938, 3.021500]]> : tensor<10x10xf64>

        %computed = call @sparse_dense_matmul(%sparse, %dense, %init) : (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %expected = arith.constant dense<[[102.778039, 184.164889, 108.096468, 104.713204, 80.121082, 204.955877, 123.192186, 86.530238, 176.117832, 122.459778], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [88.200331, 138.804130, 87.103457, 130.177981, 69.462548, 175.200854, 128.199013, 101.221962, 115.489061, 120.507270], [9.311575, 47.692404, 22.207227, 45.990364, 73.567816, 17.000914, 85.564054, 68.550837, 95.973317, 18.419977], [111.830365, 190.736121, 102.303567, 121.458788, 86.712547, 207.139246, 147.321756, 83.466515, 190.770906, 95.973002], [30.910814, 85.706191, 95.684016, 88.194780, 95.489550, 85.577225, 119.414880, 94.738844, 172.239540, 52.191028], [96.130046, 154.989532, 112.481067, 99.222105, 72.735989, 195.905980, 100.230241, 70.536061, 186.906176, 130.566492], [44.340182, 49.738949, 20.568967, 43.590274, 10.646359, 51.308218, 37.884914, 8.711244, 50.551092, 25.068265], [127.869313, 182.302067, 121.371690, 111.620287, 150.542862, 249.065893, 163.362402, 139.477537, 173.020862, 154.476738], [43.809012, 74.145071, 20.038173, 6.098972, 72.981563, 5.402354, 49.248165, 37.406989, 24.136764, 11.086656]]> : tensor<10x10xf64>

        // Validate each element
        %false = arith.constant "false" : i1
        %flag = scf.for %i = %c0 to %rows step %c1 iter_args(%f_iter = %false) -> (i1) {
            %flag_row = scf.for %j = %c0 to %cols step %c1 iter_args(%f_in = %f_iter) -> (i1) {
                %cmp_c = tensor.extract %computed[%i, %j] : tensor<10x10xf64>
                %cmp_e = tensor.extract %expected[%i, %j] : tensor<10x10xf64>
                %neq = arith.cmpf une, %cmp_c, %cmp_e : f64
                %new_f = arith.or %f_in, %neq : i1
                scf.yield %new_f : i1
            }
            scf.yield %flag_row : i1
        }

        %zero_i32 = arith.constant 0 : i32
        %one_i32 = arith.constant 1 : i32
        %status = scf.if %flag -> (i32) {
            scf.yield %one_i32 : i32
        } else {
            scf.yield %zero_i32 : i32
        }
        return %status : i32
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[6.979642, 7.807583, 4.615331, 4.869264, 1.816006, 5.799340, 1.632064, 2.056556, 8.093577, 2.136159, 5.317249, 8.417049, 1.416355, 8.755833, 6.752243, 6.664230, 0.354658, 2.425893, 7.922750, 9.588192, 4.558615, 6.460042, 1.203568, 4.326953, 5.821740, 8.796764, 0.727106, 4.656197, 3.386034, 3.794603, 3.982222, 8.056213, 7.623945, 6.948604, 7.719509]> : tensor<35xf64>
        %row_ptr = arith.constant dense<[0, 5, 5, 11, 13, 18, 21, 27, 29, 34, 35]> : tensor<11xindex>
        %col_ind = arith.constant dense<[0, 2, 4, 6, 8, 0, 2, 4, 6, 8, 9, 3, 4, 0, 2, 4, 6, 8, 3, 7, 8, 0, 2, 4, 6, 7, 8, 0, 1, 0, 2, 4, 6, 8, 5]> : tensor<35xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<35xindex>), tensor<35xf64> -> tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }

}
