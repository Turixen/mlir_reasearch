// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @sparse_dense_matmul(%sparse: tensor<10x10xf64, #CSR>,%dense: tensor<10x10xf64>,%init: tensor<10x10xf64>
    ) -> tensor<10x10xf64> {
        %res = linalg.matmul ins(%sparse, %dense: tensor<10x10xf64, #CSR>, tensor<10x10xf64>) 
            outs(%init: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %res : tensor<10x10xf64>
    }

    func.func @main() -> i32 {
        %c0 = arith.constant 0 : index
        %c1 = arith.constant 1 : index
        %rows = arith.constant 10 : index
        %cols = arith.constant 10 : index
        %zero_f64 = arith.constant 0.0 : f64

        %init = tensor.empty() : tensor<10x10xf64>
        %sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %dense = arith.constant dense<[[0.192984, 2.774393, 6.916467, 0.080385, 7.473238, 1.353109, 4.677305, 6.451285, 0.758570, 6.889657], [1.414949, 7.119378, 0.698985, 6.606849, 7.648416, 5.866149, 9.824906, 6.654256, 1.898582, 5.429750], [6.427884, 8.067679, 4.115968, 5.720744, 1.043125, 9.741512, 1.900303, 9.359619, 1.898750, 7.394367], [8.098096, 6.561773, 0.271962, 2.981418, 6.131247, 0.831066, 2.749341, 8.387297, 2.054963, 5.594546], [7.848473, 9.092491, 4.551225, 9.490278, 3.557595, 2.940717, 8.680242, 5.331352, 2.799239, 9.418961], [4.958913, 6.462427, 4.488488, 2.734424, 8.817391, 1.586613, 2.066545, 2.483403, 5.394111, 8.452780], [9.086494, 0.298831, 8.529462, 8.314105, 1.566228, 5.718707, 9.003889, 1.260480, 3.668782, 9.547181], [1.596093, 9.503538, 6.840563, 6.817822, 7.317575, 7.350590, 7.774663, 4.149413, 8.112672, 1.997069], [4.099617, 1.692062, 9.884799, 7.184896, 7.609844, 6.016946, 9.429889, 9.833202, 2.441849, 0.865655], [3.194221, 2.538464, 5.296230, 6.845289, 8.570517, 6.109898, 1.126646, 3.905110, 7.356080, 4.346616]]> : tensor<10x10xf64>

        %computed = call @sparse_dense_matmul(%sparse, %dense, %init) : (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %expected = arith.constant dense<[[104.666782, 95.531970, 94.642118, 109.484430, 54.748241, 77.622633, 107.356224, 91.494396, 39.568147, 140.094617], [27.727789, 11.444273, 66.855908, 48.595090, 51.469233, 40.695658, 63.779116, 66.506927, 16.515462, 5.854864], [237.035761, 199.803509, 283.903825, 264.944317, 180.203302, 220.418233, 284.394386, 280.344758, 97.969907, 293.645100], [10.850941, 54.597003, 5.360365, 50.666527, 58.654082, 44.986253, 75.345123, 51.030078, 14.559827, 41.639605], [165.717998, 166.305964, 213.425394, 188.293236, 154.923188, 145.673025, 217.855554, 217.229338, 70.048952, 236.801594], [13.623522, 15.782912, 7.900099, 16.473397, 6.175338, 5.104550, 15.067322, 9.254257, 4.858969, 16.349604], [142.783554, 102.071287, 171.995672, 168.953434, 112.689401, 101.907517, 195.352615, 139.408626, 61.503323, 167.105051], [83.072157, 108.383803, 36.741490, 61.750539, 93.456611, 44.477064, 64.385246, 98.526643, 59.637668, 61.864443], [94.974420, 152.101879, 217.959165, 182.811321, 211.157701, 166.544563, 202.594136, 175.916729, 145.424919, 111.997352], [89.474818, 162.652813, 97.474504, 145.864360, 91.380772, 85.569543, 145.274120, 84.403679, 90.052058, 108.007717]]> : tensor<10x10xf64>

        // Validate each element
        %false = arith.constant "false" : i1
        %flag = scf.for %i = %c0 to %rows step %c1 iter_args(%f_iter = %false) -> (i1) {
            %flag_row = scf.for %j = %c0 to %cols step %c1 iter_args(%f_in = %f_iter) -> (i1) {
                %cmp_c = tensor.extract %computed[%i, %j] : tensor<10x10xf64>
                %cmp_e = tensor.extract %expected[%i, %j] : tensor<10x10xf64>
                %neq = arith.cmpf une, %cmp_c, %cmp_e : f64
                %new_f = arith.ori %f_in, %neq : i1
                scf.yield %new_f : i1
            }
            scf.yield %flag_row : i1
        }

        %zero_i32 = arith.constant 0 : i32
        %one_i32 = arith.constant 1 : i32
        %status = scf.if %flag -> (i32) {
            scf.yield %one_i32 : i32
        } else {
            scf.yield %zero_i32 : i32
        }
        return %status : i32
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[3.077851, 3.579214, 6.271263, 3.490846, 0.030893, 6.763507, 8.346915, 9.103472, 9.574848, 7.491733, 8.217195, 7.668788, 9.712376, 5.514160, 9.399816, 3.807037, 4.886422, 1.735818, 4.042262, 0.617176, 8.185661, 5.506936, 5.793869, 9.272270, 5.002482, 3.999001, 0.447363, 1.758139, 0.949757, 1.398103, 9.635398, 7.832819, 3.952202, 9.832883, 7.707384]> : tensor<35xf64>
        %row_ptr = arith.constant dense<[0, 5, 6, 11, 12, 17, 18, 23, 25, 33, 35]> : tensor<11xindex>
        %col_ind = arith.constant dense<[0, 2, 4, 6, 8, 8, 0, 2, 4, 6, 8, 1, 0, 2, 4, 6, 8, 4, 0, 2, 4, 6, 8, 3, 7, 0, 2, 4, 5, 6, 7, 8, 9, 4, 7]> : tensor<35xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<35xindex>), tensor<35xf64> to tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }

}
