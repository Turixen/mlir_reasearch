// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @matmul(%t : tensor<10x10xf64, #CSR>, %s : tensor<10x10xf64>, %out : tensor<10x10xf64>)
        -> tensor<10x10xf64> {
        %0 = linalg.matmul
            ins(%t, %s: tensor<10x10xf64, #CSR>, tensor<10x10xf64>)
            outs(%out: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %0 : tensor<10x10xf64>
    }

    func.func @main() -> i64 {
        %c = tensor.empty() : tensor<10x10xf64>
        %t_sparse = call @test_assemble() : () -> tensor<10x10xf64, #CSR>
        %s = arith.constant dense<[
            [6.624398307676476, 5.153947612695063, 8.586990653916697, 4.558598200823754, 6.554773746083441, 8.845292179707792, 2.1120054226049634, 8.507407833044187, 1.7088914698070223, 6.242017102059023], [6.812120553788819, 0.14460385054622216, 5.3857581678553395, 2.836213137835557, 1.4805022966729853, 9.984713092970978, 8.925882074438245, 4.473247869833651, 5.491757718919774, 9.911146987286505], [1.0054893213993321, 9.28573225253594, 8.448208498133031, 6.1683496245607845, 6.6123885486697, 5.25820119823293, 0.5874394922131088, 7.787090735851837, 0.4952350637552305, 1.2742809398382016], [8.85764598596473, 3.1893343607554625, 6.730599901299118, 5.308909568821633, 8.275553179171892, 6.931586990408272, 0.07597448599769518, 4.141066010236999, 0.3023537194163206, 9.285827953644116], [2.5112530580097445, 2.0929797039176803, 6.325268534184675, 1.382402155804816, 7.680552701794259, 2.4384716203456014, 8.187461434943899, 1.4514978237049259, 5.794686417566737, 1.417726459634575], [1.729606503633535, 0.3005123842439439, 1.531333673715708, 3.932852776403759, 4.512323607932198, 2.0868311603640333, 2.988636687743942, 2.120301080325697, 6.828057926988876, 4.054890593567967], [5.964570759212993, 6.76376950469951, 2.954771168806831, 5.822721460782946, 6.353604205902478, 7.223994112601099, 8.422916624592148, 2.9947040525773527, 2.636987212251871, 5.684419496036575], [8.394711991871343, 1.9034430379172906, 0.47653313235748174, 8.410514174238326, 9.676748000719945, 0.0358663105332635, 2.9973118346147976, 4.13360195863381, 9.922942109020527, 7.559954053943287], [0.6445762112850628, 4.383692053322758, 2.436830365673275, 2.349568131893803, 9.886090270640022, 2.751944395078355, 1.5700407997820964, 3.7274280978228824, 5.757199442524463, 2.945525729367061], [5.270398470693879, 6.538497169010945, 8.927874157284135, 1.6693738861836294, 0.9289280802435107, 0.9131540717238162, 6.468587584590039, 6.997255490786576, 1.2041938201240965, 4.3662297250233495]
        ]> : tensor<10x10xf64>
        %result_matrix = call @matmul(%t_sparse, %s, %c) :
            (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %c1 = arith.constant 1 : index
        %element_f64 = tensor.extract %result_matrix[%c1, %c1] : tensor<10x10xf64>
        %element_i64 = arith.fptosi %element_f64 : f64 to i64
        return %element_i64 : i64
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[9.823061, 8.480110, 1.538171, 6.508409, 0.152511, 5.318926, 9.635037, 6.610359, 2.800786, 8.336671, 7.849864, 9.740920, 1.052741, 3.134495, 5.717281, 0.507069, 3.367369, 3.451065, 0.312995, 9.003924, 5.533998, 3.348960, 2.278660, 8.717468, 2.606977, 9.817870, 5.027712, 4.261989, 6.149118, 3.590183, 0.348612, 8.421292, 7.211203, 9.979572, 9.437143]> : tensor<35xf64>
        %row_ptr = arith.constant dense<[0, 6, 6, 14, 14, 20, 21, 26, 27, 33, 35]> : tensor<11xindex>
        %col_ind = arith.constant dense<[0, 1, 2, 4, 6, 8, 0, 1, 2, 4, 6, 7, 8, 9, 0, 2, 4, 6, 7, 8, 5, 0, 2, 4, 6, 8, 9, 0, 2, 4, 6, 8, 9, 7, 9]> : tensor<35xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<35xindex>), tensor<35xf64> to tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }
    
}
