// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @matmul(%t : tensor<10x10xf64, #CSR>, %s : tensor<10x10xf64>, %out : tensor<10x10xf64>)
        -> tensor<10x10xf64> {
        %0 = linalg.matmul
            ins(%t, %s: tensor<10x10xf64, #CSR>, tensor<10x10xf64>)
            outs(%out: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %0 : tensor<10x10xf64>
    }

    func.func @main() -> i64 {
        %c = tensor.empty() : tensor<10x10xf64>
        %t_sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %s = arith.constant dense<[
            [[8.717253, 6.301911, 2.995713, 9.009370, 6.346994, 6.808440, 1.802535, 6.988715, 9.794993, 0.104119], [4.381862, 6.465895, 7.093703, 9.942243, 8.552584, 5.015291, 9.628106, 5.662829, 8.526411, 1.967833], [2.401046, 3.357427, 3.573443, 3.624330, 3.788832, 3.612551, 1.944293, 4.445103, 5.904929, 0.999310], [1.912784, 6.610479, 7.919995, 4.685216, 2.724293, 5.233039, 2.386884, 1.146721, 2.963434, 7.753673], [7.882662, 2.359059, 9.412167, 3.481288, 0.603069, 1.442957, 9.834181, 1.689357, 4.348400, 8.646402], [7.960601, 0.588152, 8.859816, 2.444200, 6.491478, 5.594579, 6.241809, 9.861699, 4.333641, 4.798402], [1.081406, 0.352502, 7.739359, 8.690220, 9.040388, 5.750905, 5.532766, 9.897989, 5.382590, 2.177218], [7.452946, 8.456835, 5.329605, 0.773191, 2.277544, 0.784420, 6.461977, 3.105711, 0.362650, 5.195522], [3.993792, 9.672927, 5.581732, 4.365471, 0.557829, 4.607388, 5.856427, 5.733791, 0.152348, 2.447948], [7.582506, 4.290146, 4.704128, 3.602949, 1.365881, 3.400866, 3.867300, 0.409472, 1.519565, 5.822834]]
        ]> : tensor<10x10xf64>
        %result_matrix = call @matmul(%t_sparse, %s, %c) :
            (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %c1 = arith.constant 1 : index

        %element_f64 = tensor.extract %result_matrix[%c1, %c1] : tensor<10x10xf64>
        %element_i64 = arith.fptosi %element_f64 : f64 to i64
        return %element_i64 : i64
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[3.993430, 9.369641, 1.186642, 3.031266, 5.463150, 6.333413, 4.770746, 8.399299, 4.788531, 4.200866, 9.410264, 8.292320, 7.297469, 7.465053, 7.130091, 7.201505, 8.766081, 3.655298, 8.277996, 3.194375, 6.421151, 9.493888, 8.107422, 9.828705, 9.948090, 5.059876, 7.070869, 5.983884, 1.627027, 7.696104, 9.374609, 0.445894, 6.799709, 3.703842, 6.391933]> : tensor<35xf64>
        %row_ptr = arith.constant dense<[0, 5, 7, 13, 13, 20, 23, 29, 30, 35, 35]> : tensor<11xindex>
        %col_ind = arith.constant dense<[0, 2, 4, 6, 8, 5, 8, 0, 1, 2, 4, 6, 8, 0, 1, 2, 4, 6, 8, 9, 0, 6, 8, 0, 1, 2, 4, 6, 8, 1, 0, 2, 4, 6, 8]> : tensor<35xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<35xindex>), tensor<35xf64> to tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }
    
}
