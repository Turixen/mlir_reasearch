// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @matmul(%t : tensor<10x10xf64, #CSR>, %s : tensor<10x10xf64>, %out : tensor<10x10xf64>)
        -> tensor<10x10xf64> {
        %0 = linalg.matmul
            ins(%t, %s: tensor<10x10xf64, #CSR>, tensor<10x10xf64>)
            outs(%out: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %0 : tensor<10x10xf64>
    }

    func.func @main() -> i64 {
        %c = tensor.empty() : tensor<10x10xf64>
        %t_sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %s = arith.constant dense<[
            [[9.330802, 4.738490, 0.267408, 8.004717, 6.108500, 3.738279, 0.810884, 4.377745, 7.425058, 5.705642], [3.808356, 0.527443, 4.911273, 4.027535, 0.425492, 2.523748, 1.305142, 1.217313, 1.202526, 4.243260], [7.290235, 4.850759, 3.061929, 2.963750, 9.160420, 1.144595, 8.226664, 0.784801, 4.403906, 7.037289], [6.893035, 4.463942, 1.363684, 3.524954, 4.624097, 7.694195, 4.599236, 7.883337, 7.794519, 0.791101], [7.987688, 3.132376, 7.367075, 3.682470, 4.000686, 7.215401, 4.919044, 0.835063, 9.171356, 0.944193], [6.338687, 7.402938, 6.239207, 9.999558, 3.031669, 4.732811, 4.141636, 1.040047, 1.314727, 4.634343], [2.906329, 4.128202, 7.859193, 4.562553, 2.608953, 2.442307, 8.050646, 4.064877, 8.119658, 9.163323], [4.820410, 4.067761, 3.303228, 0.286910, 6.074639, 5.398533, 8.485016, 2.900278, 3.706107, 0.757647], [1.919015, 1.962490, 7.262986, 8.845623, 9.938217, 3.281488, 8.189113, 3.648883, 6.188714, 7.122677], [0.527210, 0.949832, 9.265445, 9.160747, 4.205328, 5.768327, 3.469734, 7.115093, 3.492345, 9.537021]]
        ]> : tensor<10x10xf64>
        %result_matrix = call @matmul(%t_sparse, %s, %c) :
            (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %c1 = arith.constant 1 : index

        %element_f64 = tensor.extract %result_matrix[%c1, %c1] : tensor<10x10xf64>
        %element_i64 = arith.fptosi %element_f64 : f64 to i64
        return %element_i64 : i64
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[1.096108, 1.802476, 3.881548, 0.527738, 2.143432, 1.772114, 0.647218, 1.650755, 9.633320, 0.717084, 8.421315, 4.656039, 0.519811, 4.532116, 6.568050, 8.871522, 7.826109, 6.210019, 1.078835, 9.130884, 2.443518, 5.462641, 5.533870, 7.669109, 2.512126, 5.307910, 1.411862, 4.380708, 1.278543, 1.209536, 7.376097, 0.354152, 0.750544, 9.584358, 6.980353, 8.927073, 5.805431, 7.838706, 5.320790, 8.745465]> : tensor<40xf64>
        %row_ptr = arith.constant dense<[0, 6, 8, 14, 17, 23, 26, 31, 32, 38, 40]> : tensor<11xindex>
        %col_ind = arith.constant dense<[0, 2, 4, 6, 7, 8, 6, 7, 0, 2, 3, 4, 6, 8, 0, 4, 6, 0, 2, 4, 6, 7, 8, 2, 3, 6, 0, 2, 4, 6, 8, 1, 0, 2, 4, 5, 6, 8, 0, 1]> : tensor<40xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<40xindex>), tensor<40xf64> to tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }
    
}
