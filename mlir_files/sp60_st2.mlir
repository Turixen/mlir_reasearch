// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @matmul(%t : tensor<10x10xf64, #CSR>, %s : tensor<10x10xf64>, %out : tensor<10x10xf64>)
        -> tensor<10x10xf64> {
        %0 = linalg.matmul
            ins(%t, %s: tensor<10x10xf64, #CSR>, tensor<10x10xf64>)
            outs(%out: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %0 : tensor<10x10xf64>
    }

    func.func @main() -> i64 {
        %c = tensor.empty() : tensor<10x10xf64>
        %t_sparse = call @test_assemble() : () -> tensor<10x10xf64, #CSR>
        %s = arith.constant dense<[
            [1.0278520773232014, 7.955700808447998, 4.142249723416893, 9.259026700461426, 7.541694582464426, 0.5460063449249031, 6.59464373275887, 0.9004336485844766, 5.721365617700639, 2.987895606667416], [4.43907931867749, 3.2625738387207615, 7.024793134276138, 1.0473917201434468, 1.509457207079935, 4.119043815295215, 2.734514211424608, 2.6749028978283063, 1.268371338094103, 5.298499001320749], [6.253173948334464, 5.574757455518618, 1.8425993710257682, 6.7843794746212325, 8.7457085911252, 0.8554966677065612, 6.28741627246961, 6.431795334876202, 2.8503770857753183, 8.196810446103276], [7.107721502400167, 9.86792564838567, 9.902111792716859, 9.157025030689116, 1.637395083383737, 9.629489640453318, 5.564647075470919, 7.0330682647531, 0.6068808518632374, 1.9681800351710454], [7.523031241803865, 1.5979414314885954, 8.07372339918649, 4.279312177878177, 8.132277704374612, 3.4097093393333813, 8.757715832445031, 4.341893513927006, 2.1298464985541807, 9.679519000213434], [7.284207743621874, 8.748178722392089, 6.684502273196324, 9.491217086836977, 7.8996432526545775, 9.489934248968515, 6.92713499541213, 7.956853368511066, 1.3176098051139618, 9.119300054790472], [1.0713506769664394, 1.0757120087916228, 0.11640926942306229, 6.2807723856141076, 7.513823084533083, 9.34589192496551, 9.386006753652678, 1.465776772965468, 7.820959000935933, 3.6715655638270106], [4.906088989908623, 0.3926308424938796, 2.1637839554277782, 8.68612478893348, 3.657420606916326, 7.728730380618134, 5.760683841733924, 2.9177065362822754, 7.369098658687027, 1.978235908706687], [5.654682060702468, 3.586449693499245, 3.5650754847217536, 7.5282312874559665, 9.311153109008448, 7.201229034215108, 1.0981011944294428, 6.363443596752544, 5.678482839389277, 3.8016309544853675], [0.9032777201529074, 0.7918322987021464, 8.135627676114542, 6.470192641436135, 5.8369768678096285, 3.7219792318610634, 0.2564704996588152, 7.890207097144862, 2.799094188076856, 4.179815364117188]
        ]> : tensor<10x10xf64>
        %result_matrix = call @matmul(%t_sparse, %s, %c) :
            (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %c1 = arith.constant 1 : index
        %element_f64 = tensor.extract %result_matrix[%c1, %c1] : tensor<10x10xf64>
        %element_i64 = arith.fptosi %element_f64 : f64 to i64
        return %element_i64 : i64
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[5.389202, 2.684084, 5.458527, 0.837978, 0.055233, 5.133934, 4.898993, 8.109522, 3.267885, 8.184759, 1.400915, 5.555698, 2.577148, 6.765666, 5.413913, 2.749528, 8.860854, 9.641004, 8.186886, 7.768951, 0.260671, 8.425171, 3.912288, 4.816637, 9.808947, 2.990130, 0.172741, 4.203503, 6.201237, 4.929164, 3.081172, 3.026453, 9.858839, 3.389091, 1.944256, 5.968945, 4.834176, 1.097874, 4.487078, 1.982681]> : tensor<40xf64>
        %row_ptr = arith.constant dense<[0, 5, 6, 12, 14, 21, 22, 28, 30, 36, 40]> : tensor<11xindex>
        %col_ind = arith.constant dense<[0, 2, 4, 6, 8, 0, 0, 2, 4, 5, 6, 8, 0, 9, 0, 1, 2, 4, 6, 7, 8, 2, 0, 2, 3, 4, 6, 8, 3, 4, 0, 2, 4, 6, 7, 8, 0, 5, 7, 9]> : tensor<40xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<40xindex>), tensor<40xf64> to tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }
    
}
