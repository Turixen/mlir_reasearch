// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @sparse_dense_matmul(%sparse: tensor<10x10xf64, #CSR>,%dense: tensor<10x10xf64>,%init: tensor<10x10xf64>
    ) -> tensor<10x10xf64> {
        %res = linalg.matmul ins(%sparse, %dense: tensor<10x10xf64, #CSR>, tensor<10x10xf64>) 
            outs(%init: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %res : tensor<10x10xf64>
    }

    func.func @main() -> i32 {
        %c0 = arith.constant 0 : index
        %c1 = arith.constant 1 : index
        %rows = arith.constant 10 : index
        %cols = arith.constant 10 : index
        %zero_f64 = arith.constant 0.0 : f64

        %init = tensor.empty() : tensor<10x10xf64>
        %sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %dense = arith.constant dense<[[5.401270, 3.768750, 8.298394, 7.791988, 1.821328, 6.643947, 8.813011, 8.207212, 5.010344, 8.331053], [9.243101, 3.682234, 2.380460, 4.583557, 4.510872, 4.317327, 5.539041, 7.085088, 7.858809, 5.382456], [4.515580, 0.237185, 3.034405, 5.176885, 1.282251, 7.565186, 0.214708, 3.964422, 6.907901, 7.342791], [4.543669, 2.718945, 4.977363, 3.266881, 9.809072, 3.460377, 4.908654, 5.138853, 8.636582, 8.597993], [6.949478, 7.302028, 0.941128, 3.749348, 9.545841, 8.555020, 1.001500, 1.936588, 6.730857, 1.542281], [2.940780, 9.263228, 8.311810, 4.369969, 1.913057, 1.724808, 4.138363, 0.428677, 5.535533, 5.587673], [2.306112, 7.884366, 9.247333, 2.722550, 5.078523, 3.220358, 5.013156, 7.781966, 5.557343, 0.866496], [4.078435, 2.502676, 5.563151, 9.720422, 4.362803, 5.507134, 2.783675, 7.463869, 5.188183, 4.683572], [2.891978, 6.996823, 6.121371, 3.249859, 1.438475, 0.372588, 0.286133, 2.340286, 8.259139, 7.718739], [0.822687, 2.698415, 2.534557, 8.755164, 1.902722, 9.031353, 4.451756, 5.277234, 3.486437, 2.245726]]> : tensor<10x10xf64>

        %computed = call @sparse_dense_matmul(%sparse, %dense, %init) : (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %expected = arith.constant dense<[[130.560685, 191.023088, 197.768449, 198.689324, 116.690772, 193.946932, 139.275047, 181.365205, 213.325226, 179.805131], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [60.429896, 66.768148, 52.984001, 57.805856, 73.841450, 76.797464, 39.073974, 53.857080, 82.781209, 57.630113], [48.869957, 39.484323, 30.998382, 30.452290, 23.942658, 19.476527, 24.330837, 37.883107, 61.414416, 49.124207], [177.404273, 210.320660, 210.086506, 162.740966, 138.926530, 155.905097, 142.175379, 193.178933, 242.895429, 192.799899], [37.193317, 36.610045, 63.517771, 91.627251, 20.696115, 85.984789, 76.287022, 76.719943, 48.164521, 62.268601], [133.268543, 128.493487, 125.319549, 123.924928, 88.727690, 122.807819, 88.028098, 118.001863, 171.479383, 156.970297], [118.561048, 132.610534, 84.586599, 165.015928, 126.879655, 216.481331, 54.860074, 106.684337, 182.424676, 119.154865], [102.049988, 96.101285, 84.502187, 97.323875, 88.732497, 122.575501, 71.461823, 84.738387, 112.935356, 96.659963], [1.606404, 0.084378, 1.079480, 1.841661, 0.456157, 2.691292, 0.076382, 1.410331, 2.457465, 2.612175]]> : tensor<10x10xf64>

        // Validate each element
        %false = arith.constant "false" : i1
        %flag = scf.for %i = %c0 to %rows step %c1 iter_args(%f_iter = %false) -> (i1) {
            %flag_row = scf.for %j = %c0 to %cols step %c1 iter_args(%f_in = %f_iter) -> (i1) {
                %cmp_c = tensor.extract %computed[%i, %j] : tensor<10x10xf64>
                %cmp_e = tensor.extract %expected[%i, %j] : tensor<10x10xf64>
                %neq = arith.cmpf une, %cmp_c, %cmp_e : f64
                %new_f = arith.or %f_in, %neq : i1
                scf.yield %new_f : i1
            }
            scf.yield %flag_row : i1
        }

        %zero_i32 = arith.constant 0 : i32
        %one_i32 = arith.constant 1 : i32
        %status = scf.if %flag -> (i32) {
            scf.yield %one_i32 : i32
        } else {
            scf.yield %zero_i32 : i32
        }
        return %status : i32
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[8.545954, 1.204744, 5.094310, 4.674011, 9.256822, 7.304671, 1.694763, 1.036555, 1.664565, 4.464616, 1.269681, 1.468889, 1.008133, 4.215704, 3.424571, 8.108350, 5.134463, 1.133207, 5.365997, 6.756786, 9.737506, 6.121854, 5.017135, 6.967352, 3.158162, 2.297057, 4.873181, 0.326185, 7.418438, 6.534000, 9.662678, 0.499295, 4.623385, 8.974899, 7.016919, 1.568595, 7.299722, 0.281540, 1.966849, 0.355747]> : tensor<40xf64>
        %row_ptr = arith.constant dense<[0, 6, 6, 13, 15, 21, 23, 29, 34, 39, 40]> : tensor<11xindex>
        %col_ind = arith.constant dense<[0, 2, 4, 6, 8, 9, 0, 2, 3, 4, 6, 8, 9, 1, 8, 0, 1, 2, 4, 6, 8, 0, 9, 0, 1, 2, 4, 6, 8, 2, 4, 6, 8, 9, 0, 2, 4, 6, 8, 2]> : tensor<40xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<40xindex>), tensor<40xf64> -> tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }

}
