// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @sparse_dense_matmul(%sparse: tensor<10x10xf64, #CSR>,%dense: tensor<10x10xf64>,%init: tensor<10x10xf64>
    ) -> tensor<10x10xf64> {
        %res = linalg.matmul ins(%sparse, %dense: tensor<10x10xf64, #CSR>, tensor<10x10xf64>) 
            outs(%init: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %res : tensor<10x10xf64>
    }

    func.func @main() -> i32 {
        %c0 = arith.constant 0 : index
        %c1 = arith.constant 1 : index
        %rows = arith.constant 10 : index
        %cols = arith.constant 10 : index
        %zero_f64 = arith.constant 0.0 : f64

        %init = tensor.empty() : tensor<10x10xf64>
        %sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %dense = arith.constant dense<[[5.981501, 5.200813, 6.971523, 1.863266, 6.388573, 4.693680, 3.299620, 5.006098, 3.855723, 1.870441], [5.539851, 2.132641, 6.042396, 7.353708, 8.295815, 1.033660, 8.114593, 2.036827, 9.810901, 8.216396], [0.304757, 0.207007, 1.801614, 3.127181, 5.773904, 5.903224, 1.082857, 4.442674, 3.808584, 7.472069], [4.363757, 5.400555, 1.371373, 9.700768, 6.551280, 4.505242, 3.478110, 8.032498, 4.792181, 0.754330], [3.023757, 5.515663, 6.015696, 6.899073, 3.611472, 0.312445, 3.585506, 1.065897, 4.983602, 7.476593], [4.394719, 7.681404, 0.792373, 3.134912, 3.706713, 5.343776, 0.804959, 3.484150, 0.760579, 8.396204], [9.345394, 5.095870, 5.871362, 3.578853, 7.785924, 7.880113, 8.109625, 6.016581, 0.597489, 0.242115], [8.897222, 3.737125, 0.239364, 5.849574, 0.114140, 8.703569, 2.262800, 1.412644, 3.236675, 6.823230], [7.639311, 9.198660, 2.537327, 9.305260, 3.766832, 8.762914, 0.123156, 3.917307, 3.126670, 2.252136], [1.452952, 8.898179, 7.154310, 6.438623, 3.912582, 2.056369, 6.907124, 7.980689, 8.890229, 7.007812]]> : tensor<10x10xf64>

        %computed = call @sparse_dense_matmul(%sparse, %dense, %init) : (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %expected = arith.constant dense<[[154.833619, 184.996338, 126.806469, 161.949689, 162.385914, 158.465968, 100.211212, 116.815001, 95.043476, 199.770362], [2.751987, 2.814037, 1.829557, 2.862465, 3.279037, 1.838702, 2.381073, 1.559142, 2.816527, 4.631804], [192.009840, 216.965820, 120.945692, 197.014573, 188.398899, 234.272446, 87.540647, 152.216997, 104.954525, 203.038292], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [171.247490, 148.704306, 123.860648, 129.592506, 153.646920, 174.774836, 94.299348, 123.380336, 73.064906, 68.755025], [50.029124, 59.539668, 24.073702, 73.025415, 49.330798, 81.742721, 5.533807, 44.451867, 36.631614, 47.123407], [217.370707, 198.450933, 160.368707, 221.110754, 251.833112, 239.768569, 141.046571, 225.899547, 139.596040, 107.165321], [5.418351, 7.438079, 19.157992, 29.408222, 44.391394, 41.716835, 11.482074, 32.297199, 32.105210, 60.489883], [131.898192, 123.739373, 113.129188, 129.156626, 123.600263, 116.527439, 98.182955, 85.461675, 68.877723, 91.265625], [138.802985, 101.423103, 50.850359, 89.901841, 84.265529, 125.049280, 78.661783, 65.302804, 51.506069, 115.472512]]> : tensor<10x10xf64>

        // Validate each element
        %false = arith.constant "false" : i1
        %flag = scf.for %i = %c0 to %rows step %c1 iter_args(%f_iter = %false) -> (i1) {
            %flag_row = scf.for %j = %c0 to %cols step %c1 iter_args(%f_in = %f_iter) -> (i1) {
                %cmp_c = tensor.extract %computed[%i, %j] : tensor<10x10xf64>
                %cmp_e = tensor.extract %expected[%i, %j] : tensor<10x10xf64>
                %neq = arith.cmpf une, %cmp_c, %cmp_e : f64
                %new_f = arith.ori %f_in, %neq : i1
                scf.yield %new_f : i1
            }
            scf.yield %flag_row : i1
        }

        %zero_i32 = arith.constant 0 : i32
        %one_i32 = arith.constant 1 : i32
        %status = scf.if %flag -> (i32) {
            scf.yield %one_i32 : i32
        } else {
            scf.yield %zero_i32 : i32
        }
        return %status : i32
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[1.541752, 5.303624, 9.954671, 8.720238, 5.618472, 0.346067, 2.616196, 0.264371, 0.292945, 2.110979, 8.632231, 4.896916, 8.587892, 5.438011, 0.695328, 8.796210, 6.190655, 3.476035, 1.740450, 7.765614, 7.241926, 4.385451, 6.373955, 9.379857, 7.626256, 9.465177, 1.555214, 7.729731, 5.327343, 7.009337, 1.085472, 0.503719, 2.580108, 8.078770, 7.926810, 3.873582, 2.586604, 6.494314, 4.892267, 5.643643]> : tensor<40xf64>
        %row_ptr = arith.constant dense<[0, 7, 9, 16, 16, 21, 23, 29, 31, 36, 40]> : tensor<11xindex>
        %col_ind = arith.constant dense<[0, 2, 4, 5, 6, 7, 8, 1, 5, 0, 2, 4, 5, 6, 7, 8, 0, 2, 4, 6, 8, 2, 8, 0, 2, 3, 4, 6, 8, 2, 4, 0, 2, 4, 6, 8, 1, 5, 6, 7]> : tensor<40xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<40xindex>), tensor<40xf64> to tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }

}
