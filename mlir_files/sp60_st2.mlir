// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @matmul(%t : tensor<10x10xf64, #CSR>, %s : tensor<10x10xf64>, %out : tensor<10x10xf64>)
        -> tensor<10x10xf64> {
        %0 = linalg.matmul
            ins(%t, %s: tensor<10x10xf64, #CSR>, tensor<10x10xf64>)
            outs(%out: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %0 : tensor<10x10xf64>
    }

    func.func @main() -> i64 {
        %c = tensor.empty() : tensor<10x10xf64>
        %t_sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %s = arith.constant dense<[
            [4.088836840661211, 5.487685589298693, 3.5199804042128733, 0.7744342869932153, 0.8888227486258982, 4.596821768997989, 0.22115972500488357, 7.687997949713075, 3.878163501537919, 5.921343853729776], [7.121085233531307, 9.482238712649952, 3.1303716391783523, 3.0119095712730672, 0.7654639147657849, 5.367181062860674, 5.69821071823664, 3.7205356083811036, 1.3710008329978896, 1.1671619206826633], [6.521676482119422, 3.93756192988541, 1.789332506080915, 5.4122745376268195, 6.4634247421812585, 4.862487512765031, 6.459843205466186, 4.820826537356149, 9.665769995511786, 0.8307454382024893], [3.5975199053121854, 5.440948329971911, 2.633916062946069, 0.270901244347288, 1.608246830809904, 9.91773268373511, 6.11527509286847, 9.179124921090189, 3.935090737635657, 9.002772914537925], [9.274213902467551, 5.868197592044258, 5.797866397481867, 2.4383028225183923, 9.007168649066873, 5.636426214070269, 5.122649335361372, 0.3722356968929963, 6.511026084138955, 5.397558776216277], [0.3029076448085599, 3.4619071347084605, 7.612771426809106, 4.4516901476083355, 1.6502934178141526, 1.8272490148878984, 7.629853925457608, 0.42226518887919395, 5.642843228285451, 8.123056449264736], [4.5526455654340205, 3.8639356075322118, 4.212959986235161, 8.487704104372458, 8.312453490948347, 8.723602158011577, 4.379740122633863, 8.57061747887662, 8.047885203938064, 7.0298708430962655], [6.086912505346205, 9.936446552496033, 0.9775333699046929, 4.905974227879803, 8.427884338146903, 0.2354827951353622, 3.5673330457316546, 1.1695870765471417, 9.951654270535705, 0.8373385920153731], [3.3911976349624062, 4.691222426839373, 7.689076989558002, 9.364413718946466, 1.0896034679805644, 8.475260091471682, 9.109932426964086, 1.31893653014309, 2.45494507938808, 7.94129117523434], [2.1346221200326188, 4.768564798116882, 0.5497048933583326, 8.902523082518194, 9.966956492049485, 1.2905368969575581, 9.031247381822867, 6.815536736199739, 7.3168520015873195, 1.8383920441323587]
        ]> : tensor<10x10xf64>
        %result_matrix = call @matmul(%t_sparse, %s, %c) :
            (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %c1 = arith.constant 1 : index

        %element_f64 = tensor.extract %result_matrix[%c1, %c1] : tensor<10x10xf64>
        %element_i64 = arith.fptosi %element_f64 : f64 to i64
        return %element_i64 : i64
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[2.238299, 5.183510, 3.173591, 7.055494, 4.541226, 0.864333, 9.543719, 6.311548, 4.638323, 7.271089, 3.945946, 0.492775, 0.706328, 4.188083, 9.877969, 8.337521, 0.470707, 1.481532, 0.237429, 9.888022, 8.427610, 4.214131, 1.811966, 7.063951, 7.850428, 3.989538, 7.339524, 0.048016, 8.371831, 2.613724, 6.408974, 9.896031, 4.946704, 0.885339, 3.187268, 4.605633, 1.688169, 9.385411, 9.248404, 3.452202]> : tensor<40xf64>
        %row_ptr = arith.constant dense<[0, 5, 7, 14, 17, 23, 27, 32, 33, 39, 40]> : tensor<11xindex>
        %col_ind = arith.constant dense<[0, 2, 4, 6, 8, 5, 9, 0, 2, 3, 4, 6, 8, 9, 0, 8, 9, 0, 2, 4, 6, 8, 9, 0, 7, 8, 9, 0, 2, 4, 6, 8, 2, 0, 1, 2, 4, 6, 8, 5]> : tensor<40xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<40xindex>), tensor<40xf64> to tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }
    
}
