// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @sparse_dense_matmul(%sparse: tensor<10x10xf64, #CSR>,%dense: tensor<10x10xf64>,%init: tensor<10x10xf64>
    ) -> tensor<10x10xf64> {
        %res = linalg.matmul ins(%sparse, %dense: tensor<10x10xf64, #CSR>, tensor<10x10xf64>) 
            outs(%init: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %res : tensor<10x10xf64>
    }

    func.func @main() -> i32 {
        %c0 = arith.constant 0 : index
        %c1 = arith.constant 1 : index
        %rows = arith.constant 10 : index
        %cols = arith.constant 10 : index
        %zero_f64 = arith.constant 0.0 : f64

        %init = tensor.empty() : tensor<10x10xf64>
        %sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %dense = arith.constant dense<[[0.585310, 0.384753, 2.415749, 3.238337, 4.515477, 9.396261, 1.569678, 5.066360, 3.296894, 2.347741], [4.481499, 2.351047, 7.949591, 8.829179, 7.750742, 3.295090, 6.752143, 1.240708, 4.626977, 2.398761], [4.346783, 1.556862, 9.890478, 1.266855, 5.413493, 3.585700, 0.919551, 3.751824, 7.180561, 0.097011], [6.049214, 2.669154, 2.587891, 0.534277, 3.618314, 4.986033, 7.640004, 8.101523, 5.374476, 5.214403], [3.676227, 9.199441, 0.288557, 5.496482, 5.804924, 6.971693, 3.101080, 4.421414, 1.881047, 4.499983], [6.812784, 4.883671, 2.303437, 1.691087, 6.761058, 6.464708, 6.894089, 6.870510, 9.279043, 0.772327], [9.213899, 7.919740, 4.097403, 2.141398, 2.048661, 0.982504, 6.097332, 7.181950, 8.754269, 5.848612], [7.850791, 6.613422, 8.871753, 1.392100, 1.481300, 9.653708, 0.121184, 7.561300, 3.483253, 0.782327], [2.861006, 5.864134, 7.987228, 4.868218, 9.204105, 8.932506, 7.448517, 5.724185, 8.656603, 5.067175], [2.423980, 4.702323, 9.771171, 6.799587, 1.884145, 0.107782, 8.998615, 9.931270, 2.078064, 0.888593]]> : tensor<10x10xf64>

        %computed = call @sparse_dense_matmul(%sparse, %dense, %init) : (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %expected = arith.constant dense<[[76.555267, 104.786567, 97.219388, 81.966468, 124.712188, 152.082502, 77.875664, 113.872095, 117.141739, 77.166279], [13.647687, 11.606505, 6.562242, 3.816578, 3.593668, 1.688524, 9.344885, 10.451472, 12.997431, 8.626085], [123.440677, 161.346242, 148.065116, 145.969421, 193.976950, 221.812030, 152.247940, 169.566079, 184.812902, 132.013121], [98.341246, 128.017070, 94.862303, 83.971683, 52.419366, 38.170548, 116.471891, 136.160067, 84.936685, 67.601775], [154.369948, 193.413441, 210.853492, 135.907834, 226.803663, 240.450358, 146.475586, 197.630779, 234.263371, 132.022899], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [112.960664, 133.863343, 158.991477, 95.730234, 128.911193, 123.327884, 134.073430, 156.173246, 162.815866, 91.526877], [68.155868, 90.407924, 56.927544, 58.477471, 58.251324, 87.587749, 36.955796, 63.176644, 40.107248, 38.228674], [194.288220, 190.855402, 242.180514, 147.485087, 207.767479, 239.733176, 158.457819, 211.220666, 240.646720, 129.538675], [63.839792, 69.330641, 159.443649, 57.341878, 133.668049, 115.766968, 79.210577, 86.352402, 143.196474, 49.463958]]> : tensor<10x10xf64>

        // Validate each element
        %false = arith.constant "false" : i1
        %flag = scf.for %i = %c0 to %rows step %c1 iter_args(%f_iter = %false) -> (i1) {
            %flag_row = scf.for %j = %c0 to %cols step %c1 iter_args(%f_in = %f_iter) -> (i1) {
                %cmp_c = tensor.extract %computed[%i, %j] : tensor<10x10xf64>
                %cmp_e = tensor.extract %expected[%i, %j] : tensor<10x10xf64>
                %neq = arith.cmpf une, %cmp_c, %cmp_e : f64
                %new_f = arith.ori %f_in, %neq : i1
                scf.yield %new_f : i1
            }
            scf.yield %flag_row : i1
        }

        %zero_i32 = arith.constant 0 : i32
        %one_i32 = arith.constant 1 : i32
        %status = scf.if %flag -> (i32) {
            scf.yield %one_i32 : i32
        } else {
            scf.yield %zero_i32 : i32
        }
        return %status : i32
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[6.456315, 3.639519, 5.561794, 2.677624, 4.137827, 0.082788, 1.440939, 9.424447, 3.392435, 0.899188, 6.001252, 5.852558, 7.978257, 4.357679, 7.209623, 6.556444, 6.150138, 9.950730, 8.613956, 5.394571, 9.138274, 2.752851, 3.954542, 2.300823, 6.319340, 6.792559, 3.317765, 2.180376, 5.900716, 0.565669, 4.009803, 6.961524, 4.502780, 6.440733, 3.895439, 8.084556, 4.367767, 6.618885, 8.367102, 9.601455]> : tensor<40xf64>
        %row_ptr = arith.constant dense<[0, 5, 7, 13, 16, 21, 21, 27, 31, 38, 40]> : tensor<11xindex>
        %col_ind = arith.constant dense<[0, 2, 4, 6, 8, 1, 6, 0, 1, 2, 4, 6, 8, 4, 6, 9, 0, 2, 4, 6, 8, 0, 2, 4, 6, 8, 9, 1, 4, 6, 7, 0, 1, 2, 4, 6, 7, 8, 2, 8]> : tensor<40xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<40xindex>), tensor<40xf64> -> tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }

}
