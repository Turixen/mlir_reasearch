// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @sparse_dense_matmul(%sparse: tensor<10x10xf64, #CSR>,%dense: tensor<10x10xf64>,%init: tensor<10x10xf64>
    ) -> tensor<10x10xf64> {
        %res = linalg.matmul ins(%sparse, %dense: tensor<10x10xf64, #CSR>, tensor<10x10xf64>) 
            outs(%init: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %res : tensor<10x10xf64>
    }

    func.func @main() -> i32 {
        %c0 = arith.constant 0 : index
        %c1 = arith.constant 1 : index
        %rows = arith.constant 10 : index
        %cols = arith.constant 10 : index
        %zero_f64 = arith.constant 0.0 : f64

        %init = tensor.empty() : tensor<10x10xf64>
        %sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %dense = arith.constant dense<[[6.447620, 5.491683, 2.222100, 9.596238, 2.388141, 8.503600, 1.639944, 4.673633, 1.082622, 0.024535], [9.225740, 7.965561, 0.633493, 8.400314, 4.954016, 7.319441, 4.588722, 0.992865, 5.929659, 1.181929], [9.269324, 5.123939, 6.711114, 9.224630, 4.663849, 2.469607, 9.214770, 4.024855, 0.277299, 7.670436], [5.103370, 3.388408, 4.257674, 4.789367, 3.953196, 9.851920, 3.334544, 1.252199, 8.420711, 8.973166], [3.159000, 3.471547, 8.012914, 8.993405, 8.369331, 3.360833, 6.105483, 5.802541, 8.404708, 3.779698], [1.019735, 3.482020, 2.077794, 8.805877, 1.384339, 9.232877, 8.084154, 0.022062, 5.811137, 1.158045], [4.126181, 1.615494, 4.613847, 9.974973, 4.850174, 6.749479, 7.098585, 3.368983, 3.624758, 5.915950], [2.107758, 1.897558, 0.492490, 5.862262, 3.710864, 7.227695, 0.004940, 3.154305, 2.100474, 7.152223], [0.682406, 0.433014, 5.390565, 8.091158, 5.900194, 6.219473, 1.743153, 6.956650, 4.338782, 0.744731], [2.686455, 2.703381, 9.924361, 9.097699, 2.802108, 5.963210, 9.689306, 6.940762, 0.493532, 3.694906]]> : tensor<10x10xf64>

        %computed = call @sparse_dense_matmul(%sparse, %dense, %init) : (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %expected = arith.constant dense<[[171.035530, 109.154614, 231.710402, 342.858019, 221.434856, 176.813852, 226.398009, 189.689206, 153.393765, 167.906796], [6.053216, 20.669512, 12.333931, 52.272299, 8.217532, 54.806999, 47.988100, 0.130961, 34.495316, 6.874234], [219.660096, 160.076689, 153.659771, 294.769537, 163.068964, 234.077132, 165.366669, 130.381731, 148.849825, 148.948961], [9.383225, 7.921675, 51.399365, 73.080565, 55.720699, 51.410915, 21.334629, 60.245134, 43.992983, 10.685746], [126.496832, 95.670193, 152.450829, 260.131753, 154.641641, 181.320678, 127.106004, 144.997778, 130.454362, 96.373085], [1.461044, 4.988929, 2.976998, 12.616785, 1.983437, 13.228576, 11.582722, 0.031610, 8.326016, 1.659210], [142.258411, 101.970085, 147.805271, 299.133385, 162.034911, 243.220392, 123.476767, 161.330932, 130.633694, 124.966724], [57.886968, 33.751540, 46.177060, 92.980961, 52.430789, 89.712110, 64.005671, 27.537821, 62.530447, 72.772578], [135.664859, 101.732819, 166.064007, 327.964476, 199.530511, 236.762994, 148.002134, 177.629905, 152.062076, 163.335325], [3.884351, 13.263635, 7.914689, 33.543157, 5.273194, 35.169675, 30.793985, 0.084038, 22.135660, 4.411199]]> : tensor<10x10xf64>

        // Validate each element
        %false = arith.constant false : i1
        %flag = scf.for %i = %c0 to %rows step %c1 iter_args(%f_iter = %false) -> (i1) {
            %flag_row = scf.for %j = %c0 to %cols step %c1 iter_args(%f_in = %f_iter) -> (i1) {
                %cmp_c = tensor.extract %computed[%i, %j] : tensor<10x10xf64>
                %cmp_e = tensor.extract %expected[%i, %j] : tensor<10x10xf64>
                %neq = arith.cmpf une, %cmp_c, %cmp_e : f64
                %new_f = arith.or %f_in, %neq : i1
                scf.yield %new_f : i1
            }
            scf.yield %flag_row : i1
        }

        %zero_i32 = arith.constant 0 : i32
        %one_i32 = arith.constant 1 : i32
        %status = scf.if %flag -> (i32) {
            scf.yield %one_i32 : i32
        } else {
            scf.yield %zero_i32 : i32
        }
        return %status : i32
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[1.339943, 9.894059, 9.854499, 8.187373, 8.458151, 5.936070, 7.934036, 4.979526, 7.230565, 6.804813, 3.584303, 1.727044, 3.466835, 1.341236, 7.541354, 7.408504, 2.421188, 2.288341, 7.330946, 4.223966, 5.892804, 1.432769, 9.041445, 1.880283, 3.262880, 3.210495, 6.590427, 3.344620, 8.055440, 1.359774, 3.716932, 6.391665, 5.401145, 1.832648, 8.414613, 0.188324, 8.350162, 8.869091, 5.760406, 3.809178]> : tensor<40xf64>
        %row_ptr = arith.constant dense<[0, 5, 6, 13, 15, 21, 22, 29, 32, 39, 40]> : tensor<11xindex>
        %col_ind = arith.constant dense<[0, 2, 4, 6, 8, 5, 0, 1, 2, 3, 4, 6, 8, 4, 8, 0, 2, 3, 4, 6, 8, 5, 0, 2, 3, 4, 6, 7, 8, 1, 3, 6, 0, 2, 4, 5, 6, 7, 8, 5]> : tensor<40xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<40xindex>), tensor<40xf64> -> tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }

}
