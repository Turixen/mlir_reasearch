// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @matmul(%t : tensor<10x10xf64, #CSR>, %s : tensor<10x10xf64>, %out : tensor<10x10xf64>)
        -> tensor<10x10xf64> {
        %0 = linalg.matmul
            ins(%t, %s: tensor<10x10xf64, #CSR>, tensor<10x10xf64>)
            outs(%out: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %0 : tensor<10x10xf64>
    }

    func.func @main() -> i64 {
        %c = tensor.empty() : tensor<10x10xf64>
        %t_sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %s = arith.constant dense<[
            [9.563777422259534, 4.307000335317646, 2.688583227697671, 3.57418164311896, 5.128840476666053, 8.451188810461577, 3.624326093598753, 9.387875954194579, 0.9133784172026738, 5.571970854154975], [8.563972548085783, 5.386526352833689, 3.4977553862843367, 2.715748629410503, 4.122333376725093, 7.9709262491409, 1.004054137572702, 7.383216005475157, 0.5324421843756244, 8.588793811970351], [7.212788057171101, 1.661507054231005, 7.068931102751249, 7.525042418189859, 4.816084619426623, 1.8932878809981135, 0.9739343983991255, 9.203221645549519, 8.146780002829457, 4.375089193273941], [2.188165708633708, 5.2309296272205295, 6.317779839348993, 1.638164080977088, 2.7663723802501803, 0.40124365454911826, 6.538730923095707, 9.105653819837162, 1.8488831886234813, 2.1437373331649754], [9.359674467536806, 7.3205059397757255, 7.879340023474039, 5.736797413655136, 6.02915621150065, 3.257162519804343, 0.4602937542175811, 1.600280710857892, 6.997737628338859, 5.556718554418108], [5.035032277236886, 4.702859148463028, 4.893958230482141, 1.0340604050336422, 2.6701652110475504, 8.040454020841494, 4.948613253226457, 3.30217533293637, 2.4286916714078446, 0.15825703857012985], [8.68669922342947, 6.444562855509972, 2.5351119252800034, 6.515606653638986, 8.306180697539197, 1.5520479492117967, 6.4677792376634, 1.7864432923728357, 9.108794382336384, 0.3735176600801571], [2.6996783700741336, 5.8597887602809715, 8.898059458080095, 8.174009046633588, 0.04000666976108125, 0.5810716514967185, 9.800175309505725, 1.6399740991529188, 3.0062482655253566, 5.2753049412600355], [5.924509791330612, 9.079303047907064, 9.425746631163936, 2.048026094664368, 9.965257598709558, 3.5208888497106883, 5.69201832017205, 7.1029797554077, 0.7444041265883905, 6.457136712197232], [0.9740145406526557, 2.994367552384678, 5.858172402697182, 4.910888374019305, 2.5949283602734194, 2.355034577090075, 6.369637918764929, 7.716930449912775, 4.859695655122806, 5.957306287632664]
        ]> : tensor<10x10xf64>
        %result_matrix = call @matmul(%t_sparse, %s, %c) :
            (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %c1 = arith.constant 1 : index
        %element_f64 = tensor.extract %result_matrix[%c1, %c1] : tensor<10x10xf64>
        %element_i64 = arith.fptosi %element_f64 : f64 to i64
        return %element_i64 : i64
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[0.889321, 1.844256, 3.625985, 2.404637, 6.401786, 4.516695, 7.093716, 2.763310, 3.009358, 6.157771, 3.783931, 2.215950, 1.382351, 1.866922, 5.643840, 7.557617, 4.158654, 2.498122, 7.630037, 1.479002, 8.663505, 9.573819, 7.082361, 9.956481, 2.562777, 6.791440, 6.796178, 0.072606, 3.244912, 8.783599, 5.763338, 7.237818, 2.536360, 8.910024, 6.899955, 7.719345, 2.196300, 6.377684, 0.834494, 6.580071]> : tensor<40xf64>
        %row_ptr = arith.constant dense<[0, 7, 9, 14, 15, 21, 23, 28, 32, 38, 40]> : tensor<11xindex>
        %col_ind = arith.constant dense<[0, 2, 3, 4, 5, 6, 8, 3, 9, 0, 2, 4, 6, 8, 4, 0, 2, 3, 4, 6, 8, 2, 8, 0, 2, 4, 6, 8, 2, 4, 7, 9, 0, 2, 4, 5, 6, 8, 3, 9]> : tensor<40xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<40xindex>), tensor<40xf64> to tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }
    
}
