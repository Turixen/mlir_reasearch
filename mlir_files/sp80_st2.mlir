// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @matmul(%t : tensor<10x10xf64, #CSR>, %s : tensor<10x10xf64>, %out : tensor<10x10xf64>)
        -> tensor<10x10xf64> {
        %0 = linalg.matmul
            ins(%t, %s: tensor<10x10xf64, #CSR>, tensor<10x10xf64>)
            outs(%out: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %0 : tensor<10x10xf64>
    }

    func.func @main() -> i64 {
        %c = tensor.empty() : tensor<10x10xf64>
        %t_sparse = call @test_assemble() : () -> tensor<10x10xf64, #CSR>
        %s = arith.constant dense<[
            [0.38545501802972004, 9.273113774735643, 6.727178844357261, 4.537534146820521, 7.23315113825022, 9.604093282164424, 7.497903975016731, 6.843112521364673, 4.037101407136323, 4.158404311596265], [9.581162484738043, 1.6791214176713343, 6.583903778710786, 1.5525313474250357, 4.49396301835748, 8.373040481882326, 7.844668448506741, 3.057791535013318, 9.886925640677568, 8.596838556686702], [8.270920089892975, 6.199204988442013, 5.714253651828887, 3.7376288545073653, 6.94299677766609, 0.5996409568936845, 9.870713355501527, 7.647780773974871, 6.312907387851142, 9.201932121903232], [7.924348517135819, 7.667578586227142, 9.982343517107086, 1.1690075465051375, 1.4767285592751023, 3.7292366258696443, 1.7686393217490604, 1.1589698196486664, 3.5386013894211867, 4.909802237688404], [1.9445940939917328, 3.7115653829459894, 0.5703396824796425, 9.637262293258743, 3.328343370106308, 0.054345706707752406, 4.577446588288274, 1.4810737316067757, 6.114270142887852, 5.962179346419195], [1.1223201511481185, 5.034471982013709, 2.5305936443265367, 6.819673227128065, 8.3017776539139, 3.1692415911868843, 9.175092005341787, 6.323779368590677, 6.24865820935263, 8.7090018441972], [2.89758324231146, 7.757510913524891, 4.4349472406416215, 5.5323495272222525, 2.417163754505145, 1.6185489624740212, 9.02001636474223, 5.38120017530737, 4.753029515776808, 3.7694066404851165], [7.858566528316581, 0.5183841069879791, 2.7433274897218176, 8.957630713390415, 2.774091773728622, 2.027504490221835, 3.1354478973323543, 3.4924401766806046, 7.8120307697402644, 0.6181511566046827], [9.142208123233518, 7.499354424562842, 9.244810715249356, 7.345585510430615, 8.870327656085767, 8.579665434146253, 0.8235367969362384, 4.091198873679155, 1.6695780528148962, 2.541591106133565], [8.044209020833758, 4.426935544013009, 8.940351925214156, 4.14315172511499, 1.6342590307745763, 1.8788097037018314, 2.7193610595644735, 8.406860186983335, 5.866840277669954, 4.404250998869209]
        ]> : tensor<10x10xf64>
        %result_matrix = call @matmul(%t_sparse, %s, %c) :
            (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %c1 = arith.constant 1 : index
        %element_f64 = tensor.extract %result_matrix[%c1, %c1] : tensor<10x10xf64>
        %element_i64 = arith.fptosi %element_f64 : f64 to i64
        return %element_i64 : i64
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[7.166544, 5.611577, 6.392446, 5.774606, 4.408581, 6.653360, 7.605261, 0.303257, 5.842671, 5.034932, 0.481108, 3.075584, 2.000759, 3.265511, 7.857397, 6.204227, 2.342269, 2.956403, 0.497887]> : tensor<19xf64>
        %row_ptr = arith.constant dense<[0, 4, 4, 8, 8, 11, 11, 15, 15, 19, 19]> : tensor<11xindex>
        %col_ind = arith.constant dense<[2, 4, 6, 8, 0, 2, 6, 8, 0, 2, 8, 0, 2, 6, 8, 0, 2, 6, 8]> : tensor<19xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<19xindex>), tensor<19xf64> to tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }
    
}
