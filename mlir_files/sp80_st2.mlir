// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @matmul(%t : tensor<10x10xf64, #CSR>, %s : tensor<10x10xf64>, %out : tensor<10x10xf64>)
        -> tensor<10x10xf64> {
        %0 = linalg.matmul
            ins(%t, %s: tensor<10x10xf64, #CSR>, tensor<10x10xf64>)
            outs(%out: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %0 : tensor<10x10xf64>
    }

    func.func @main() -> i64 {
        %c = tensor.empty() : tensor<10x10xf64>
        %t_sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %s = arith.constant dense<[
            [4.5167247022802925, 3.8363047606175393, 9.314653230221275, 7.627306317872976, 1.3183185371653627, 9.47616731623098, 4.901168010258882, 8.620870245129167, 3.773334022221034, 1.6702850536128189], [9.114533570124369, 0.2095505061038183, 1.1542957852655045, 0.46016269672961574, 4.776973786619631, 8.870102339458532, 8.9563011655086, 2.0573286096149603, 2.345037880875828, 9.617792497396616], [5.015263949743912, 8.940468942615194, 8.862724890365758, 2.0963566610579107, 5.186963402997725, 7.444845871351293, 1.6285521212058773, 9.51387756038063, 4.723717552768645, 7.200120619773378], [8.168793734104622, 9.642519612779461, 6.771232437794682, 3.49292724425427, 1.7268449960770393, 3.060722318909267, 6.406961699784537, 1.7273449914969996, 5.048066355518024, 9.756705574244599], [5.220107735365112, 4.709007468957106, 4.986932369345936, 9.4271977005108, 3.901820143142003, 9.624292932258832, 9.465132160584824, 6.467408429218007, 7.573512625179159, 1.2271163101192095], [5.552893335035845, 9.213592583412328, 9.283372006955778, 9.85761540040144, 5.845639160096017, 8.888329896898044, 9.284083454356203, 0.45820592008123495, 0.9477293811835474, 7.050418382676773], [6.446201483810075, 3.663842735590376, 8.616274782965178, 2.8868857442002103, 7.468240101991032, 0.5311037895680415, 9.216836035394246, 1.43550530696963, 2.660246499461957, 0.2854470822130972], [4.816016288031682, 7.746161410360384, 7.848855231840851, 8.663553237179082, 5.6699507073413935, 3.3999881477930516, 1.6514044025699792, 2.264214628926249, 1.9588807200901737, 3.4987789717774396], [8.284979160845277, 2.592404522561834, 8.962430911627235, 3.246752648714514, 4.1061214874317695, 9.945524952588798, 5.83059812188465, 4.514955538462323, 3.2532770655697627, 7.874360661765012], [3.5585991149599527, 0.9997094813119867, 9.633572250798156, 5.79080126075361, 7.571437474412655, 1.3084848862250076, 8.559100093602709, 0.3187827159243295, 7.959408725845119, 4.1142591747785175]
        ]> : tensor<10x10xf64>
        %result_matrix = call @matmul(%t_sparse, %s, %c) :
            (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %c1 = arith.constant 1 : index
        %element_f64 = tensor.extract %result_matrix[%c1, %c1] : tensor<10x10xf64>
        %element_i64 = arith.fptosi %element_f64 : f64 to i64
        return %element_i64 : i64
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[2.599373, 9.883364, 0.758727, 8.320950, 4.224442, 9.065475, 8.030455, 0.580341, 7.097819, 7.097928, 4.243745, 2.182151, 7.105358, 4.026832, 2.133534, 6.114172, 6.395621, 9.853235, 2.008285]> : tensor<19xf64>
        %row_ptr = arith.constant dense<[0, 4, 4, 8, 8, 11, 11, 15, 15, 19, 19]> : tensor<11xindex>
        %col_ind = arith.constant dense<[2, 4, 6, 8, 0, 2, 6, 8, 0, 4, 6, 0, 2, 4, 8, 0, 2, 4, 6]> : tensor<19xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<19xindex>), tensor<19xf64> to tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }
    
}
