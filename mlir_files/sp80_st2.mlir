// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @matmul(%t : tensor<10x10xf64, #CSR>, %s : tensor<10x10xf64>, %out : tensor<10x10xf64>)
        -> tensor<10x10xf64> {
        %0 = linalg.matmul
            ins(%t, %s: tensor<10x10xf64, #CSR>, tensor<10x10xf64>)
            outs(%out: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %0 : tensor<10x10xf64>
    }

    func.func @main() -> i64 {
        %c = tensor.empty() : tensor<10x10xf64>
        %t_sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %s = arith.constant dense<[
            [8.707663053278035, 6.761478899625992, 5.743915828618253, 7.1128297260215305, 2.462115792915421, 5.476617740797249, 3.2467851179318172, 3.7861548917299936, 3.7342023001303826, 7.686251291228167], [0.21231138069615962, 6.492130642199813, 3.3813857491235098, 4.898598585778659, 3.71092213768999, 9.740637494028773, 3.6780039405790186, 9.33061535208345, 6.0106889129414744, 9.708752316241743], [1.0253216743121063, 8.905523736608057, 1.8497494003144621, 6.433607073298529, 5.064166549075813, 1.0444342563856923, 7.011921671831802, 4.122656011406091, 2.0588791582704067, 4.967969511748467], [6.074650063067485, 5.24923800119642, 5.709520233254053, 4.840001140961587, 5.581546463237753, 7.176197939424961, 8.446024890860484, 8.639140389369572, 0.9675960139362838, 8.634485251110025], [8.880865505079436, 1.8522048695465676, 0.9964168355935543, 7.198608969268481, 4.078062964672736, 2.539995542588469, 9.830033446210626, 8.811179927790473, 6.201339492279516, 8.450696013083853], [7.435179018779365, 0.2580974936852609, 3.9431252894740543, 4.75510272469238, 9.035644348807791, 6.220438420744955, 4.46031943956585, 4.553025241888901, 7.501589166887797, 3.2444922419692848], [8.16304762236462, 5.193828879455216, 0.4183728705837386, 1.1160518818439025, 2.2291424673146243, 4.234925656340075, 1.6138528969519428, 6.124314538374394, 3.357976758374115, 4.803884834602707], [5.5778732319452775, 9.19440384123895, 9.617122107918432, 2.9247584402865012, 0.9825349454256649, 1.500679435879121, 1.7806919445254132, 6.691095038048015, 6.153090144497182, 6.566989943541442], [9.057917513455108, 0.28000587918741937, 8.92321222454931, 2.153473223667699, 0.0542651135931993, 7.014324532865556, 2.9901884146466196, 7.229637281639008, 5.911815909305935, 6.207821565764585], [5.650274675796848, 4.154740989577221, 5.1130585874488075, 7.057596155475504, 4.039675748156638, 3.9149098359169052, 1.2826489896514726, 0.004779273529121886, 7.678137162304052, 0.25136660844706227]
        ]> : tensor<10x10xf64>
        %result_matrix = call @matmul(%t_sparse, %s, %c) :
            (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %c1 = arith.constant 1 : index

        %element_f64 = tensor.extract %result_matrix[%c1, %c1] : tensor<10x10xf64>
        %element_i64 = arith.fptosi %element_f64 : f64 to i64
        return %element_i64 : i64
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[7.438140, 1.583261, 3.942132, 5.127249, 2.919584, 1.180211, 5.098862, 2.071007, 2.514530, 2.339877, 1.077997, 2.943459, 9.804851, 4.131834, 2.700554, 6.155295, 9.203291, 7.024833, 8.277513]> : tensor<19xf64>
        %row_ptr = arith.constant dense<[0, 4, 4, 7, 7, 11, 11, 15, 15, 19, 19]> : tensor<11xindex>
        %col_ind = arith.constant dense<[0, 2, 4, 8, 2, 4, 6, 0, 2, 4, 6, 0, 2, 4, 6, 2, 4, 6, 8]> : tensor<19xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<19xindex>), tensor<19xf64> to tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }
    
}
