// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @sparse_dense_matmul(%sparse: tensor<10x10xf64, #CSR>,%dense: tensor<10x10xf64>,%init: tensor<10x10xf64>
    ) -> tensor<10x10xf64> {
        %res = linalg.matmul ins(%sparse, %dense: tensor<10x10xf64, #CSR>, tensor<10x10xf64>) 
            outs(%init: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %res : tensor<10x10xf64>
    }

    func.func @main() -> i32 {
        %c0 = arith.constant 0 : index
        %c1 = arith.constant 1 : index
        %rows = arith.constant 10 : index
        %cols = arith.constant 10 : index
        %zero_f64 = arith.constant 0.0 : f64

        %init = tensor.empty() : tensor<10x10xf64>
        %sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %dense = arith.constant dense<[[7.997946, 2.409284, 1.674837, 7.179865, 0.467197, 0.720173, 4.267935, 4.509028, 1.473424, 9.860144], [8.791422, 0.126606, 7.894667, 9.829902, 6.351770, 9.076496, 2.574684, 6.909722, 9.690489, 6.033002], [5.743259, 5.734437, 3.885459, 6.243195, 7.565365, 6.163083, 4.676979, 2.821844, 8.986681, 4.570750], [2.292407, 5.810829, 1.963185, 7.908965, 1.398350, 2.308879, 4.018431, 7.408225, 0.650250, 8.528549], [2.866507, 4.986156, 6.505343, 2.229952, 4.608160, 8.271141, 7.197940, 2.556788, 4.913504, 7.297836], [4.891414, 8.669468, 6.539989, 6.503514, 5.752081, 4.460830, 2.874528, 2.982465, 5.375703, 9.709927], [7.420323, 5.140659, 7.354705, 3.620211, 5.617561, 4.863822, 3.343420, 4.907907, 3.472182, 2.922693], [7.625343, 7.786391, 2.538086, 5.737824, 8.827131, 4.690403, 9.178360, 4.495390, 9.997132, 3.577978], [9.271624, 9.040675, 6.779256, 6.145834, 4.945732, 1.122031, 2.550963, 5.786982, 8.098835, 5.644443], [6.425440, 9.719146, 7.598226, 4.530610, 5.730482, 1.688907, 3.849931, 2.868280, 7.620808, 8.225529]]> : tensor<10x10xf64>

        %computed = call @sparse_dense_matmul(%sparse, %dense, %init) : (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %expected = arith.constant dense<[[165.309241, 172.170887, 120.267575, 179.157853, 83.593341, 55.285716, 114.393514, 141.574873, 96.070074, 237.726407], [73.148453, 70.139635, 64.172477, 50.421113, 46.750761, 24.585840, 39.358661, 39.541106, 52.382170, 73.388708], [129.957077, 112.480960, 123.346260, 151.902646, 137.731947, 131.445851, 72.612915, 82.253849, 163.888699, 143.180402], [72.360008, 92.104748, 61.296097, 82.807985, 67.525814, 45.987152, 57.003434, 55.006290, 80.948925, 95.505756], [33.797034, 39.323718, 15.518870, 63.642125, 9.170991, 15.009706, 33.944008, 53.863001, 7.523567, 74.122156], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [185.981294, 172.785652, 161.794316, 134.107855, 119.251204, 72.586438, 99.635911, 106.986419, 123.874188, 186.001018], [67.938325, 81.505515, 38.829986, 60.441257, 78.942048, 46.583473, 71.827140, 40.378114, 85.645733, 56.358313], [73.589922, 50.981700, 72.939170, 35.902893, 55.711305, 48.236213, 33.157859, 48.673423, 34.434834, 28.985364], [188.300817, 175.771483, 132.026835, 182.677675, 92.102233, 60.315958, 113.173941, 151.290888, 106.233918, 227.881942]]> : tensor<10x10xf64>

        // Validate each element
        %false = arith.constant "false" : i1
        %flag = scf.for %i = %c0 to %rows step %c1 iter_args(%f_iter = %false) -> (i1) {
            %flag_row = scf.for %j = %c0 to %cols step %c1 iter_args(%f_in = %f_iter) -> (i1) {
                %cmp_c = tensor.extract %computed[%i, %j] : tensor<10x10xf64>
                %cmp_e = tensor.extract %expected[%i, %j] : tensor<10x10xf64>
                %neq = arith.cmpf une, %cmp_c, %cmp_e : f64
                %new_f = arith.or %f_in, %neq : i1
                scf.yield %new_f : i1
            }
            scf.yield %flag_row : i1
        }

        %zero_i32 = arith.constant 0 : i32
        %one_i32 = arith.constant 1 : i32
        %status = scf.if %flag -> (i32) {
            scf.yield %one_i32 : i32
        } else {
            scf.yield %zero_i32 : i32
        }
        return %status : i32
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[8.298224, 8.665255, 2.923583, 8.930481, 2.331363, 2.945372, 5.080855, 5.377134, 7.817724, 7.724804, 0.983920, 4.817562, 3.174448, 0.168972, 4.402999, 2.594349, 5.691648, 5.976532, 0.449791, 1.702935, 8.851211, 9.826814, 3.301541, 6.791711, 9.917348, 8.415744, 7.296162, 4.819060, 3.069834, 6.232266]> : tensor<30xf64>
        %row_ptr = arith.constant dense<[0, 4, 7, 10, 15, 17, 17, 22, 24, 25, 30]> : tensor<11xindex>
        %col_ind = arith.constant dense<[0, 3, 6, 9, 0, 6, 9, 1, 2, 5, 0, 2, 3, 6, 9, 0, 3, 0, 3, 5, 6, 9, 5, 7, 6, 0, 3, 6, 8, 9]> : tensor<30xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<30xindex>), tensor<30xf64> -> tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }

}
