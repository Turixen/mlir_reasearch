// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @sparse_dense_matmul(%sparse: tensor<10x10xf64, #CSR>,%dense: tensor<10x10xf64>,%init: tensor<10x10xf64>
    ) -> tensor<10x10xf64> {
        %res = linalg.matmul ins(%sparse, %dense: tensor<10x10xf64, #CSR>, tensor<10x10xf64>) 
            outs(%init: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %res : tensor<10x10xf64>
    }

    func.func @main() -> i32 {
        %c0 = arith.constant 0 : index
        %c1 = arith.constant 1 : index
        %rows = arith.constant 10 : index
        %cols = arith.constant 10 : index
        %zero_f64 = arith.constant 0.0 : f64

        %init = tensor.empty() : tensor<10x10xf64>
        %sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %dense = arith.constant dense<[[6.275817, 6.992628, 9.321196, 6.579383, 0.540048, 2.617570, 5.348298, 3.000590, 9.815750, 3.094648], [2.621503, 5.209315, 1.511559, 6.675286, 8.661527, 0.789975, 4.281850, 0.014016, 9.699670, 5.384407], [6.206384, 2.316655, 4.425046, 3.036848, 8.766453, 4.732415, 9.619345, 0.561765, 9.153311, 9.059569], [9.400893, 4.180381, 0.389794, 0.795784, 3.852107, 2.083838, 6.152194, 7.584166, 6.223755, 8.662190], [2.447513, 7.153411, 0.155894, 0.756765, 8.293331, 4.352386, 8.620623, 5.770246, 4.897599, 1.223625], [6.204710, 5.414165, 9.634426, 5.858562, 7.533823, 7.113624, 8.423347, 2.132622, 4.626727, 6.013852], [1.654237, 1.608930, 1.020244, 6.178934, 5.811451, 2.243364, 1.835765, 5.269301, 2.125453, 0.489827], [9.014733, 9.497153, 6.445490, 1.983149, 3.417579, 8.132405, 4.493031, 6.353561, 3.757795, 8.227522], [0.354719, 4.135786, 7.064555, 4.188253, 8.916485, 7.565687, 0.422912, 6.808626, 6.496768, 0.192708], [9.235238, 5.527274, 8.731972, 8.532127, 7.851540, 8.004059, 1.719744, 9.937272, 5.508371, 3.864313]]> : tensor<10x10xf64>

        %computed = call @sparse_dense_matmul(%sparse, %dense, %init) : (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %expected = arith.constant dense<[[127.572201, 153.222100, 127.114523, 147.194819, 200.696949, 136.616518, 132.809200, 201.473154, 188.428779, 79.295387], [23.333215, 14.550369, 26.459469, 16.738390, 30.638556, 22.283359, 33.914541, 5.073743, 25.883206, 28.322550], [31.436531, 64.833769, 23.262085, 20.774584, 57.133457, 35.546206, 70.795419, 46.006676, 56.370805, 15.614287], [98.195007, 84.360747, 103.507069, 83.166849, 35.121342, 47.539384, 65.584597, 69.403255, 113.893138, 55.469571], [21.711419, 16.889389, 14.069224, 58.202263, 61.457557, 25.256500, 27.198655, 47.329222, 29.235918, 14.636251], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [176.756317, 123.395009, 143.486149, 148.034742, 114.955953, 105.361715, 91.877909, 166.472914, 155.870511, 101.170977], [80.297384, 84.594470, 57.412237, 17.664606, 30.441577, 72.438185, 40.021005, 56.593400, 33.471997, 73.285421], [35.635559, 33.117449, 40.941144, 59.489779, 63.290399, 41.790357, 41.190215, 44.379230, 30.564019, 27.081607], [224.965942, 203.413610, 237.968215, 166.959495, 130.591620, 169.101396, 162.850095, 154.332744, 193.606483, 160.751352]]> : tensor<10x10xf64>

        // Validate each element
        %false = arith.constant false : i1
        %flag = scf.for %i = %c0 to %rows step %c1 iter_args(%f_iter = %false) -> (i1) {
            %flag_row = scf.for %j = %c0 to %cols step %c1 iter_args(%f_in = %f_iter) -> (i1) {
                %cmp_c = tensor.extract %computed[%i, %j] : tensor<10x10xf64>
                %cmp_e = tensor.extract %expected[%i, %j] : tensor<10x10xf64>
                %neq = arith.cmpf une, %cmp_c, %cmp_e : f64
                %new_f = arith.or %f_in, %neq : i1
                scf.yield %new_f : i1
            }
            scf.yield %flag_row : i1
        }

        %zero_i32 = arith.constant 0 : i32
        %one_i32 = arith.constant 1 : i32
        %status = scf.if %flag -> (i32) {
            scf.yield %one_i32 : i32
        } else {
            scf.yield %zero_i32 : i32
        }
        return %status : i32
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[5.564711, 5.045007, 5.636946, 9.829382, 7.137975, 1.367904, 1.874800, 1.885260, 2.382989, 6.733908, 8.768356, 2.199562, 0.634253, 2.321472, 1.136471, 8.860909, 6.933999, 5.258739, 4.473739, 8.272914, 8.907351, 3.175527, 6.428321, 0.587745, 9.936101, 2.163941, 6.611727, 2.082562, 6.633370, 4.114551]> : tensor<30xf64>
        %row_ptr = arith.constant dense<[0, 6, 8, 10, 14, 16, 16, 20, 21, 24, 30]> : tensor<11xindex>
        %col_ind = arith.constant dense<[0, 3, 4, 6, 8, 9, 2, 5, 0, 4, 0, 3, 6, 9, 2, 6, 0, 3, 6, 9, 7, 5, 6, 7, 0, 3, 5, 6, 7, 9]> : tensor<30xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<30xindex>), tensor<30xf64> -> tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }

}
