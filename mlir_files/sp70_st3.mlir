// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @matmul(%t : tensor<10x10xf64, #CSR>, %s : tensor<10x10xf64>, %out : tensor<10x10xf64>)
        -> tensor<10x10xf64> {
        %0 = linalg.matmul
            ins(%t, %s: tensor<10x10xf64, #CSR>, tensor<10x10xf64>)
            outs(%out: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %0 : tensor<10x10xf64>
    }

    func.func @main() -> i64 {
        %c = tensor.empty() : tensor<10x10xf64>
        %t_sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %s = arith.constant dense<[
            [8.526839639058544, 6.4611367269653694, 4.779413003802086, 2.582890069724165, 9.6733835014204, 0.3477130621678137, 9.464998719028044, 6.614909378791275, 4.629081376011305, 0.9761379663061975], [0.7388327384021798, 0.4490091169218746, 1.7017745837991116, 7.2983617570773305, 3.8171341763545175, 4.357845678695989, 2.1225259201388913, 0.3507537390225557, 2.9920697534402563, 1.580955299955108], [2.390592025961371, 4.225997036197367, 1.7046854294742508, 9.438605776858859, 3.992492046290297, 5.2652444709866035, 8.789205261294267, 4.246133394809666, 3.329704504028782, 9.887781090698807], [1.2644800658362276, 8.40888882216862, 1.2027161378652995, 5.650171990780363, 4.928546084318216, 8.077069240494414, 7.963373947013186, 9.273967707352865, 4.1016272795530995, 4.155196122437496], [1.341343321302757, 7.774115659193782, 3.8559775257238282, 2.213715066640216, 0.6395790361956177, 6.035231716797268, 3.7510757062853783, 1.404531910567891, 5.595518584508899, 2.811063595603085], [9.057525067909424, 6.839210167691535, 5.978129766113502, 1.7266784474837948, 9.132571575251767, 2.360927716835538, 9.11564566104033, 3.4468616659177123, 5.259681012851146, 8.434605012536192], [0.5416605059691149, 1.6151393966764327, 7.159331756726488, 3.58090579112658, 3.5232038128284957, 6.5961287417241365, 3.486064489516043, 2.9276408132601017, 5.440387162074494, 3.055285584415508], [9.184226895583453, 4.2941985117689825, 4.850747034091626, 9.608311762698465, 0.35779388428343495, 1.4463021549767552, 0.9216349875111596, 5.700075046608497, 3.4811164718719665, 2.752309817133065], [6.907355407954646, 8.868246909438165, 4.532891863501726, 8.268691153770654, 5.224577457264269, 5.182961265097536, 6.1641796936751785, 5.793465507764517, 0.7463715521518788, 9.269599370376056], [3.175492013251061, 9.666232814790245, 0.03542978398741514, 1.7482694293712864, 2.6520509727159034, 8.417734656778235, 0.1811752657356469, 1.328471537836008, 0.15211174091827706, 1.0481147306460814]
        ]> : tensor<10x10xf64>
        %result_matrix = call @matmul(%t_sparse, %s, %c) :
            (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %c1 = arith.constant 1 : index

        %element_f64 = tensor.extract %result_matrix[%c1, %c1] : tensor<10x10xf64>
        %element_i64 = arith.fptosi %element_f64 : f64 to i64
        return %element_i64 : i64
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[9.388579, 5.780196, 7.651943, 0.351661, 6.054780, 4.441670, 5.472360, 3.401297, 9.963079, 2.058015, 1.965911, 2.471294, 5.967919, 2.248577, 5.254156, 9.424158, 7.789825, 2.402090, 4.029956, 1.748730, 6.277572, 5.803643, 9.568962, 2.650650, 7.638938, 5.204937, 4.422551, 5.122099, 8.806114, 2.313439]> : tensor<30xf64>
        %row_ptr = arith.constant dense<[0, 4, 7, 9, 14, 16, 17, 21, 23, 24, 30]> : tensor<11xindex>
        %col_ind = arith.constant dense<[0, 3, 6, 9, 1, 2, 9, 0, 8, 0, 1, 3, 6, 9, 1, 7, 6, 0, 3, 6, 9, 1, 2, 5, 0, 2, 3, 5, 6, 9]> : tensor<30xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<30xindex>), tensor<30xf64> to tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }
    
}
