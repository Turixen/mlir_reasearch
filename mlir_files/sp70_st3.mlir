// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @matmul(%t : tensor<10x10xf64, #CSR>, %s : tensor<10x10xf64>, %out : tensor<10x10xf64>)
        -> tensor<10x10xf64> {
        %0 = linalg.matmul
            ins(%t, %s: tensor<10x10xf64, #CSR>, tensor<10x10xf64>)
            outs(%out: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %0 : tensor<10x10xf64>
    }

    func.func @main() -> i64 {
        %c = tensor.empty() : tensor<10x10xf64>
        %t_sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %s = arith.constant dense<[
            [3.2004392795924708, 7.842546875686274, 0.5418572712850411, 3.3254273993946857, 4.7367423272772315, 9.405584398179933, 3.9816915553328727, 9.07874159309769, 8.446319406714549, 2.5054246138966887], [2.741939988097797, 8.636809640521818, 7.3466557935663666, 2.6781683676436496, 4.091042362985932, 3.74984277622491, 9.327242169667585, 1.6853631850546402, 4.428413691058939, 7.4142604670062315], [7.8528958946575065, 0.336037513634887, 4.033469789249811, 7.673035350934781, 3.4938243218941754, 2.807270544325103, 5.91280125595048, 1.0887200539221598, 5.116440523024943, 2.214097478879191], [9.506209299267692, 7.319459665795366, 2.4516503756943555, 4.638846225021518, 2.31407891512603, 1.7095493863659572, 2.2904540168856835, 9.437969424411301, 3.4817423625835864, 5.067322655724997], [0.20494306953723784, 3.1060957263359326, 1.2519412006233033, 5.090192119783276, 9.443724657457027, 1.1142205216495449, 8.112728809342434, 4.883325484131207, 4.304739820860041, 0.4915700357345887], [9.957303515183046, 9.937294686171883, 2.3367742369936337, 3.6107403695382145, 1.3974575663836974, 5.785857248787385, 0.44882868862067604, 5.310483609568122, 6.466635421420967, 6.876756886061745], [7.7031995510683355, 2.608479716723464, 4.809042877165785, 6.306174463222069, 9.554203760249058, 0.1869316093140383, 7.018959447542911, 5.982022777458582, 0.5396039138232467, 0.8106138086141812], [8.52500755972561, 0.8012568605026615, 6.5924858663760135, 5.632572308221429, 2.139947851848063, 5.604097978770647, 7.56057415125062, 4.813430788427514, 9.14709781083475, 9.171326032638044], [6.802893411494613, 1.5773198977904035, 1.6556599527308047, 9.099796058541266, 5.927531922565991, 9.1331983504726, 7.380551590034025, 7.93196226881311, 0.344793465550155, 4.787447344214312], [6.063140735178081, 7.437471435107087, 8.01348973710762, 3.979228332805864, 7.045326720441631, 3.7578919255722356, 0.26257116585566065, 0.33381444731918175, 6.025259831083143, 0.9100000340706837]
        ]> : tensor<10x10xf64>
        %result_matrix = call @matmul(%t_sparse, %s, %c) :
            (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %c1 = arith.constant 1 : index
        %element_f64 = tensor.extract %result_matrix[%c1, %c1] : tensor<10x10xf64>
        %element_i64 = arith.fptosi %element_f64 : f64 to i64
        return %element_i64 : i64
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[6.741407, 4.289001, 0.165061, 5.019489, 5.670616, 1.764829, 4.395728, 4.357302, 1.243656, 8.535004, 7.451113, 2.046324, 2.822991, 2.747332, 4.185736, 7.225522, 4.312568, 7.997146, 0.988729, 5.288602, 3.417114, 8.811408, 8.603617, 8.969602, 6.875982, 9.614605, 2.198700, 9.709527, 0.123089, 5.557956]> : tensor<30xf64>
        %row_ptr = arith.constant dense<[0, 6, 8, 10, 16, 16, 19, 23, 24, 26, 30]> : tensor<11xindex>
        %col_ind = arith.constant dense<[0, 1, 2, 3, 6, 9, 2, 6, 5, 8, 0, 3, 4, 5, 6, 9, 1, 3, 4, 0, 3, 6, 9, 9, 1, 5, 0, 3, 6, 9]> : tensor<30xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<30xindex>), tensor<30xf64> to tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }
    
}
