// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @sparse_dense_matmul(%sparse: tensor<10x10xf64, #CSR>,%dense: tensor<10x10xf64>,%init: tensor<10x10xf64>
    ) -> tensor<10x10xf64> {
        %res = linalg.matmul ins(%sparse, %dense: tensor<10x10xf64, #CSR>, tensor<10x10xf64>) 
            outs(%init: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %res : tensor<10x10xf64>
    }

    func.func @main() -> i32 {
        %c0 = arith.constant 0 : index
        %c1 = arith.constant 1 : index
        %rows = arith.constant 10 : index
        %cols = arith.constant 10 : index
        %zero_f64 = arith.constant 0.0 : f64

        %init = tensor.empty() : tensor<10x10xf64>
        %sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %dense = arith.constant dense<[[3.676128, 4.253003, 2.562311, 6.727809, 4.330574, 0.277227, 0.663724, 9.504864, 3.280320, 0.745016], [0.905954, 3.953602, 3.926937, 6.210186, 9.314595, 6.479750, 6.257131, 7.685266, 7.412632, 2.888491], [3.232570, 4.286865, 0.562100, 1.126286, 3.840072, 8.144756, 3.093748, 0.544634, 2.497948, 4.931902], [7.901552, 9.614369, 6.809174, 9.203602, 0.081318, 6.260150, 9.123338, 4.516966, 3.436336, 2.080842], [8.687104, 1.325405, 7.106795, 8.663809, 1.783470, 2.573121, 4.667234, 8.059584, 9.914290, 2.381164], [9.763451, 8.080422, 5.462725, 6.932289, 3.281621, 6.468457, 9.713393, 3.942577, 0.351170, 3.460698], [7.653337, 2.893301, 8.256383, 3.951078, 8.414082, 4.461781, 4.703442, 3.938437, 0.884137, 2.467210], [1.094956, 6.419356, 2.404585, 3.328888, 3.515205, 4.310790, 4.421885, 8.262218, 3.365497, 2.959382], [2.682495, 9.870473, 1.702041, 1.797933, 0.268575, 0.590686, 7.453308, 9.521449, 5.319812, 9.640002], [4.619545, 2.534699, 1.352938, 3.927395, 9.552331, 3.833009, 5.081529, 5.235526, 0.131804, 9.438448]]> : tensor<10x10xf64>

        %computed = call @sparse_dense_matmul(%sparse, %dense, %init) : (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %expected = arith.constant dense<[[171.753989, 110.408753, 145.651580, 174.978542, 65.209131, 91.902118, 134.881670, 139.687952, 115.204922, 58.685457], [7.906347, 34.503470, 34.270763, 54.196905, 81.289391, 56.549420, 54.606603, 67.070078, 64.690770, 25.208143], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [167.936214, 135.649457, 150.107031, 162.767840, 131.225442, 100.152004, 129.756072, 149.176266, 57.530767, 65.604351], [59.942773, 84.467863, 45.117685, 52.797149, 10.060113, 16.132013, 80.068338, 111.601544, 86.389918, 87.322577], [173.912532, 93.039522, 151.959155, 179.534891, 113.522738, 68.114885, 96.560540, 190.339199, 121.572397, 47.690898], [209.267638, 151.012613, 154.445366, 161.965482, 153.992175, 130.828657, 177.152660, 136.274163, 31.798650, 96.150173], [13.753503, 15.911770, 9.586379, 25.170764, 16.201983, 1.037189, 2.483191, 35.560566, 12.272669, 2.787329], [13.328998, 54.160745, 12.116391, 14.487167, 8.622657, 11.644406, 39.986925, 56.675208, 28.988800, 45.812334], [177.193957, 203.702789, 128.680132, 185.620773, 138.094238, 111.567703, 190.729119, 212.632528, 86.722939, 166.288998]]> : tensor<10x10xf64>

        // Validate each element
        %false = arith.constant "false" : i1
        %flag = scf.for %i = %c0 to %rows step %c1 iter_args(%f_iter = %false) -> (i1) {
            %flag_row = scf.for %j = %c0 to %cols step %c1 iter_args(%f_in = %f_iter) -> (i1) {
                %cmp_c = tensor.extract %computed[%i, %j] : tensor<10x10xf64>
                %cmp_e = tensor.extract %expected[%i, %j] : tensor<10x10xf64>
                %neq = arith.cmpf une, %cmp_c, %cmp_e : f64
                %new_f = arith.ori %f_in, %neq : i1
                scf.yield %new_f : i1
            }
            scf.yield %flag_row : i1
        }

        %zero_i32 = arith.constant 0 : i32
        %one_i32 = arith.constant 1 : i32
        %status = scf.if %flag -> (i32) {
            scf.yield %one_i32 : i32
        } else {
            scf.yield %zero_i32 : i32
        }
        return %status : i32
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[2.042317, 8.120029, 7.811967, 3.353797, 1.418804, 8.727099, 6.938216, 7.620650, 9.370044, 2.273683, 4.441867, 7.961178, 9.493418, 2.168802, 7.750335, 0.209180, 6.860581, 3.642611, 2.444748, 9.671456, 8.575026, 3.572924, 3.741302, 2.140060, 4.095339, 6.249529, 9.477430, 3.291017, 5.569085, 8.487237]> : tensor<30xf64>
        %row_ptr = arith.constant dense<[0, 5, 6, 6, 10, 12, 17, 22, 23, 25, 30]> : tensor<11xindex>
        %col_ind = arith.constant dense<[0, 3, 4, 6, 9, 1, 0, 3, 6, 9, 4, 8, 0, 3, 4, 5, 6, 0, 3, 5, 6, 9, 0, 7, 8, 0, 3, 6, 8, 9]> : tensor<30xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<30xindex>), tensor<30xf64> to tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }

}
