// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @matmul(%t : tensor<10x10xf64, #CSR>, %s : tensor<10x10xf64>, %out : tensor<10x10xf64>)
        -> tensor<10x10xf64> {
        %0 = linalg.matmul
            ins(%t, %s: tensor<10x10xf64, #CSR>, tensor<10x10xf64>)
            outs(%out: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %0 : tensor<10x10xf64>
    }

    func.func @main() -> i64 {
        %c = tensor.empty() : tensor<10x10xf64>
        %t_sparse = call @test_assemble() : () -> tensor<10x10xf64, #CSR>
        %s = arith.constant dense<[
            [3.6011177065520728, 8.929507541558863, 9.460441327206249, 6.969546819076687, 7.573513123131442, 3.7541274010905856, 3.201011039390227, 6.974737646379455, 7.967050542064003, 5.207763367966994], [8.369639402577224, 6.521505492505966, 0.6511207612549974, 0.8804882184886054, 8.615018300627458, 2.0896379921977615, 7.124414262873103, 8.23050011588575, 8.225039661440062, 9.866063002884557], [5.980203109164393, 0.15637030087264248, 2.079059181420707, 4.3791623645275335, 1.9313470805927213, 3.22577571733911, 2.883754808421509, 3.7027028826432407, 2.9830324151860124, 6.372541147659984], [3.628154486004458, 1.8137448557599511, 2.335964790134961, 5.7103121707310205, 5.6656873231362415, 5.3352241626794115, 1.4813559125756193, 5.453586575517274, 3.3372981287171744, 8.0883634053639], [9.108816691061117, 7.394812861405203, 1.740816479796834, 8.16223746291415, 5.766890033017841, 7.551366572589885, 1.5192747562904285, 1.9202660260098092, 3.4651915116617795, 2.181782050463801], [6.441899131744176, 3.9032285215797047, 1.5910185532485943, 7.6094568674694845, 4.523665253903317, 3.513525371842822, 2.462358488791807, 9.738494960713979, 6.990674509620866, 4.4601462586025065], [1.5027252739158314, 2.2053163480515647, 3.819610970233672, 6.5508961241178, 1.0528812711287927, 5.03840681235017, 8.02808136234843, 8.112025116468331, 2.435093667621886, 9.586577720203563], [9.04681529808679, 5.7347622042457145, 3.875683581946835, 2.345659354480815, 2.446889625194962, 8.009730809612506, 0.6174699508649095, 2.7989537292038333, 2.1489305149042828, 8.243177174664327], [4.8071513486956965, 2.785675147815576, 3.5978196734974253, 1.6546375237705269, 4.309396186479374, 9.997803410168546, 2.9670461154442074, 0.023698040602304626, 9.493936472845633, 2.5593295158339977], [3.9301838940084464, 9.268161327411415, 7.83817601255527, 3.8953683890838473, 5.888460716585543, 8.990667733404777, 1.5006880727074734, 9.445321121709064, 9.959107997998537, 0.81738915730875]
        ]> : tensor<10x10xf64>
        %result_matrix = call @matmul(%t_sparse, %s, %c) :
            (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %c1 = arith.constant 1 : index
        %element_f64 = tensor.extract %result_matrix[%c1, %c1] : tensor<10x10xf64>
        %element_i64 = arith.fptosi %element_f64 : f64 to i64
        return %element_i64 : i64
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[8.155541, 2.763709, 9.412278, 7.611675, 7.095005, 2.692847, 8.220495, 7.231665, 5.101789, 2.254870, 6.105367, 3.290771, 9.544268, 2.272477, 5.468032, 6.990814, 9.491213, 7.564457, 1.417924, 1.234666, 6.994138, 3.539217, 8.644516, 1.779687, 9.942485, 0.804607, 1.658336, 2.121550, 1.609846, 8.632418]> : tensor<30xf64>
        %row_ptr = arith.constant dense<[0, 5, 6, 10, 15, 16, 18, 23, 25, 26, 30]> : tensor<11xindex>
        %col_ind = arith.constant dense<[0, 2, 3, 6, 9, 1, 0, 4, 5, 7, 0, 2, 3, 6, 9, 4, 6, 8, 0, 3, 6, 7, 9, 0, 6, 2, 0, 3, 6, 9]> : tensor<30xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<30xindex>), tensor<30xf64> to tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }
    
}
