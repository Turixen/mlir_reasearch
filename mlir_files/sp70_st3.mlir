// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @sparse_dense_matmul(%sparse: tensor<10x10xf64, #CSR>,%dense: tensor<10x10xf64>,%init: tensor<10x10xf64>
    ) -> tensor<10x10xf64> {
        %res = linalg.matmul ins(%sparse, %dense: tensor<10x10xf64, #CSR>, tensor<10x10xf64>) 
            outs(%init: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %res : tensor<10x10xf64>
    }

    func.func @main() -> i32 {
        %c0 = arith.constant 0 : index
        %c1 = arith.constant 1 : index
        %rows = arith.constant 10 : index
        %cols = arith.constant 10 : index
        %zero_f64 = arith.constant 0.0 : f64

        %init = tensor.empty() : tensor<10x10xf64>
        %sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %dense = arith.constant dense<[[3.063054, 2.343535, 5.848871, 5.079472, 7.276105, 3.263493, 6.609435, 7.710215, 6.448739, 2.814993], [2.368682, 9.363647, 6.763728, 5.321252, 2.348897, 1.891896, 4.703497, 4.269703, 5.815751, 3.055835], [4.087657, 3.017733, 7.325515, 6.950608, 9.778629, 3.224588, 5.711415, 8.261336, 9.124325, 4.430818], [9.659401, 5.546180, 5.744490, 8.540436, 4.887108, 2.809663, 3.780720, 3.168974, 1.300204, 6.338663], [2.057257, 2.214688, 5.641547, 3.259106, 2.035829, 6.426673, 8.574265, 7.540565, 4.256789, 6.854894], [3.807139, 9.108284, 8.455300, 2.096189, 3.272415, 0.920108, 1.248714, 6.188013, 9.575073, 7.670404], [3.139812, 8.334398, 2.274918, 3.691264, 4.757838, 1.479497, 5.689290, 1.163563, 8.523595, 4.288444], [4.702495, 9.422549, 7.223198, 1.906791, 6.589692, 2.308083, 5.621647, 5.755117, 6.986298, 2.246684], [7.634873, 9.345463, 1.518042, 9.261083, 7.141234, 8.216144, 6.168915, 6.127910, 6.274306, 0.185969], [3.536124, 1.812731, 6.048185, 0.480168, 0.847315, 5.099902, 5.739888, 7.683685, 2.093411, 9.128488]]> : tensor<10x10xf64>

        %computed = call @sparse_dense_matmul(%sparse, %dense, %init) : (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %expected = arith.constant dense<[[45.421408, 53.920475, 70.253757, 67.994670, 93.340673, 39.397321, 87.712476, 84.480678, 96.435444, 46.105721], [64.340779, 78.756303, 12.792879, 78.045211, 60.180772, 69.239281, 51.986821, 51.641265, 52.874975, 1.567202], [6.812875, 7.334228, 18.682715, 10.792954, 6.741913, 21.282764, 28.394793, 24.971562, 14.096909, 22.700873], [48.828446, 42.206255, 74.423619, 31.431163, 41.284671, 53.689672, 77.159306, 88.522837, 55.130843, 92.414033], [49.021234, 92.989511, 88.019509, 23.113685, 54.380361, 32.255679, 56.735893, 76.175249, 82.757304, 61.594819], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [202.010080, 282.485358, 237.470586, 155.055298, 178.297778, 85.142841, 162.406132, 178.709998, 229.188246, 203.312769], [119.243001, 66.645877, 103.916246, 83.293162, 52.452344, 68.741345, 83.108651, 93.689985, 29.580510, 135.198373], [21.467146, 16.424459, 40.991305, 35.599036, 50.993949, 22.871906, 46.321652, 54.036370, 45.195425, 19.728633], [48.108657, 35.524999, 67.247809, 21.067462, 23.472001, 53.127391, 67.878691, 78.903833, 36.280447, 97.198455]]> : tensor<10x10xf64>

        // Validate each element
        %false = arith.constant "false" : i1
        %flag = scf.for %i = %c0 to %rows step %c1 iter_args(%f_iter = %false) -> (i1) {
            %flag_row = scf.for %j = %c0 to %cols step %c1 iter_args(%f_in = %f_iter) -> (i1) {
                %cmp_c = tensor.extract %computed[%i, %j] : tensor<10x10xf64>
                %cmp_e = tensor.extract %expected[%i, %j] : tensor<10x10xf64>
                %neq = arith.cmpf une, %cmp_c, %cmp_e : f64
                %new_f = arith.ori %f_in, %neq : i1
                scf.yield %new_f : i1
            }
            scf.yield %flag_row : i1
        }

        %zero_i32 = arith.constant 0 : i32
        %one_i32 = arith.constant 1 : i32
        %status = scf.if %flag -> (i32) {
            scf.yield %one_i32 : i32
        } else {
            scf.yield %zero_i32 : i32
        }
        return %status : i32
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[9.789851, 0.485498, 0.300519, 3.336733, 0.019930, 8.427223, 3.311630, 3.080151, 0.556879, 0.322177, 1.807712, 7.667213, 1.159314, 3.413344, 6.002189, 1.531589, 1.764557, 1.252431, 9.576662, 8.422335, 5.988055, 8.716657, 2.623585, 9.282495, 8.364996, 7.008413, 0.533622, 1.004674, 1.465176, 9.097312]> : tensor<30xf64>
        %row_ptr = arith.constant dense<[0, 5, 6, 7, 12, 16, 16, 23, 25, 26, 30]> : tensor<11xindex>
        %col_ind = arith.constant dense<[0, 2, 3, 6, 9, 8, 4, 0, 3, 5, 6, 9, 4, 5, 7, 9, 0, 1, 3, 5, 6, 7, 9, 3, 9, 0, 0, 3, 6, 9]> : tensor<30xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<30xindex>), tensor<30xf64> -> tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }

}
