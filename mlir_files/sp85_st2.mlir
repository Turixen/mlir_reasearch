// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @matmul(%t : tensor<10x10xf64, #CSR>, %s : tensor<10x10xf64>, %out : tensor<10x10xf64>)
        -> tensor<10x10xf64> {
        %0 = linalg.matmul
            ins(%t, %s: tensor<10x10xf64, #CSR>, tensor<10x10xf64>)
            outs(%out: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %0 : tensor<10x10xf64>
    }

    func.func @main() -> i64 {
        %c = tensor.empty() : tensor<10x10xf64>
        %t_sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %s = arith.constant dense<[
            [2.680855854115501, 5.722584828077842, 6.091472865214756, 5.590257745954465, 2.0519584571563465, 5.807889841380202, 9.780103818088762, 6.675816847721828, 8.083980587563934, 3.8138009580072465], [5.316559573008259, 8.862760543969001, 1.5832784748915696, 5.937710007999209, 9.944912234145614, 3.0358315016780857, 4.567598924753149, 8.361940944665381, 7.1413975699219465, 2.944585599954147], [9.124299857900658, 4.161573787111452, 9.880135640247058, 1.4615444428340862, 2.4909240809864484, 3.4797655246093493, 1.0109289011931666, 7.522712973703802, 6.2104209941854505, 5.415063349674111], [4.687494765277309, 8.785285739671291, 5.141658550603685, 9.653133237950799, 3.8129522584871447, 0.43307416507634144, 1.469579418626008, 5.016449363833601, 7.0979456079131085, 0.05185741513174413], [6.397524050532338, 5.470816739575978, 6.657044810452362, 9.318352927825421, 4.385947021236597, 1.4134797069456262, 7.919748313957083, 1.6513853831235503, 5.243411227844296, 5.176608235290328], [4.6325628466377395, 7.52665653762289, 8.640520291425174, 7.713187491329899, 2.4900347568828196, 7.042704792590241, 8.822935640702003, 2.5107677319282717, 7.7694765350212975, 3.6809028420557754], [7.848300559624162, 7.952601528068075, 7.002015536661888, 9.253827046922137, 8.946858136258212, 4.3987063298767755, 4.303760704047042, 9.170524183627103, 7.089934534631482, 0.4634422820852402], [9.320006161394495, 5.096094506194473, 7.958820118350203, 1.5225796298986338, 3.799757261495439, 8.103993610774548, 0.9180886559630907, 7.004568159128989, 2.3567635401938603, 0.13239424598117222], [6.257330979518535, 5.901607479261909, 9.221902576695982, 6.157005739018066, 9.192065682756532, 2.5247502806684476, 6.827643901247661, 7.052232801994702, 3.992452034403353, 0.990930838574251], [3.396186379335222, 4.867488635785692, 9.857126479950622, 6.209855295014528, 1.0555827883038793, 9.999646457310604, 5.7279272455187975, 3.3589632105929814, 5.80252390709939, 9.644563358319495]
        ]> : tensor<10x10xf64>
        %result_matrix = call @matmul(%t_sparse, %s, %c) :
            (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %c1 = arith.constant 1 : index
        %element_f64 = tensor.extract %result_matrix[%c1, %c1] : tensor<10x10xf64>
        %element_i64 = arith.fptosi %element_f64 : f64 to i64
        return %element_i64 : i64
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[5.582428, 1.487843, 9.004298, 7.276996, 3.964947, 5.269248, 4.651913, 6.674149, 9.863914, 1.518967, 2.806071, 7.433938, 4.475246, 1.673260, 9.075331]> : tensor<15xf64>
        %row_ptr = arith.constant dense<[0, 2, 2, 5, 5, 9, 9, 12, 12, 15, 15]> : tensor<11xindex>
        %col_ind = arith.constant dense<[0, 8, 2, 6, 8, 0, 4, 6, 8, 0, 4, 6, 2, 6, 8]> : tensor<15xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<15xindex>), tensor<15xf64> to tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }
    
}
