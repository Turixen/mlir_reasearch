// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @matmul(%t : tensor<10x10xf64, #CSR>, %s : tensor<10x10xf64>, %out : tensor<10x10xf64>)
        -> tensor<10x10xf64> {
        %0 = linalg.matmul
            ins(%t, %s: tensor<10x10xf64, #CSR>, tensor<10x10xf64>)
            outs(%out: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %0 : tensor<10x10xf64>
    }

    func.func @main() -> i64 {
        %c = tensor.empty() : tensor<10x10xf64>
        %t_sparse = call @test_assemble() : () -> tensor<10x10xf64, #CSR>
        %s = arith.constant dense<[
            [9.967949382544086, 8.040425468682677, 9.652998117730103, 8.425868681065102, 1.4421963485961087, 1.6242058900198397, 4.686237133170183, 4.54998273802447, 3.841958259811099, 8.33338126352864], [1.0403148552802843, 8.764585013001698, 3.8644838929694467, 8.44112807037023, 2.88022330814129, 3.348184255225891, 2.212914199731828, 4.604302834363089, 6.381535082730517, 5.4378455067690865], [3.005336997024801, 3.751493071075791, 3.1740676817992144, 2.280812185023744, 0.19494638057524272, 0.29516578400623605, 7.618713677829193, 3.0816328588739395, 6.004963978750647, 0.2699885202759189], [4.76227461316645, 6.790348023663249, 9.466232280215541, 1.617559816829519, 6.032871563823178, 9.09850863947278, 7.0740709745048855, 1.6562984851065476, 3.7418350623736973, 7.972671930979206], [5.565674917534555, 9.4699811871596, 2.83183508511378, 4.976761349147424, 1.1316155565422503, 7.801792220649371, 4.887487483475269, 3.4795760027913847, 2.8398348342788635, 6.543851658251009], [6.41827922958548, 1.8110517084422095, 4.89084012127808, 4.250157310901356, 4.59890809765401, 6.781285633339918, 8.200468943393643, 7.424557464370228, 2.451109293955459, 2.718560507069032], [0.2440886261861419, 5.6542531048529, 0.19427062302508902, 9.705359701610002, 7.076156564600682, 2.972153553242035, 1.786090099173464, 0.3503618634453165, 2.3388761089789822, 6.377865534373798], [7.775795475021306, 5.06337149444481, 1.9926607328515378, 8.177508612347586, 8.347046278457755, 3.1429652093919156, 0.5182235068741947, 3.20157291409932, 5.500249922733608, 8.137793581544535], [7.167018411247693, 8.32687652948364, 6.055517624029969, 0.09389776492500945, 2.87002856011172, 5.716463854502695, 8.91535799036927, 6.386929537737678, 1.3601678131742556, 6.814602065670926], [3.097238019222118, 3.033339860934776, 3.478251590761615, 9.58098530351808, 2.3420150815374496, 9.277508039582399, 3.0243293768096793, 3.2735120832627365, 7.328693456139676, 5.338377002480689]
        ]> : tensor<10x10xf64>
        %result_matrix = call @matmul(%t_sparse, %s, %c) :
            (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %c1 = arith.constant 1 : index
        %element_f64 = tensor.extract %result_matrix[%c1, %c1] : tensor<10x10xf64>
        %element_i64 = arith.fptosi %element_f64 : f64 to i64
        return %element_i64 : i64
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[8.437955, 3.181898, 5.749894, 0.341825, 7.050026, 1.703567, 0.368173, 7.019872, 6.846605, 4.406603, 4.747914, 0.899564, 8.034258, 2.284920, 7.233552]> : tensor<15xf64>
        %row_ptr = arith.constant dense<[0, 3, 3, 6, 6, 9, 9, 13, 13, 15, 15]> : tensor<11xindex>
        %col_ind = arith.constant dense<[2, 4, 8, 4, 6, 8, 0, 2, 4, 0, 4, 6, 8, 0, 8]> : tensor<15xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<15xindex>), tensor<15xf64> to tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }
    
}
