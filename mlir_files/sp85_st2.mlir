// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @matmul(%t : tensor<10x10xf64, #CSR>, %s : tensor<10x10xf64>, %out : tensor<10x10xf64>)
        -> tensor<10x10xf64> {
        %0 = linalg.matmul
            ins(%t, %s: tensor<10x10xf64, #CSR>, tensor<10x10xf64>)
            outs(%out: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %0 : tensor<10x10xf64>
    }

    func.func @main() -> i64 {
        %c = tensor.empty() : tensor<10x10xf64>
        %t_sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %s = arith.constant dense<[
            [1.6866859263344025, 5.575168033422254, 1.026587145983875, 2.8537270966775905, 2.2067920667033913, 6.525988522282674, 7.768049919797191, 1.734623730132161, 0.1305777549867082, 7.167345814172545], [3.1159780081281796, 9.445992888330464, 3.3799052274991404, 3.8332404881538307, 1.3607522308671338, 3.6573199726127315, 4.374085235399626, 8.293545549006875, 7.593498910993217, 0.11360995897642723], [5.384562983962847, 3.516932589520787, 2.5142844260639508, 6.862006479469968, 2.9522922319220135, 1.1072947963827384, 2.9220454392901365, 2.5369747530304423, 2.430210006092789, 9.42816619358622], [0.922300641296675, 7.313481537292295, 6.647822096841233, 7.497181831400642, 9.118249844028846, 1.1274683272579866, 7.403519565681781, 3.239470418897974, 5.618782951729202, 5.521989448921617], [5.377588533915465, 6.760552485543321, 8.812476238255151, 7.989047974266117, 2.5829296044675853, 5.615429589259432, 6.127750874454314, 6.482048217436777, 8.651628391007714, 9.793717457636246], [1.511480920630004, 9.45928347272041, 7.189425047289715, 9.103055166961372, 2.1125686257840526, 7.207095397939316, 1.0358158706465814, 5.936902547362836, 8.748625110228458, 5.367945748321344], [7.145788709523467, 1.154779055428582, 2.830917271795954, 7.478289666835122, 8.743589931412485, 2.5550367942727368, 5.830303579403147, 7.933721592924478, 3.294085214309148, 1.6830303213469233], [4.979549437730587, 7.221680778750191, 4.548824417052018, 0.18557289450501058, 5.449073377079451, 6.12764299294351, 6.3393899204126285, 4.592335839244957, 3.708417707316203, 6.046772507505409], [3.103013459503774, 1.259961560913816, 3.6980066228891206, 5.295823821375983, 5.706164026542215, 4.883317028079183, 0.8798608514216322, 2.9818265831740245, 8.588966393195781, 2.5200472101586913], [4.598268682736575, 5.001075016851618, 4.960996888490112, 0.08000725085800298, 5.610470473711581, 3.4620143703606585, 4.253561838896575, 3.4761130993189813, 4.6656860243146445, 6.912448522157604]
        ]> : tensor<10x10xf64>
        %result_matrix = call @matmul(%t_sparse, %s, %c) :
            (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %c1 = arith.constant 1 : index

        %element_f64 = tensor.extract %result_matrix[%c1, %c1] : tensor<10x10xf64>
        %element_i64 = arith.fptosi %element_f64 : f64 to i64
        return %element_i64 : i64
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[1.210678, 2.248919, 4.576175, 5.425196, 0.316873, 0.777364, 4.322611, 8.826359, 6.986016, 9.163329, 6.181914, 6.938853, 6.046808, 1.577040, 5.398912]> : tensor<15xf64>
        %row_ptr = arith.constant dense<[0, 2, 2, 6, 6, 10, 10, 13, 13, 15, 15]> : tensor<11xindex>
        %col_ind = arith.constant dense<[2, 6, 0, 2, 4, 8, 0, 2, 6, 8, 0, 2, 4, 2, 6]> : tensor<15xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<15xindex>), tensor<15xf64> to tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }
    
}
