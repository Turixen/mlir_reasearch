// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @matmul(%t : tensor<10x10xf64, #CSR>, %s : tensor<10x10xf64>, %out : tensor<10x10xf64>)
        -> tensor<10x10xf64> {
        %0 = linalg.matmul
            ins(%t, %s: tensor<10x10xf64, #CSR>, tensor<10x10xf64>)
            outs(%out: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %0 : tensor<10x10xf64>
    }

    func.func @main() -> i64 {
        %c = tensor.empty() : tensor<10x10xf64>
        %t_sparse = call @test_assemble() : () -> tensor<10x10xf64, #CSR>
        %s = arith.constant dense<[
            [8.240175342077507, 4.085191667876234, 6.356567824524545, 5.816254580738194, 6.351671313195688, 6.269184838201697, 5.821066223803825, 6.373611468326485, 8.615709455164275, 9.319922765584883], [1.8500520960195044, 6.762910928104469, 0.6901741812275497, 7.113742950799555, 0.5104196431106456, 8.471690385476547, 4.336892588618855, 6.805159090869029, 4.085275319360127, 0.08400621638841588], [7.474363516228083, 1.6268861969806736, 8.887548759596603, 9.983467994261272, 1.798979914870863, 1.8414628482467554, 4.709470008600025, 1.0696104500008918, 7.384670682240978, 5.710769270656222], [8.28432316168573, 1.2204199353562217, 8.088305354704291, 2.1388010379226765, 0.76918876154353, 7.211232248565647, 1.4871216574301949, 0.6983903284651893, 9.648140951232595, 6.1617838102686475], [3.255120823049106, 3.3308621524268833, 2.9653500777371344, 3.6710260708521347, 6.457657175857595, 1.2113867657658473, 1.8118657698887053, 3.4896556680484103, 3.451154076209156, 1.554831382764622], [8.531823260483005, 3.4366280159047866, 9.299743421430225, 9.949133574897314, 6.170225006345432, 9.799660828573328, 1.8508929675196784, 3.7121119665954385, 1.8336444300645394, 4.310687030748114], [6.044859765745238, 8.739724825388388, 4.3108158035331945, 0.17471937753271272, 3.931066455646924, 4.645740631201157, 2.2034007588899165, 3.4038721067749633, 9.589286545133861, 4.174718674074468], [7.49018756599035, 6.728295888858915, 4.935558623499232, 2.575430662833286, 6.61000791645649, 4.353888174723756, 4.121755230360909, 9.592010753790644, 8.371355904911828, 9.675640762623882], [4.653296222678626, 1.1333182286219667, 9.058671830549796, 4.1079777682069585, 4.051107903603066, 7.0153994080338435, 8.034033526280082, 5.786876604315818, 4.45162787831721, 7.238035213263082], [5.473624070289153, 6.585095995403077, 3.9091915499088605, 5.763696706636475, 6.686893304216265, 6.297310932924719, 4.35130022417639, 4.48695451627179, 7.02888477004376, 7.599373860311541]
        ]> : tensor<10x10xf64>
        %result_matrix = call @matmul(%t_sparse, %s, %c) :
            (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %c1 = arith.constant 1 : index
        %element_f64 = tensor.extract %result_matrix[%c1, %c1] : tensor<10x10xf64>
        %element_i64 = arith.fptosi %element_f64 : f64 to i64
        return %element_i64 : i64
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[0.052967, 9.927814, 6.059667, 6.289439, 2.187009, 4.242659, 3.273125, 7.338011, 6.117281, 8.520854, 1.852358, 5.877273, 5.522521, 4.994951, 6.895213, 3.961117, 4.382772, 9.930200, 9.479287, 4.910278, 5.935428, 2.172554, 4.164934, 7.243651, 4.662311, 2.232980, 8.091327, 2.343560, 7.075692, 5.054788, 1.992194, 4.159354, 5.550495, 6.012847, 7.077187]> : tensor<35xf64>
        %row_ptr = arith.constant dense<[0, 5, 7, 10, 14, 17, 20, 24, 27, 31, 35]> : tensor<11xindex>
        %col_ind = arith.constant dense<[3, 4, 6, 8, 9, 4, 9, 0, 3, 7, 0, 1, 2, 9, 5, 6, 7, 4, 5, 8, 1, 2, 4, 5, 0, 4, 7, 1, 5, 6, 7, 0, 5, 7, 9]> : tensor<35xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<35xindex>), tensor<35xf64> to tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }
    
}
