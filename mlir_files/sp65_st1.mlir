// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @matmul(%t : tensor<10x10xf64, #CSR>, %s : tensor<10x10xf64>, %out : tensor<10x10xf64>)
        -> tensor<10x10xf64> {
        %0 = linalg.matmul
            ins(%t, %s: tensor<10x10xf64, #CSR>, tensor<10x10xf64>)
            outs(%out: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %0 : tensor<10x10xf64>
    }

    func.func @main() -> i64 {
        %c = tensor.empty() : tensor<10x10xf64>
        %t_sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %s = arith.constant dense<[
            [8.996314110631822, 8.243251342016002, 1.4583643613998232, 2.687489420028503, 8.87913795284446, 0.23238436602992518, 0.31668735546838467, 8.609286052823716, 3.4632160849947233, 8.596350364900866], [1.2529734641427792, 7.811736116576443, 2.043003338481646, 9.308642577389085, 9.862458491995925, 0.8955735170421164, 7.60312137877886, 4.913536204295981, 0.7578359824034686, 2.7286348954256443], [3.3694169408065755, 2.8331678252248205, 8.396551683548298, 3.0833355052160414, 8.689323022690239, 0.7266597196137814, 4.7370071094956785, 4.1635239582801145, 2.854800261763759, 8.125722315716938], [4.25371985986056, 3.6502237983942756, 3.4387103943724306, 8.21763987369427, 4.3044225932999645, 6.345081317505688, 4.05037126720447, 7.734116724423492, 6.942973656000284, 2.668350034409781], [9.661549299971995, 5.957200327268812, 7.428241689501974, 1.4286983438796652, 9.242386726264499, 3.013663763956773, 9.237627283676098, 8.596155948722393, 4.9266963778564765, 6.359395224943167], [1.8552111856971754, 2.0965079609584283, 5.7342484399374545, 1.7437407836362162, 9.653408610534179, 7.239813625726569, 7.170917510426578, 2.9236049593223368, 9.937750539262842, 0.627455985940113], [0.9218099394899137, 3.446618688240246, 7.976744139745325, 9.613768367326015, 0.7338594040739577, 9.691813462202887, 3.185647517695307, 1.8287545441873632, 1.3301185044331343, 7.211823662164363], [0.6215137866532416, 2.945284588864878, 7.312424559666038, 3.340401272719431, 4.534586278439625, 8.299235741718979, 6.570886207917442, 9.13335862225449, 9.138143531569352, 6.174500907682761], [9.556985681419976, 2.1349206142079558, 3.2486948271085216, 8.427263657061445, 7.50107224956985, 8.478544008481615, 6.036842860653068, 7.803562341259934, 1.6974667085715411, 6.584303909329206], [1.8365862545169709, 5.703236423459276, 7.072679732722074, 8.874264608380571, 9.789882943021558, 4.7830783402138515, 8.658084013927565, 4.728852384125426, 4.320170063480564, 7.805881446995899]
        ]> : tensor<10x10xf64>
        %result_matrix = call @matmul(%t_sparse, %s, %c) :
            (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %c1 = arith.constant 1 : index

        %element_f64 = tensor.extract %result_matrix[%c1, %c1] : tensor<10x10xf64>
        %element_i64 = arith.fptosi %element_f64 : f64 to i64
        return %element_i64 : i64
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[0.279859, 2.598797, 0.781900, 0.932826, 0.760712, 6.496748, 8.288373, 8.029050, 1.054193, 9.439075, 9.602983, 7.636839, 0.788358, 8.320916, 6.689614, 8.151049, 7.581324, 8.565899, 1.183860, 6.997601, 5.722006, 5.659603, 2.224532, 5.769932, 9.656414, 5.388584, 4.884741, 4.885744, 9.156654, 8.925179, 9.494379, 8.751255, 8.287909, 9.155925, 1.478582]> : tensor<35xf64>
        %row_ptr = arith.constant dense<[0, 5, 9, 14, 15, 17, 20, 23, 28, 31, 35]> : tensor<11xindex>
        %col_ind = arith.constant dense<[3, 6, 7, 8, 9, 3, 6, 7, 9, 0, 4, 6, 7, 9, 7, 2, 4, 1, 2, 5, 0, 1, 2, 1, 2, 3, 6, 9, 2, 4, 7, 1, 2, 6, 8]> : tensor<35xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<35xindex>), tensor<35xf64> to tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }
    
}
