// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @sparse_dense_matmul(%sparse: tensor<10x10xf64, #CSR>,%dense: tensor<10x10xf64>,%init: tensor<10x10xf64>
    ) -> tensor<10x10xf64> {
        %res = linalg.matmul ins(%sparse, %dense: tensor<10x10xf64, #CSR>, tensor<10x10xf64>) 
            outs(%init: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %res : tensor<10x10xf64>
    }

    func.func @main() -> i32 {
        %c0 = arith.constant 0 : index
        %c1 = arith.constant 1 : index
        %rows = arith.constant 10 : index
        %cols = arith.constant 10 : index
        %zero_f64 = arith.constant 0.0 : f64

        %init = tensor.empty() : tensor<10x10xf64>
        %sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %dense = arith.constant dense<[[3.733079, 9.670115, 0.872370, 2.166186, 1.126840, 5.446981, 6.210499, 8.182725, 2.462444, 5.688181], [6.426931, 2.495556, 3.366391, 9.470690, 8.154215, 4.333593, 2.344017, 9.896856, 1.202352, 4.278334], [0.121203, 2.042692, 9.978287, 7.527298, 4.924528, 3.866273, 1.163537, 1.969282, 8.379590, 5.202427], [8.668582, 5.577211, 9.264373, 0.220850, 1.308886, 4.108769, 3.774157, 4.181360, 3.267697, 6.689859], [3.365677, 9.752803, 1.520620, 2.107384, 7.695844, 0.021996, 4.647997, 0.119598, 2.683914, 4.900075], [2.183077, 7.974139, 5.972951, 8.830632, 7.556817, 0.961359, 0.135029, 0.243036, 7.847327, 5.625748], [1.570520, 5.137383, 8.342108, 1.395503, 0.609848, 6.951312, 2.437518, 4.055669, 1.853546, 7.728651], [9.777870, 8.564236, 8.311068, 9.297780, 8.859035, 8.958017, 3.150888, 0.545818, 8.213769, 1.102326], [7.367288, 2.282026, 5.510602, 5.107235, 1.403426, 2.195845, 5.151136, 9.356886, 2.158601, 5.946168], [3.407613, 2.393957, 5.521035, 6.641592, 1.341984, 2.142251, 8.235489, 4.361769, 5.699619, 9.620913]]> : tensor<10x10xf64>

        %computed = call @sparse_dense_matmul(%sparse, %dense, %init) : (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %expected = arith.constant dense<[[5.625967, 28.418028, 62.831229, 57.362523, 41.628203, 21.227799, 6.032918, 10.244102, 59.288157, 38.545497], [66.872250, 68.868793, 115.588553, 52.005332, 23.556569, 85.139354, 54.568369, 89.838883, 38.253566, 104.261478], [69.427377, 94.687458, 200.882049, 172.495384, 103.744869, 117.656111, 91.773273, 121.803527, 134.542567, 189.646172], [85.895714, 125.302719, 79.675202, 97.682485, 116.490700, 61.421984, 42.252603, 4.858743, 90.208439, 47.153404], [36.090779, 107.755980, 57.626130, 24.829059, 66.384402, 37.812558, 51.295623, 22.936487, 32.034580, 82.006476], [56.864460, 107.238687, 69.552481, 82.095438, 49.686575, 54.709409, 112.201343, 83.139713, 80.434986, 128.021584], [146.977406, 187.312000, 149.049148, 163.791016, 110.674217, 170.630823, 144.866893, 174.683595, 115.054606, 177.680204], [129.442883, 131.288792, 231.791151, 225.174012, 136.760985, 108.734991, 108.433413, 123.013682, 194.444013, 185.348055], [57.567883, 80.851279, 37.993981, 48.163402, 41.435364, 62.377299, 42.357871, 41.125179, 45.157275, 31.531965], [55.804186, 80.067235, 60.962176, 56.621019, 70.033531, 20.147279, 56.994734, 48.160983, 49.346494, 72.790360]]> : tensor<10x10xf64>

        // Validate each element
        %false = arith.constant "false" : i1
        %flag = scf.for %i = %c0 to %rows step %c1 iter_args(%f_iter = %false) -> (i1) {
            %flag_row = scf.for %j = %c0 to %cols step %c1 iter_args(%f_in = %f_iter) -> (i1) {
                %cmp_c = tensor.extract %computed[%i, %j] : tensor<10x10xf64>
                %cmp_e = tensor.extract %expected[%i, %j] : tensor<10x10xf64>
                %neq = arith.cmpf une, %cmp_c, %cmp_e : f64
                %new_f = arith.ori %f_in, %neq : i1
                scf.yield %new_f : i1
            }
            scf.yield %flag_row : i1
        }

        %zero_i32 = arith.constant 0 : i32
        %one_i32 = arith.constant 1 : i32
        %status = scf.if %flag -> (i32) {
            scf.yield %one_i32 : i32
        } else {
            scf.yield %zero_i32 : i32
        }
        return %status : i32
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[4.917597, 2.304060, 8.988663, 1.147054, 5.638389, 4.860872, 7.757998, 1.687157, 7.356565, 6.459000, 4.585962, 3.111421, 6.511477, 8.197005, 5.413692, 5.770961, 1.982545, 3.077536, 7.255144, 8.833048, 5.178887, 5.753542, 5.341565, 5.708809, 8.455906, 5.648314, 1.157600, 3.790483, 8.181158, 4.969306, 4.754205, 4.072468, 2.610102, 6.606926, 4.513337]> : tensor<35xf64>
        %row_ptr = arith.constant dense<[0, 2, 5, 10, 13, 15, 19, 24, 30, 32, 35]> : tensor<11xindex>
        %col_ind = arith.constant dense<[2, 5, 6, 7, 8, 1, 2, 5, 6, 9, 4, 5, 7, 4, 6, 0, 2, 4, 9, 0, 1, 6, 7, 9, 2, 5, 6, 7, 8, 9, 0, 7, 2, 4, 8]> : tensor<35xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<35xindex>), tensor<35xf64> -> tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }

}
