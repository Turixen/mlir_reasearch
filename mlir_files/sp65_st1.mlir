// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @sparse_dense_matmul(%sparse: tensor<10x10xf64, #CSR>,%dense: tensor<10x10xf64>,%init: tensor<10x10xf64>
    ) -> tensor<10x10xf64> {
        %res = linalg.matmul ins(%sparse, %dense: tensor<10x10xf64, #CSR>, tensor<10x10xf64>) 
            outs(%init: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %res : tensor<10x10xf64>
    }

    func.func @main() -> i32 {
        %c0 = arith.constant 0 : index
        %c1 = arith.constant 1 : index
        %rows = arith.constant 10 : index
        %cols = arith.constant 10 : index
        %zero_f64 = arith.constant 0.0 : f64

        %init = tensor.empty() : tensor<10x10xf64>
        %sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %dense = arith.constant dense<[[6.195980, 3.812138, 3.006655, 6.668163, 3.188639, 0.599828, 0.636521, 6.208142, 2.739566, 1.071222], [3.524844, 2.932035, 4.995030, 3.791307, 5.980522, 8.083918, 9.700942, 0.280675, 1.174020, 8.217407], [7.880431, 7.196369, 4.599749, 4.734899, 5.625804, 0.455515, 3.915122, 4.515683, 3.658116, 3.747632], [5.342191, 3.464923, 5.740869, 7.818304, 8.003760, 9.621084, 2.131842, 6.567356, 3.069013, 7.350264], [5.878970, 9.198739, 0.080590, 9.572863, 3.571020, 5.386619, 3.654898, 1.658188, 8.289122, 4.419134], [0.123069, 5.712430, 9.759929, 1.369795, 6.798093, 6.810214, 6.413197, 0.564584, 8.732399, 3.822838], [3.214654, 2.981723, 0.532786, 6.998328, 7.043580, 3.925520, 5.069562, 0.108363, 7.112791, 7.672763], [0.242922, 0.117034, 9.043038, 0.355129, 1.741990, 3.267660, 6.378330, 0.777817, 2.156755, 2.078048], [7.549217, 1.249776, 9.920768, 4.509966, 3.895727, 3.671292, 1.604605, 8.739632, 2.402246, 1.266866], [7.623046, 2.696453, 9.260465, 4.334773, 1.228646, 3.594887, 6.148355, 4.495135, 2.811574, 4.246252]]> : tensor<10x10xf64>

        %computed = call @sparse_dense_matmul(%sparse, %dense, %init) : (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %expected = arith.constant dense<[[114.319203, 75.236903, 99.619578, 67.009523, 52.804997, 28.173528, 72.938383, 66.375628, 48.096355, 58.611755], [117.298751, 89.744369, 106.519580, 111.846633, 63.816244, 103.949056, 125.377556, 49.282997, 78.105357, 106.349289], [127.932756, 80.584335, 240.378304, 85.158074, 97.611910, 116.726981, 119.500961, 113.520426, 115.572749, 78.805765], [117.719263, 190.475424, 202.223100, 140.785467, 149.904335, 142.673622, 177.619944, 61.431956, 200.116419, 121.621524], [158.312452, 149.382105, 170.099668, 152.482348, 154.200911, 156.555538, 161.527747, 96.377889, 129.801507, 140.682884], [49.139958, 62.825613, 13.744547, 69.653821, 28.930259, 40.703211, 26.437512, 22.661280, 58.312073, 31.069183], [31.284045, 40.538361, 7.787855, 37.674840, 20.377297, 17.580730, 17.836742, 12.580489, 31.898705, 19.950751], [11.683721, 14.556016, 26.245807, 12.897998, 23.234657, 29.331326, 33.030022, 3.266819, 13.451351, 26.442591], [99.232399, 105.656355, 52.419203, 106.548820, 80.232737, 68.871672, 64.444782, 53.964202, 77.955188, 75.468580], [185.042655, 112.850701, 229.743881, 114.449408, 115.749810, 89.164973, 117.483120, 146.058490, 106.786755, 88.530843]]> : tensor<10x10xf64>

        // Validate each element
        %false = arith.constant "false" : i1
        %flag = scf.for %i = %c0 to %rows step %c1 iter_args(%f_iter = %false) -> (i1) {
            %flag_row = scf.for %j = %c0 to %cols step %c1 iter_args(%f_in = %f_iter) -> (i1) {
                %cmp_c = tensor.extract %computed[%i, %j] : tensor<10x10xf64>
                %cmp_e = tensor.extract %expected[%i, %j] : tensor<10x10xf64>
                %neq = arith.cmpf une, %cmp_c, %cmp_e : f64
                %new_f = arith.ori %f_in, %neq : i1
                scf.yield %new_f : i1
            }
            scf.yield %flag_row : i1
        }

        %zero_i32 = arith.constant 0 : i32
        %one_i32 = arith.constant 1 : i32
        %status = scf.if %flag -> (i32) {
            scf.yield %one_i32 : i32
        } else {
            scf.yield %zero_i32 : i32
        }
        return %status : i32
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[7.893055, 6.836968, 5.219075, 5.448363, 0.363071, 8.619181, 8.221564, 7.937513, 8.788997, 7.471789, 9.446598, 8.529425, 9.271979, 8.655709, 5.002769, 6.321517, 3.754870, 6.722860, 6.648915, 1.331420, 1.638349, 3.125232, 2.478738, 0.088854, 1.077111, 0.306875, 1.686352, 5.506252, 1.963481, 5.806314, 0.698377, 8.187292, 4.097230, 8.395830, 7.429717]> : tensor<35xf64>
        %row_ptr = arith.constant dense<[0, 2, 6, 9, 13, 18, 20, 22, 26, 31, 35]> : tensor<11xindex>
        %col_ind = arith.constant dense<[2, 9, 1, 4, 6, 9, 5, 8, 9, 2, 4, 5, 7, 1, 2, 4, 5, 8, 4, 8, 2, 4, 1, 3, 5, 9, 1, 2, 3, 4, 8, 2, 5, 8, 9]> : tensor<35xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<35xindex>), tensor<35xf64> to tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }

}
