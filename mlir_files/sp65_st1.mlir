// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @sparse_dense_matmul(%sparse: tensor<10x10xf64, #CSR>,%dense: tensor<10x10xf64>,%init: tensor<10x10xf64>
    ) -> tensor<10x10xf64> {
        %res = linalg.matmul ins(%sparse, %dense: tensor<10x10xf64, #CSR>, tensor<10x10xf64>) 
            outs(%init: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %res : tensor<10x10xf64>
    }

    func.func @main() -> i32 {
        %c0 = arith.constant 0 : index
        %c1 = arith.constant 1 : index
        %rows = arith.constant 10 : index
        %cols = arith.constant 10 : index
        %zero_f64 = arith.constant 0.0 : f64

        %init = tensor.empty() : tensor<10x10xf64>
        %sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %dense = arith.constant dense<[[2.714080, 6.777862, 8.174977, 9.003967, 0.586187, 2.490636, 2.158803, 5.232152, 3.740191, 3.890772], [1.911076, 5.897260, 2.906318, 9.045517, 7.832314, 1.087432, 1.312626, 2.165888, 4.122567, 1.313527], [5.593040, 4.549892, 5.068452, 7.607055, 8.562634, 5.708657, 8.885387, 4.241287, 2.539058, 5.011597], [8.399293, 8.178463, 5.423348, 7.521470, 0.243256, 6.232679, 5.518374, 0.047965, 5.722340, 1.508462], [6.961236, 7.294298, 5.034853, 5.171216, 5.949602, 6.035910, 0.340325, 5.023413, 8.582651, 0.874657], [4.956023, 9.124052, 3.182191, 9.615597, 6.867444, 1.570679, 0.417932, 7.571655, 7.882561, 9.320079], [8.545909, 1.476508, 3.389994, 6.836798, 1.442153, 9.995306, 9.068843, 2.629261, 4.970378, 2.664718], [5.283748, 0.449502, 0.882290, 3.551323, 6.421983, 9.211063, 5.604464, 6.610074, 1.632396, 0.962086], [7.172097, 2.101020, 4.964078, 4.355922, 4.270549, 7.860107, 2.463275, 7.363035, 5.419110, 7.587262], [0.031801, 2.427312, 4.778423, 1.130176, 4.819298, 2.352362, 5.428675, 1.917526, 5.589979, 3.375660]]> : tensor<10x10xf64>

        %computed = call @sparse_dense_matmul(%sparse, %dense, %init) : (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %expected = arith.constant dense<[[87.138989, 124.680691, 86.808137, 131.788187, 106.737675, 71.851803, 76.896544, 96.085881, 141.462898, 126.458419], [1.995907, 6.159036, 3.035327, 9.447043, 8.179986, 1.135702, 1.370893, 2.262030, 4.305565, 1.371834], [63.733204, 71.965979, 95.522143, 96.203132, 52.899002, 80.416948, 83.055269, 59.671476, 91.257562, 53.692056], [142.604171, 88.578690, 83.531128, 156.161968, 97.856222, 138.835243, 90.645338, 113.255205, 125.378999, 120.967341], [74.921266, 77.810691, 36.931032, 104.441874, 105.100053, 77.219838, 40.996405, 96.127431, 75.835689, 63.175373], [6.201390, 1.816658, 4.292215, 3.766370, 3.692552, 6.796282, 2.129883, 6.366485, 4.685661, 6.560365], [92.398848, 136.137575, 98.321102, 166.191896, 78.862416, 70.626508, 71.497092, 40.402982, 93.745034, 41.838373], [66.871386, 69.621574, 52.129454, 61.955217, 11.001693, 54.002974, 54.108672, 3.989051, 56.034573, 18.349707], [133.022648, 121.685197, 65.890757, 143.292151, 115.289473, 129.791456, 76.236455, 118.889318, 114.002592, 82.216600], [72.446606, 79.340914, 79.839873, 71.314943, 91.014584, 90.889749, 54.233631, 77.708110, 104.096240, 34.831887]]> : tensor<10x10xf64>

        // Validate each element
        %false = arith.constant "false" : i1
        %flag = scf.for %i = %c0 to %rows step %c1 iter_args(%f_iter = %false) -> (i1) {
            %flag_row = scf.for %j = %c0 to %cols step %c1 iter_args(%f_in = %f_iter) -> (i1) {
                %cmp_c = tensor.extract %computed[%i, %j] : tensor<10x10xf64>
                %cmp_e = tensor.extract %expected[%i, %j] : tensor<10x10xf64>
                %neq = arith.cmpf une, %cmp_c, %cmp_e : f64
                %new_f = arith.or %f_in, %neq : i1
                scf.yield %new_f : i1
            }
            scf.yield %flag_row : i1
        }

        %zero_i32 = arith.constant 0 : i32
        %one_i32 = arith.constant 1 : i32
        %status = scf.if %flag -> (i32) {
            scf.yield %one_i32 : i32
        } else {
            scf.yield %zero_i32 : i32
        }
        return %status : i32
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[1.981800, 9.410542, 2.232559, 0.632945, 7.409067, 1.044389, 5.145095, 0.556614, 1.796635, 4.213561, 5.967171, 3.132200, 4.923835, 7.488976, 6.722658, 2.281640, 1.325355, 5.684599, 6.276182, 0.864655, 3.217712, 8.010832, 1.097105, 7.405411, 0.630252, 7.954426, 1.881338, 4.710735, 2.131186, 7.000884, 8.312957, 1.820986, 7.177868, 3.286495, 5.423170]> : tensor<35xf64>
        %row_ptr = arith.constant dense<[0, 5, 6, 11, 15, 19, 20, 25, 27, 31, 35]> : tensor<11xindex>
        %col_ind = arith.constant dense<[3, 5, 6, 8, 9, 1, 0, 1, 4, 6, 9, 1, 5, 6, 8, 1, 4, 5, 7, 8, 0, 1, 2, 3, 9, 3, 9, 3, 4, 5, 7, 0, 4, 7, 9]> : tensor<35xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<35xindex>), tensor<35xf64> -> tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }

}
