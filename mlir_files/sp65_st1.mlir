// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @sparse_dense_matmul(%sparse: tensor<10x10xf64, #CSR>,%dense: tensor<10x10xf64>,%init: tensor<10x10xf64>
    ) -> tensor<10x10xf64> {
        %res = linalg.matmul ins(%sparse, %dense: tensor<10x10xf64, #CSR>, tensor<10x10xf64>) 
            outs(%init: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %res : tensor<10x10xf64>
    }

    func.func @main() -> i32 {
        %c0 = arith.constant 0 : index
        %c1 = arith.constant 1 : index
        %rows = arith.constant 10 : index
        %cols = arith.constant 10 : index
        %zero_f64 = arith.constant 0.0 : f64

        %init = tensor.empty() : tensor<10x10xf64>
        %sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %dense = arith.constant dense<[[1.177955, 1.834339, 6.234095, 1.451145, 8.490115, 9.811578, 2.248009, 5.701258, 2.581466, 4.331981], [7.613647, 7.098399, 8.242614, 1.474944, 3.354959, 9.572657, 9.376174, 7.060170, 8.455563, 6.264762], [2.994877, 8.639537, 6.191296, 2.440379, 2.844534, 7.272479, 0.383253, 9.672147, 5.859855, 6.027422], [1.060998, 6.864460, 8.385278, 5.016982, 1.082770, 2.984277, 0.187123, 0.460499, 7.423511, 4.275763], [2.798762, 0.128594, 2.197461, 7.014590, 5.274719, 3.563808, 7.546544, 5.307824, 8.392124, 6.334379], [8.236263, 2.829036, 4.278985, 4.219730, 3.085756, 6.323788, 4.142854, 4.186305, 9.553354, 8.643468], [4.808047, 0.282353, 2.532260, 5.501131, 9.706036, 3.562628, 1.310112, 1.703636, 3.756346, 5.579575], [4.388573, 8.588932, 2.176464, 7.077714, 9.312295, 1.839725, 5.888326, 6.143653, 3.185291, 9.280505], [0.134355, 2.039487, 6.014329, 5.140899, 8.129165, 3.264095, 5.805560, 3.250815, 3.436204, 9.037054], [5.068834, 8.882447, 1.257672, 5.016655, 9.841684, 6.543075, 9.801915, 3.041133, 8.016351, 2.923730]]> : tensor<10x10xf64>

        %computed = call @sparse_dense_matmul(%sparse, %dense, %init) : (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %expected = arith.constant dense<[[58.284374, 82.496189, 62.791531, 78.089817, 103.210958, 59.846024, 99.853076, 81.635468, 74.973645, 117.468619], [4.090246, 3.813442, 4.428144, 0.792378, 1.802370, 5.142677, 5.037122, 3.792905, 4.542546, 3.365591], [79.911325, 122.980105, 175.438093, 115.226796, 183.620994, 215.708769, 133.353394, 208.860035, 177.250746, 198.097258], [175.586723, 207.814040, 123.251365, 165.730218, 222.545040, 189.999758, 265.137547, 171.650025, 246.753284, 205.028506], [34.334123, 17.930498, 25.234410, 21.814305, 13.510460, 28.410227, 16.942906, 17.376871, 45.671813, 39.017426], [111.554488, 170.316736, 180.254679, 126.699263, 97.125517, 147.071652, 71.316313, 128.496345, 208.215654, 198.758149], [44.859526, 82.423535, 49.136954, 53.671845, 74.241070, 56.316926, 27.829336, 82.121313, 53.969417, 82.560736], [9.011345, 3.292965, 11.662092, 14.111724, 18.250819, 18.344092, 15.727300, 15.872064, 19.657168, 17.913324], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [32.552713, 53.448084, 115.274249, 75.185796, 170.439725, 129.434456, 71.515879, 97.862824, 69.153129, 136.160020]]> : tensor<10x10xf64>

        // Validate each element
        %false = arith.constant false : i1
        %flag = scf.for %i = %c0 to %rows step %c1 iter_args(%f_iter = %false) -> (i1) {
            %flag_row = scf.for %j = %c0 to %cols step %c1 iter_args(%f_in = %f_iter) -> (i1) {
                %cmp_c = tensor.extract %computed[%i, %j] : tensor<10x10xf64>
                %cmp_e = tensor.extract %expected[%i, %j] : tensor<10x10xf64>
                %neq = arith.cmpf une, %cmp_c, %cmp_e : f64
                %new_f = arith.or %f_in, %neq : i1
                scf.yield %new_f : i1
            }
            scf.yield %flag_row : i1
        }

        %zero_i32 = arith.constant 0 : i32
        %one_i32 = arith.constant 1 : i32
        %status = scf.if %flag -> (i32) {
            scf.yield %one_i32 : i32
        } else {
            scf.yield %zero_i32 : i32
        }
        return %status : i32
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[3.293537, 2.075403, 6.153434, 2.941448, 0.537226, 8.284267, 2.865163, 8.886865, 7.533508, 4.755468, 8.070500, 0.716119, 6.786970, 2.297144, 6.672107, 9.111555, 0.944186, 4.047023, 0.497664, 6.703297, 9.230410, 8.428386, 1.844438, 2.855129, 5.641431, 2.305635, 3.846017, 1.037462, 1.543807, 0.421127, 8.464295, 1.566129, 2.589387, 1.015824, 7.322971]> : tensor<35xf64>
        %row_ptr = arith.constant dense<[0, 4, 5, 10, 16, 18, 24, 27, 30, 30, 35]> : tensor<11xindex>
        %col_ind = arith.constant dense<[1, 4, 7, 8, 1, 0, 1, 2, 4, 8, 1, 3, 4, 5, 7, 9, 3, 5, 1, 2, 3, 5, 7, 8, 2, 6, 7, 0, 4, 5, 0, 2, 6, 7, 8]> : tensor<35xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<35xindex>), tensor<35xf64> -> tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }

}
