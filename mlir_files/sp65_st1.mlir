// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @matmul(%t : tensor<10x10xf64, #CSR>, %s : tensor<10x10xf64>, %out : tensor<10x10xf64>)
        -> tensor<10x10xf64> {
        %0 = linalg.matmul
            ins(%t, %s: tensor<10x10xf64, #CSR>, tensor<10x10xf64>)
            outs(%out: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %0 : tensor<10x10xf64>
    }

    func.func @main() -> i64 {
        %c = tensor.empty() : tensor<10x10xf64>
        %t_sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %s = arith.constant dense<[
            [[1.391897, 8.626717, 5.863493, 5.114910, 6.908864, 4.450482, 2.578081, 1.580351, 9.460343, 1.831308], [8.115289, 2.008274, 0.434887, 6.922117, 5.719862, 5.600971, 0.044311, 6.257996, 4.020457, 7.940317], [7.882262, 2.794076, 5.617928, 4.857194, 0.022220, 2.589646, 9.235616, 8.995117, 9.929633, 6.151997], [4.544798, 8.446115, 8.781067, 4.075954, 8.787514, 1.928715, 9.220704, 4.271824, 6.720521, 5.918619], [3.619513, 4.754174, 6.531393, 9.108285, 7.315580, 0.040754, 6.360041, 6.400017, 5.345856, 6.383978], [4.749057, 2.084838, 9.029253, 6.786355, 3.180953, 5.621971, 4.720182, 9.576642, 6.666814, 2.880861], [1.524507, 9.484285, 3.533003, 2.496438, 4.636518, 7.892234, 1.037523, 9.281254, 7.526891, 5.252985], [2.815318, 8.392077, 8.282628, 1.465428, 9.524834, 4.593082, 3.730373, 8.843756, 8.884566, 9.694456], [3.144373, 0.031803, 9.673668, 6.531096, 7.749978, 1.309258, 0.685989, 1.311990, 8.546265, 5.831513], [0.719348, 3.185354, 6.691184, 4.327114, 1.020963, 2.981894, 3.447200, 5.174195, 5.866648, 3.910240]]
        ]> : tensor<10x10xf64>
        %result_matrix = call @matmul(%t_sparse, %s, %c) :
            (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %c1 = arith.constant 1 : index

        %element_f64 = tensor.extract %result_matrix[%c1, %c1] : tensor<10x10xf64>
        %element_i64 = arith.fptosi %element_f64 : f64 to i64
        return %element_i64 : i64
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[0.816378, 0.546542, 0.398424, 7.716690, 7.849145, 9.268377, 7.539024, 9.474172, 7.089262, 0.475069, 5.840450, 5.271090, 4.342894, 9.411709, 9.304904, 6.994113, 6.459613, 6.683849, 8.675068, 3.827208, 5.558210, 5.537681, 2.498035, 4.169251, 8.591045, 2.746523, 4.036211, 3.687385, 2.180906, 9.621236, 0.346282, 4.628259, 5.782521, 3.552003, 2.259719]> : tensor<35xf64>
        %row_ptr = arith.constant dense<[0, 4, 6, 9, 10, 14, 20, 24, 29, 31, 35]> : tensor<11xindex>
        %col_ind = arith.constant dense<[1, 2, 4, 7, 0, 9, 3, 5, 9, 0, 1, 2, 7, 9, 0, 2, 3, 5, 7, 9, 0, 3, 4, 9, 0, 4, 5, 7, 9, 2, 5, 4, 5, 7, 9]> : tensor<35xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<35xindex>), tensor<35xf64> to tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }
    
}
