// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @matmul(%t : tensor<10x10xf64, #CSR>, %s : tensor<10x10xf64>, %out : tensor<10x10xf64>)
        -> tensor<10x10xf64> {
        %0 = linalg.matmul
            ins(%t, %s: tensor<10x10xf64, #CSR>, tensor<10x10xf64>)
            outs(%out: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %0 : tensor<10x10xf64>
    }

    func.func @main() -> i64 {
        %c = tensor.empty() : tensor<10x10xf64>
        %t_sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %s = arith.constant dense<[
            [1.243611553594124, 8.577115886960147, 3.252449733278274, 3.096186587247549, 5.116106120890697, 7.546099676345806, 5.799907253387665, 4.609924195636133, 2.6259829757161746, 2.200224934654813], [2.0601767077126185, 9.394830695266737, 4.776921169015672, 7.131707496993327, 1.34522952332491, 0.109974986074306, 2.0160002994730872, 6.968288210853153, 0.801748732322114, 0.7164971651214513], [8.87502367127599, 8.841093450778201, 6.752945933298604, 5.207543398472948, 6.523490592949712, 1.9693504183307609, 5.182241603328772, 4.738658688661861, 1.097210494547145, 7.32930653808168], [9.140363113071167, 2.409401563915665, 1.813365963808815, 1.687792879244876, 5.707159804512086, 0.47551437889348236, 6.835569226992622, 8.686072336240326, 0.24137041609566978, 9.996620037283122], [4.409062562345165, 0.08381047985958845, 1.1095794204692067, 5.864396956061566, 5.876730658647574, 6.350109362068245, 2.44671664923368, 7.434784790550978, 5.915337225505986, 0.7557349040312988], [9.686748754620792, 9.916930428899677, 7.1416894691102915, 7.587578125944429, 9.514031308390544, 4.667821742963259, 4.105983003551317, 2.8346826177482507, 3.1800636277953496, 7.047204657918932], [3.314692055100389, 7.615657663426161, 8.314543830024943, 8.097455606322761, 8.909904165656297, 9.756448739799538, 9.37679440012765, 4.683158688364766, 5.959154001627034, 6.382274343560123], [9.855179484322221, 1.6917699620275417, 5.769174912566352, 5.414664171706885, 4.410946299938252, 4.5581522369118925, 6.075722397938962, 1.5096028946658824, 5.582479747573528, 2.4480490389073264], [8.353914766623069, 7.525482722066629, 7.928713032172171, 5.949606195835439, 9.357492526864235, 7.2199606831056204, 0.4643918924260848, 6.4351890137183485, 4.991230449841597, 2.665321137994728], [0.29725092961643274, 9.527722658183064, 5.611686162141241, 9.14737486739827, 3.392126631474924, 3.5110240786241764, 0.40195978475617733, 7.03830618137591, 6.799882854811523, 2.5877676276559933]
        ]> : tensor<10x10xf64>
        %result_matrix = call @matmul(%t_sparse, %s, %c) :
            (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %c1 = arith.constant 1 : index
        %element_f64 = tensor.extract %result_matrix[%c1, %c1] : tensor<10x10xf64>
        %element_i64 = arith.fptosi %element_f64 : f64 to i64
        return %element_i64 : i64
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[6.157265, 9.292379, 2.407568, 3.051673, 0.598393, 5.364265, 9.946445, 9.816867, 6.482981, 1.613798, 7.506176, 9.583722, 4.728643, 0.380205, 0.407399, 3.375233, 3.384821, 9.869600, 8.746929, 6.332779, 8.768262, 0.188449, 7.989385, 7.516174, 9.489908, 6.818917, 9.123661, 4.443996, 5.388102, 6.201231, 7.290942, 1.552765, 2.982304, 3.152725, 0.709756]> : tensor<35xf64>
        %row_ptr = arith.constant dense<[0, 3, 7, 11, 14, 18, 22, 26, 28, 33, 35]> : tensor<11xindex>
        %col_ind = arith.constant dense<[1, 7, 9, 1, 4, 6, 8, 1, 3, 6, 8, 2, 3, 8, 0, 3, 6, 8, 3, 5, 6, 9, 3, 4, 7, 9, 6, 7, 2, 3, 5, 7, 9, 4, 7]> : tensor<35xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<35xindex>), tensor<35xf64> to tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }
    
}
