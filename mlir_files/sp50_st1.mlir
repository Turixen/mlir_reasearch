// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @sparse_dense_matmul(%sparse: tensor<10x10xf64, #CSR>,%dense: tensor<10x10xf64>,%init: tensor<10x10xf64>
    ) -> tensor<10x10xf64> {
        %res = linalg.matmul ins(%sparse, %dense: tensor<10x10xf64, #CSR>, tensor<10x10xf64>) 
            outs(%init: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %res : tensor<10x10xf64>
    }

    func.func @main() -> i32 {
        %c0 = arith.constant 0 : index
        %c1 = arith.constant 1 : index
        %rows = arith.constant 10 : index
        %cols = arith.constant 10 : index
        %zero_f64 = arith.constant 0.0 : f64

        %init = tensor.empty() : tensor<10x10xf64>
        %sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %dense = arith.constant dense<[[5.656905, 5.663121, 2.132020, 8.360570, 1.286908, 2.402484, 5.963619, 6.776487, 6.685506, 8.443465], [2.790821, 2.425134, 0.126159, 2.672998, 7.500237, 9.684576, 6.694289, 6.379398, 1.331424, 6.892815], [9.476233, 5.297311, 3.584692, 2.811402, 6.074418, 7.784840, 3.337561, 1.197967, 5.860829, 4.459006], [4.965218, 3.274486, 6.563662, 8.258183, 5.972528, 4.648254, 5.637197, 9.193212, 8.154508, 3.243698], [9.574672, 0.189486, 8.008580, 2.862540, 2.959842, 7.948789, 7.376314, 7.405014, 5.820683, 4.661360], [9.373496, 3.503428, 5.416670, 2.856320, 2.726961, 4.566489, 4.013835, 0.975473, 3.546704, 5.359339], [3.969121, 7.429558, 6.169069, 8.735432, 9.451058, 9.080372, 2.887558, 9.075724, 2.821817, 8.052680], [4.658959, 6.125094, 0.240053, 1.555068, 8.449737, 9.666465, 0.201825, 2.352807, 2.516601, 3.004071], [5.623840, 1.830971, 2.583686, 3.273746, 3.175810, 2.808891, 8.673782, 6.911346, 6.799605, 6.703556], [0.682484, 5.954936, 5.991429, 4.628131, 0.059909, 8.737428, 6.138378, 8.741717, 8.297344, 5.921812]]> : tensor<10x10xf64>

        %computed = call @sparse_dense_matmul(%sparse, %dense, %init) : (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %expected = arith.constant dense<[[56.466338, 83.982601, 49.196257, 88.989961, 90.708688, 94.753385, 38.251679, 88.636213, 46.086332, 88.399118], [170.124155, 133.053807, 129.590691, 186.419561, 160.952390, 158.797386, 167.247854, 211.827186, 182.027325, 184.785126], [171.706115, 139.643159, 125.453607, 114.288373, 148.801918, 280.436874, 198.598555, 198.383416, 189.532561, 196.082357], [220.103781, 100.663198, 135.091704, 125.239670, 154.888818, 183.571875, 173.483886, 168.766913, 196.739353, 145.546979], [35.327024, 25.981381, 39.275485, 57.300677, 34.831275, 29.053761, 39.470817, 60.273981, 54.400815, 29.672267], [186.179574, 162.167855, 198.335192, 197.582107, 143.271779, 264.520835, 200.120177, 263.560077, 233.835199, 203.947117], [156.422658, 47.754727, 95.428127, 73.203398, 107.622021, 180.909701, 145.263469, 137.899840, 98.795628, 128.228311], [151.421650, 117.515934, 115.321930, 138.980802, 160.605166, 162.471106, 119.838034, 160.639603, 136.183914, 141.013809], [254.712539, 180.315023, 164.789623, 201.346316, 196.099607, 231.806024, 163.598551, 179.473623, 177.077757, 225.040307], [198.255585, 133.722637, 99.741976, 89.195750, 117.374067, 179.345383, 94.948253, 70.447326, 129.146370, 135.714997]]> : tensor<10x10xf64>

        // Validate each element
        %false = arith.constant "false" : i1
        %flag = scf.for %i = %c0 to %rows step %c1 iter_args(%f_iter = %false) -> (i1) {
            %flag_row = scf.for %j = %c0 to %cols step %c1 iter_args(%f_in = %f_iter) -> (i1) {
                %cmp_c = tensor.extract %computed[%i, %j] : tensor<10x10xf64>
                %cmp_e = tensor.extract %expected[%i, %j] : tensor<10x10xf64>
                %neq = arith.cmpf une, %cmp_c, %cmp_e : f64
                %new_f = arith.or %f_in, %neq : i1
                scf.yield %new_f : i1
            }
            scf.yield %flag_row : i1
        }

        %zero_i32 = arith.constant 0 : i32
        %one_i32 = arith.constant 1 : i32
        %status = scf.if %flag -> (i32) {
            scf.yield %one_i32 : i32
        } else {
            scf.yield %zero_i32 : i32
        }
        return %status : i32
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[3.018403, 6.828888, 2.637250, 4.162749, 4.207276, 6.616208, 6.599747, 0.212121, 8.299025, 8.079141, 8.878196, 3.192726, 1.454313, 3.768666, 9.505812, 9.153133, 6.823309, 4.467929, 2.283734, 8.191656, 1.388758, 5.532678, 3.582827, 1.666840, 5.364877, 6.039760, 5.991145, 4.146081, 9.689483, 1.892077, 7.553403, 3.181158, 9.869138, 1.881177, 6.058412, 3.375052, 5.693920, 3.806519, 5.608897, 5.530915, 3.055821, 7.824347, 4.423440, 9.735055, 6.937621, 2.554771, 7.648015, 9.188993, 5.019333, 2.653912]> : tensor<50xf64>
        %row_ptr = arith.constant dense<[0, 3, 9, 15, 20, 22, 29, 33, 39, 45, 50]> : tensor<11xindex>
        %col_ind = arith.constant dense<[0, 6, 7, 0, 2, 3, 6, 7, 8, 1, 2, 4, 7, 8, 9, 2, 3, 4, 7, 8, 0, 3, 0, 1, 2, 3, 4, 6, 9, 0, 1, 2, 4, 2, 3, 5, 6, 7, 8, 0, 1, 2, 3, 5, 6, 0, 2, 5, 7, 9]> : tensor<50xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<50xindex>), tensor<50xf64> -> tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }

}
