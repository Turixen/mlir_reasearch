// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @sparse_dense_matmul(%sparse: tensor<10x10xf64, #CSR>,%dense: tensor<10x10xf64>,%init: tensor<10x10xf64>
    ) -> tensor<10x10xf64> {
        %res = linalg.matmul ins(%sparse, %dense: tensor<10x10xf64, #CSR>, tensor<10x10xf64>) 
            outs(%init: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %res : tensor<10x10xf64>
    }

    func.func @main() -> i32 {
        %c0 = arith.constant 0 : index
        %c1 = arith.constant 1 : index
        %rows = arith.constant 10 : index
        %cols = arith.constant 10 : index
        %zero_f64 = arith.constant 0.0 : f64

        %init = tensor.empty() : tensor<10x10xf64>
        %sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %dense = arith.constant dense<[[7.791135, 8.628164, 2.176317, 9.823809, 7.244090, 8.315170, 8.581410, 0.468318, 1.531931, 1.331945], [1.022253, 8.789018, 6.593094, 8.731300, 2.130573, 5.913057, 2.054630, 7.326251, 1.672638, 8.539878], [2.427101, 9.401314, 4.677196, 3.511533, 5.970715, 4.553294, 7.999380, 8.982632, 2.351270, 2.282489], [3.462114, 0.413063, 3.702985, 6.584235, 8.299600, 5.297403, 2.820389, 6.505455, 1.574451, 1.134112], [2.351596, 8.142855, 2.692757, 3.634327, 0.471768, 9.600185, 7.665762, 6.360267, 7.502330, 8.429141], [5.929470, 0.593761, 9.989572, 0.582455, 5.802086, 7.104443, 9.310310, 8.748688, 4.295288, 8.086404], [5.018961, 5.960974, 3.587096, 6.845107, 7.868593, 9.583569, 6.235496, 0.712839, 1.756804, 0.439189], [4.628646, 9.120241, 0.325703, 4.911019, 0.940969, 3.060784, 2.659390, 5.606781, 5.548013, 1.687275], [1.604235, 1.822554, 4.053960, 4.269401, 0.237174, 3.868280, 2.220223, 9.333388, 7.300984, 5.270592], [7.975335, 8.335696, 4.943486, 4.101608, 0.318250, 3.417334, 9.451531, 2.528586, 4.733404, 0.794684]]> : tensor<10x10xf64>

        %computed = call @sparse_dense_matmul(%sparse, %dense, %init) : (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %expected = arith.constant dense<[[23.263441, 51.646687, 54.537287, 68.131312, 9.009555, 54.632057, 28.993849, 111.137189, 77.721817, 72.471196], [217.943939, 231.301763, 242.247093, 244.026003, 200.781049, 266.089298, 274.071943, 213.078521, 122.689507, 164.329963], [72.488187, 125.584511, 67.971439, 72.388820, 9.081197, 101.198087, 119.462674, 85.950982, 95.178220, 82.953701], [55.992478, 58.805168, 73.236973, 73.301534, 42.862225, 89.544447, 68.777897, 122.394994, 96.001040, 73.330267], [86.621187, 122.115922, 95.612824, 61.190687, 50.145586, 148.770561, 145.719355, 146.114117, 124.013228, 138.449399], [176.789398, 254.302628, 223.955012, 230.421013, 189.116985, 242.380636, 220.816029, 293.253066, 144.989364, 190.748087], [204.868076, 263.555423, 117.076203, 221.948889, 154.496486, 269.381125, 272.655506, 82.094991, 125.009225, 83.933250], [166.961271, 176.934579, 172.767059, 209.487246, 206.719037, 244.983229, 190.436796, 220.850827, 126.200656, 134.630397], [111.182467, 202.289074, 98.349466, 109.028549, 26.754714, 147.601235, 181.456045, 119.868814, 125.983889, 110.120142], [88.337992, 166.003162, 110.489252, 121.046203, 25.610630, 89.374133, 115.069529, 95.886590, 62.580941, 86.406337]]> : tensor<10x10xf64>

        // Validate each element
        %false = arith.constant "false" : i1
        %flag = scf.for %i = %c0 to %rows step %c1 iter_args(%f_iter = %false) -> (i1) {
            %flag_row = scf.for %j = %c0 to %cols step %c1 iter_args(%f_in = %f_iter) -> (i1) {
                %cmp_c = tensor.extract %computed[%i, %j] : tensor<10x10xf64>
                %cmp_e = tensor.extract %expected[%i, %j] : tensor<10x10xf64>
                %neq = arith.cmpf une, %cmp_c, %cmp_e : f64
                %new_f = arith.ori %f_in, %neq : i1
                scf.yield %new_f : i1
            }
            scf.yield %flag_row : i1
        }

        %zero_i32 = arith.constant 0 : i32
        %one_i32 = arith.constant 1 : i32
        %status = scf.if %flag -> (i32) {
            scf.yield %one_i32 : i32
        } else {
            scf.yield %zero_i32 : i32
        }
        return %status : i32
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[2.644657, 1.306378, 9.046788, 3.950008, 8.691743, 7.259530, 8.228651, 5.410515, 9.680309, 1.647975, 6.481824, 1.703813, 6.623872, 2.465874, 3.059542, 2.472319, 9.083423, 8.566662, 7.089932, 5.279368, 9.754143, 3.690024, 7.670086, 8.775208, 2.789073, 9.492615, 2.675611, 9.418342, 0.417640, 6.886776, 9.772582, 0.414124, 8.041683, 0.983759, 3.778313, 9.872144, 1.146626, 7.315963, 7.507397, 7.801064, 0.867648, 2.749526, 1.505503, 8.722913, 0.472244, 1.072471, 9.638557, 9.067853, 0.533846, 9.751648]> : tensor<50xf64>
        %row_ptr = arith.constant dense<[0, 3, 9, 13, 17, 20, 27, 33, 41, 47, 50]> : tensor<11xindex>
        %col_ind = arith.constant dense<[1, 7, 8, 0, 1, 3, 5, 6, 9, 1, 4, 8, 9, 5, 6, 7, 8, 4, 5, 7, 1, 2, 3, 5, 6, 7, 9, 0, 3, 4, 6, 8, 9, 0, 1, 3, 4, 5, 6, 7, 8, 1, 2, 4, 6, 7, 9, 1, 2, 9]> : tensor<50xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<50xindex>), tensor<50xf64> -> tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }

}
