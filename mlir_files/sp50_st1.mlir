// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @matmul(%t : tensor<10x10xf64, #CSR>, %s : tensor<10x10xf64>, %out : tensor<10x10xf64>)
        -> tensor<10x10xf64> {
        %0 = linalg.matmul
            ins(%t, %s: tensor<10x10xf64, #CSR>, tensor<10x10xf64>)
            outs(%out: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %0 : tensor<10x10xf64>
    }

    func.func @main() -> i64 {
        %c = tensor.empty() : tensor<10x10xf64>
        %t_sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %s = arith.constant dense<[
            [4.981027375359436, 9.353250348034344, 5.738085670654885, 9.725877822277, 7.9543728465003385, 4.578629592870343, 2.7218627348107605, 4.86010828152792, 2.8353701233174746, 4.639692927556958], [8.785200750133665, 5.144434378136539, 6.377905577068889, 1.837932000133773, 7.396311461450006, 4.542048003394981, 4.541780642557059, 9.118090204658907, 9.622483273037773, 0.9134358212909699], [6.760632675621832, 6.336548147129339, 7.561396738215828, 5.033148663280501, 9.179734117494547, 1.1675249613413996, 6.272183051111208, 2.5151511441582253, 9.135692025290734, 7.352414033106386], [2.0119001703269146, 6.086744045929784, 9.28401285369265, 2.1094280038385147, 5.915990171089263, 0.9986650826190502, 9.130715623722468, 1.8382325776381014, 0.3609860677452015, 8.848783836205957], [4.128669195892609, 5.8847269691814, 9.565273348444132, 3.7731743689850528, 8.654818791172634, 4.80815553432698, 5.785703099323295, 2.929902632757664, 2.311833627851132, 5.560225422164899], [6.275371117223757, 3.017864891706518, 7.382590997294143, 4.151217970650263, 6.1881233400351405, 2.099719461635555, 8.207745010279572, 0.570221953280059, 0.053396794102720246, 8.756250919643511], [8.30244065370342, 3.7120285672736353, 8.85226781973593, 1.2286168041645984, 3.4047697448373073, 7.305889481681623, 9.413159426725901, 1.1677895311757869, 1.4133045511445996, 8.219646077227083], [5.084602928634501, 3.3620929878926855, 1.5142472507514093, 7.26490271830704, 0.8521121347602156, 7.062069370901284, 4.114459072813518, 3.771913778913154, 6.052711782329458, 9.105461182940772], [8.725345149214792, 2.796422600232822, 0.9141403301382323, 4.666431767605744, 8.621980287327796, 3.3753043017141557, 5.949113455921864, 1.3328487844006598, 4.905330115642576, 5.6224298834755455], [9.443691314068358, 3.5605451703510074, 7.785497005751649, 0.3740569323777776, 1.2911400389605943, 7.369851455455377, 4.470464450213909, 4.52412474796988, 3.3885864194535054, 1.8471388309082415]
        ]> : tensor<10x10xf64>
        %result_matrix = call @matmul(%t_sparse, %s, %c) :
            (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %c1 = arith.constant 1 : index
        %element_f64 = tensor.extract %result_matrix[%c1, %c1] : tensor<10x10xf64>
        %element_i64 = arith.fptosi %element_f64 : f64 to i64
        return %element_i64 : i64
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[8.600719, 5.616506, 9.126475, 5.392684, 3.482418, 1.662494, 7.898316, 9.876233, 9.482955, 3.843078, 7.349867, 6.586163, 7.942875, 0.655058, 6.591221, 0.569931, 5.634081, 1.303224, 3.849237, 0.127880, 3.071117, 7.612810, 9.446992, 4.075279, 5.285112, 2.874585, 4.376075, 5.264341, 8.532748, 3.292754, 4.326837, 9.088008, 0.187688, 8.261076, 6.669790, 2.016341, 8.690467, 2.090977, 5.883605, 3.543278, 5.856632, 9.324202, 6.314149, 7.724615, 0.301549, 8.807625, 8.289164, 6.162885, 6.552900, 4.609708]> : tensor<50xf64>
        %row_ptr = arith.constant dense<[0, 7, 11, 15, 22, 25, 27, 35, 41, 46, 50]> : tensor<11xindex>
        %col_ind = arith.constant dense<[0, 1, 2, 4, 6, 8, 9, 0, 3, 4, 9, 3, 6, 8, 9, 1, 2, 4, 5, 6, 7, 9, 0, 3, 4, 1, 6, 0, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 6, 0, 2, 6, 7, 9, 2, 3, 5, 6]> : tensor<50xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<50xindex>), tensor<50xf64> to tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }
    
}
