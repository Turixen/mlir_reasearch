// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @matmul(%t : tensor<10x10xf64, #CSR>, %s : tensor<10x10xf64>, %out : tensor<10x10xf64>)
        -> tensor<10x10xf64> {
        %0 = linalg.matmul
            ins(%t, %s: tensor<10x10xf64, #CSR>, tensor<10x10xf64>)
            outs(%out: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %0 : tensor<10x10xf64>
    }

    func.func @main() -> i64 {
        %c = tensor.empty() : tensor<10x10xf64>
        %t_sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %s = arith.constant dense<[
            [7.8863730340553895, 6.054237276768985, 5.020534036948368, 7.687845555538062, 3.2623103708893417, 6.670615945404936, 9.482814313283612, 1.9883762169765196, 9.301055073172677, 8.42219286774736], [6.573746755992932, 1.7680879730256605, 6.968237306447522, 0.04325890810370048, 3.659780259904056, 5.82831848175296, 1.5694767215236038, 1.355165520031092, 8.99519678871206, 2.9514645845205365], [5.01250986155796, 1.30044720619514, 1.4478625867570472, 9.88785285741606, 1.1891680869443533, 4.277664700858937, 5.292336339698581, 0.1750849355824724, 9.121067968570925, 0.7681608934285233], [7.818699244580766, 8.461092779686028, 8.476695460421038, 5.3683888046234784, 5.595291681456628, 6.213788257699654, 9.773491262344237, 4.951377075433343, 9.418561516182672, 7.696486990802953], [8.66354469112888, 7.691462584794041, 1.3647586884592666, 5.024213383416228, 9.984309786576748, 0.34332211576365346, 3.0903463692874675, 5.874129911832049, 0.015685181678520843, 1.9439969414412406], [0.560258093921836, 7.597595688565716, 8.172338158327415, 6.380976563482729, 7.181403001253259, 9.832781315560288, 1.9004716186388537, 7.375613055742422, 2.8700759005232745, 9.799065888076194], [9.041375607004232, 0.21633469045615472, 0.3458049457133905, 8.534694170810834, 4.496119870755044, 4.571989918489075, 8.235177522177214, 4.891054816923162, 8.657947166813871, 4.2517261228216405], [1.2804803688854138, 8.062193657191418, 2.6331014891361315, 3.0378794841706567, 4.1317539182316505, 7.595848408432887, 1.5433811888863858, 4.484928721846523, 5.780728616337444, 9.296103550028084], [9.352489422681447, 4.381620394220926, 7.916099464892664, 1.1000019376121961, 4.83556330514374, 1.620470533759899, 0.6774536095286032, 3.248377168571983, 2.1905942107608354, 8.875436732338853], [2.016935860639414, 1.7749122405988482, 3.7966756235038934, 4.584489112197948, 6.773589969670857, 0.7512069491496587, 4.027386196345146, 7.618603191301865, 3.1854687099795296, 3.8599835192340937]
        ]> : tensor<10x10xf64>
        %result_matrix = call @matmul(%t_sparse, %s, %c) :
            (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %c1 = arith.constant 1 : index

        %element_f64 = tensor.extract %result_matrix[%c1, %c1] : tensor<10x10xf64>
        %element_i64 = arith.fptosi %element_f64 : f64 to i64
        return %element_i64 : i64
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[5.521119, 7.565416, 7.445416, 7.836179, 7.059143, 1.539561, 9.940655, 1.751697, 6.355983, 6.540268, 0.587631, 2.702475, 3.492086, 6.118717, 2.247141, 4.421128, 2.468066, 0.830840, 8.070630, 4.621377, 8.118975, 9.882973, 1.338828, 0.410173, 1.073819, 4.028803, 6.647151, 9.667441, 1.552635, 3.459174, 2.189507, 5.695810, 3.057156, 1.333203, 5.379864, 4.403842, 6.441150, 0.673003, 0.923327, 7.150315, 6.253840, 2.698129, 2.778498, 1.587070, 4.967488, 5.031065, 3.403309, 3.548116, 2.784697, 3.713956]> : tensor<50xf64>
        %row_ptr = arith.constant dense<[0, 4, 9, 13, 18, 25, 30, 36, 41, 47, 50]> : tensor<11xindex>
        %col_ind = arith.constant dense<[4, 7, 8, 9, 1, 2, 5, 6, 9, 0, 3, 4, 9, 0, 1, 2, 5, 7, 0, 1, 2, 3, 4, 5, 9, 0, 2, 4, 8, 9, 1, 2, 4, 5, 7, 8, 0, 2, 3, 6, 8, 0, 1, 3, 6, 7, 8, 3, 5, 9]> : tensor<50xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<50xindex>), tensor<50xf64> to tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }
    
}
