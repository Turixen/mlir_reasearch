// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @sparse_dense_matmul(%sparse: tensor<10x10xf64, #CSR>,%dense: tensor<10x10xf64>,%init: tensor<10x10xf64>
    ) -> tensor<10x10xf64> {
        %res = linalg.matmul ins(%sparse, %dense: tensor<10x10xf64, #CSR>, tensor<10x10xf64>) 
            outs(%init: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %res : tensor<10x10xf64>
    }

    func.func @main() -> i32 {
        %c0 = arith.constant 0 : index
        %c1 = arith.constant 1 : index
        %rows = arith.constant 10 : index
        %cols = arith.constant 10 : index
        %zero_f64 = arith.constant 0.0 : f64

        %init = tensor.empty() : tensor<10x10xf64>
        %sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %dense = arith.constant dense<[[2.917339, 8.584155, 5.283309, 8.603213, 8.186416, 6.046740, 2.383109, 3.820200, 2.274721, 2.255348], [5.465322, 3.288717, 6.134858, 4.276578, 5.026926, 8.913558, 3.225383, 5.863140, 8.390936, 7.605859], [3.010365, 5.416012, 4.174375, 2.462239, 7.773412, 8.844856, 7.107181, 1.796918, 1.114145, 1.994383], [8.191009, 7.107981, 2.132793, 8.613807, 2.754449, 2.458722, 5.941726, 4.797446, 3.178622, 9.684230], [3.134007, 4.760817, 3.181774, 5.255832, 7.325734, 0.040836, 1.973528, 1.820289, 3.004289, 5.650855], [0.779268, 7.643078, 8.131850, 9.776356, 6.908670, 9.951416, 3.760297, 2.360347, 1.607486, 6.947182], [3.808828, 8.602919, 1.906398, 5.518946, 4.024934, 0.436287, 0.502051, 8.876587, 7.533622, 0.266803], [6.338399, 7.454717, 8.818075, 9.104252, 7.775453, 9.143033, 5.772984, 9.408077, 1.609375, 6.282664], [0.085814, 6.290407, 7.677174, 5.163961, 2.258002, 5.753620, 0.096792, 1.983167, 3.326663, 7.960315], [3.874978, 5.453489, 1.746117, 1.138621, 3.736012, 5.364172, 0.527111, 9.295116, 6.905492, 7.835463]]> : tensor<10x10xf64>

        %computed = call @sparse_dense_matmul(%sparse, %dense, %init) : (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %expected = arith.constant dense<[[172.984067, 212.402913, 161.354993, 216.953469, 204.038866, 158.601162, 128.921748, 199.994184, 140.580731, 187.600890], [57.647441, 93.930854, 91.982225, 100.017797, 97.785868, 134.213023, 77.435490, 55.145533, 54.941582, 98.684966], [134.517447, 151.634151, 162.439994, 136.285040, 178.407162, 233.812615, 130.040830, 176.439199, 111.392588, 157.428055], [47.706102, 105.113596, 78.850683, 79.919804, 113.122054, 121.970626, 64.388084, 71.401527, 56.047874, 97.753290], [73.663540, 106.796613, 106.588024, 78.012410, 89.105000, 136.262707, 31.492958, 123.405033, 134.784640, 166.467191], [163.638245, 240.305261, 168.616079, 237.226085, 259.309728, 195.234051, 162.804520, 141.030947, 99.606201, 185.761341], [123.228748, 141.739167, 63.481656, 146.521396, 76.681441, 60.225237, 82.004296, 127.891919, 76.139701, 119.168863], [50.267082, 109.433731, 60.321550, 82.363162, 101.447503, 80.747144, 54.223930, 71.334133, 50.135778, 27.779376], [104.677564, 226.316571, 218.631188, 231.928350, 184.498007, 258.558702, 97.716493, 146.506201, 141.440670, 241.352564], [154.204445, 283.293928, 155.014973, 264.940632, 185.658262, 110.675513, 91.323764, 177.956452, 160.692072, 214.504209]]> : tensor<10x10xf64>

        // Validate each element
        %false = arith.constant false : i1
        %flag = scf.for %i = %c0 to %rows step %c1 iter_args(%f_iter = %false) -> (i1) {
            %flag_row = scf.for %j = %c0 to %cols step %c1 iter_args(%f_in = %f_iter) -> (i1) {
                %cmp_c = tensor.extract %computed[%i, %j] : tensor<10x10xf64>
                %cmp_e = tensor.extract %expected[%i, %j] : tensor<10x10xf64>
                %neq = arith.cmpf une, %cmp_c, %cmp_e : f64
                %new_f = arith.or %f_in, %neq : i1
                scf.yield %new_f : i1
            }
            scf.yield %flag_row : i1
        }

        %zero_i32 = arith.constant 0 : i32
        %one_i32 = arith.constant 1 : i32
        %status = scf.if %flag -> (i32) {
            scf.yield %one_i32 : i32
        } else {
            scf.yield %zero_i32 : i32
        }
        return %status : i32
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[5.116354, 2.576239, 4.657720, 7.916186, 5.684133, 8.307370, 4.105343, 4.337906, 2.189406, 5.413151, 7.517963, 7.300306, 8.998222, 3.720913, 0.105065, 5.386385, 2.701438, 4.756569, 4.837172, 7.363598, 1.754520, 5.662050, 7.079922, 8.542033, 2.170752, 8.488141, 5.982657, 9.150073, 3.726745, 9.750998, 5.198475, 3.716734, 4.384437, 5.184028, 0.343644, 4.275413, 0.711392, 5.132871, 7.056010, 1.092754, 2.945278, 7.986076, 0.893697, 7.753529, 2.883171, 6.144608, 9.519419, 7.530841, 8.931472, 7.979473]> : tensor<50xf64>
        %row_ptr = arith.constant dense<[0, 6, 10, 14, 19, 23, 29, 32, 37, 45, 50]> : tensor<11xindex>
        %col_ind = arith.constant dense<[1, 2, 3, 4, 6, 7, 1, 2, 3, 5, 1, 2, 7, 9, 1, 2, 4, 5, 9, 1, 4, 8, 9, 0, 1, 2, 3, 4, 7, 3, 6, 7, 0, 2, 4, 6, 7, 0, 1, 2, 3, 5, 7, 8, 9, 0, 3, 4, 6, 8]> : tensor<50xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<50xindex>), tensor<50xf64> -> tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }

}
