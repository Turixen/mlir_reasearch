// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @matmul(%t : tensor<10x10xf64, #CSR>, %s : tensor<10x10xf64>, %out : tensor<10x10xf64>)
        -> tensor<10x10xf64> {
        %0 = linalg.matmul
            ins(%t, %s: tensor<10x10xf64, #CSR>, tensor<10x10xf64>)
            outs(%out: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %0 : tensor<10x10xf64>
    }

    func.func @main() -> i64 {
        %c = tensor.empty() : tensor<10x10xf64>
        %t_sparse = call @test_assemble() : () -> tensor<10x10xf64, #CSR>
        %s = arith.constant dense<[
            [9.497253369362909, 7.85786229756464, 5.216032191425483, 4.377363394845616, 3.900769357266004, 9.918186060313673, 8.85378929232324, 3.303097042941172, 7.686780931173592, 9.03984845756283], [8.868581712799342, 5.048050320964955, 0.3732350339547663, 8.400212005832184, 5.710336379045623, 0.5905538082601469, 4.265038524582455, 2.5903487423546734, 4.499168859007817, 6.352044002291024], [5.4128348592772335, 2.702450846588529, 1.6300543841111526, 0.9537188711265709, 4.278295832362465, 5.239774724454392, 7.96128586583699, 9.815559682321759, 6.126381706891532, 5.533714537982975], [7.799743329375179, 8.339432176772881, 8.859168722198294, 6.807426670348597, 4.732343871817454, 9.324340493710114, 6.909020143086798, 5.619040853011645, 6.794336095103666, 9.961638596913424], [8.682880983601653, 2.3809877245688895, 9.725904256101805, 7.87804194038968, 5.954416557506636, 3.6888901165112484, 6.555106754902397, 8.17288625041397, 4.530978675388933, 8.618474318856688], [6.865980574558438, 3.013409307869084, 8.442703089552689, 5.2580787606048185, 6.0068624312932215, 1.2096373305415875, 5.900286071975812, 6.50990000576673, 1.8612891223786865, 0.8785543438062837], [1.7889246799966163, 7.041948797784871, 6.263913010267363, 2.711989758411896, 0.6981084925545555, 2.115413233506308, 6.323905869162358, 5.883692471537825, 1.691236428430859, 5.766982632687068], [2.405505323920881, 5.750695171025589, 6.602417310148385, 4.8989461014943565, 8.868481665420175, 8.356077630873974, 2.9466362023481385, 4.269770717010798, 6.9560562811044955, 4.345135908306204], [3.1854727960238574, 7.157619290781314, 0.320288958922601, 5.514541682766562, 3.848806902932097, 4.581873661573792, 5.5763263630324476, 0.9570561421779189, 5.658759314043499, 3.2360094794153325], [9.109820745280652, 9.871668187555118, 7.579149850949803, 0.6919823241549394, 2.801484913203921, 4.37885369223638, 1.567952528516967, 4.94629737955131, 9.764965712311454, 1.225971675882911]
        ]> : tensor<10x10xf64>
        %result_matrix = call @matmul(%t_sparse, %s, %c) :
            (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %c1 = arith.constant 1 : index
        %element_f64 = tensor.extract %result_matrix[%c1, %c1] : tensor<10x10xf64>
        %element_i64 = arith.fptosi %element_f64 : f64 to i64
        return %element_i64 : i64
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[0.908889, 0.697613, 8.052232, 6.109168, 3.656354, 4.727250, 7.818777, 6.311699, 8.328673, 5.455042, 2.368462, 2.341319, 7.739100, 1.127896, 0.337130, 6.325407, 1.302549, 6.675252, 7.439345, 7.045346, 1.508079, 2.172285, 0.584219, 9.025835, 3.681238, 3.105893, 8.013131, 8.297481, 7.962501, 5.032674, 5.152907, 1.986039, 8.728055, 0.397656, 1.359173, 6.130383, 5.999933, 0.089670, 0.626766, 2.106105, 1.552477, 3.376351, 3.720852, 3.028788, 3.824832, 5.105249, 3.770867, 4.726201, 8.659881, 8.897615]> : tensor<50xf64>
        %row_ptr = arith.constant dense<[0, 7, 10, 13, 20, 25, 28, 35, 41, 46, 50]> : tensor<11xindex>
        %col_ind = arith.constant dense<[1, 2, 3, 4, 7, 8, 9, 1, 5, 6, 1, 3, 9, 1, 3, 4, 5, 6, 7, 9, 0, 2, 5, 6, 9, 3, 8, 9, 1, 2, 3, 4, 5, 8, 9, 0, 3, 5, 7, 8, 9, 2, 5, 7, 8, 9, 3, 4, 6, 9]> : tensor<50xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<50xindex>), tensor<50xf64> to tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }
    
}
