// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @matmul(%t : tensor<10x10xf64, #CSR>, %s : tensor<10x10xf64>, %out : tensor<10x10xf64>)
        -> tensor<10x10xf64> {
        %0 = linalg.matmul
            ins(%t, %s: tensor<10x10xf64, #CSR>, tensor<10x10xf64>)
            outs(%out: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %0 : tensor<10x10xf64>
    }

    func.func @main() -> i64 {
        %c = tensor.empty() : tensor<10x10xf64>
        %t_sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %s = arith.constant dense<[
            [[4.445286, 9.072243, 3.312062, 1.430700, 2.094747, 1.675724, 9.146538, 2.527140, 1.718133, 9.816667], [2.958209, 3.386141, 2.562129, 9.816658, 2.870420, 8.848185, 1.614377, 8.460458, 8.479144, 2.677054], [7.407203, 2.076695, 2.574312, 4.503058, 5.180196, 9.100147, 1.363959, 2.026924, 9.970839, 6.931995], [0.826628, 6.882647, 7.370805, 6.520095, 6.609683, 1.269848, 7.055867, 2.947696, 1.348413, 8.915809], [8.263089, 1.155955, 5.305956, 4.420318, 0.702352, 0.674291, 2.840582, 2.133377, 4.761811, 6.702365], [3.359127, 9.289319, 8.475825, 0.282349, 4.676396, 8.552581, 8.501858, 3.339207, 4.629390, 9.027780], [2.438057, 3.807111, 8.046975, 5.267976, 0.034656, 5.847659, 6.869952, 4.668492, 4.129496, 9.830141], [9.274475, 4.989902, 6.450688, 8.027851, 4.067083, 6.658045, 2.738041, 3.218994, 9.894490, 7.472789], [2.713412, 7.885681, 6.847407, 6.432875, 9.942796, 4.544998, 7.779723, 6.406806, 8.354723, 9.806879], [9.017594, 2.882418, 9.301569, 3.200837, 2.118150, 9.293869, 5.635709, 0.069356, 3.479634, 2.078806]]
        ]> : tensor<10x10xf64>
        %result_matrix = call @matmul(%t_sparse, %s, %c) :
            (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %c1 = arith.constant 1 : index

        %element_f64 = tensor.extract %result_matrix[%c1, %c1] : tensor<10x10xf64>
        %element_i64 = arith.fptosi %element_f64 : f64 to i64
        return %element_i64 : i64
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[9.862595, 1.995972, 1.783880, 3.342893, 5.377399, 8.474014, 0.065616, 2.319637, 4.856375, 0.554917, 4.095926, 8.559191, 2.136219, 3.383806, 6.971143, 9.847985, 9.167384, 6.841993, 8.463257, 5.099030, 9.190751, 2.265126, 6.784529, 4.334008, 7.126583, 2.402396, 6.064453, 6.854661, 6.388181, 8.700155, 5.229462, 4.383546, 2.535144, 4.948685, 7.175919, 6.172690, 3.409481, 5.487158, 4.397672, 6.282163, 4.389930, 8.731459, 9.860281, 2.648441, 2.013213, 8.263533, 7.508103, 7.116819, 2.968882, 5.429621]> : tensor<50xf64>
        %row_ptr = arith.constant dense<[0, 5, 12, 17, 20, 23, 26, 34, 39, 45, 50]> : tensor<11xindex>
        %col_ind = arith.constant dense<[2, 3, 7, 8, 9, 1, 2, 3, 5, 6, 7, 9, 0, 1, 2, 5, 9, 2, 3, 8, 0, 2, 4, 2, 6, 8, 0, 1, 2, 4, 5, 6, 7, 9, 1, 2, 6, 7, 8, 0, 1, 5, 7, 8, 9, 0, 2, 4, 7, 9]> : tensor<50xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<50xindex>), tensor<50xf64> to tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }
    
}
