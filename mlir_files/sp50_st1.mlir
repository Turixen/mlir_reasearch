// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @sparse_dense_matmul(%sparse: tensor<10x10xf64, #CSR>,%dense: tensor<10x10xf64>,%init: tensor<10x10xf64>
    ) -> tensor<10x10xf64> {
        %res = linalg.matmul ins(%sparse, %dense: tensor<10x10xf64, #CSR>, tensor<10x10xf64>) 
            outs(%init: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %res : tensor<10x10xf64>
    }

    func.func @main() -> i32 {
        %c0 = arith.constant 0 : index
        %c1 = arith.constant 1 : index
        %rows = arith.constant 10 : index
        %cols = arith.constant 10 : index
        %zero_f64 = arith.constant 0.0 : f64

        %init = tensor.empty() : tensor<10x10xf64>
        %sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %dense = arith.constant dense<[[6.076540, 9.468287, 3.458124, 2.902042, 8.601098, 2.115220, 2.450538, 9.629393, 8.237244, 5.316092], [2.174814, 4.562835, 0.115356, 5.441410, 7.153217, 5.581997, 0.308408, 7.773311, 7.146462, 9.245439], [3.070810, 9.722009, 8.975563, 4.280364, 1.648022, 1.489129, 2.967902, 3.479709, 4.636651, 7.566397], [7.746524, 2.406994, 5.434015, 1.706972, 3.374495, 6.630785, 8.419564, 9.026818, 7.802342, 5.726131], [4.593936, 6.259220, 4.976756, 5.186104, 3.643320, 5.752390, 4.639865, 5.331693, 2.953868, 9.068967], [8.617190, 0.649918, 2.789194, 2.667922, 8.246152, 3.988567, 1.618394, 1.870152, 2.522622, 5.182482], [6.597024, 0.746980, 8.119063, 7.789702, 0.818327, 9.543526, 3.296046, 6.625551, 9.541795, 7.274860], [7.281203, 9.470123, 7.590962, 0.449856, 9.950593, 6.497576, 1.612659, 7.983012, 3.303709, 7.899449], [6.672543, 3.739152, 0.873733, 7.229378, 5.315363, 9.058923, 0.667114, 2.427993, 9.328357, 4.516811], [8.433240, 7.692469, 3.175365, 8.494318, 3.403079, 8.238728, 6.495823, 7.825567, 2.708823, 1.833994]]> : tensor<10x10xf64>

        %computed = call @sparse_dense_matmul(%sparse, %dense, %init) : (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %expected = arith.constant dense<[[178.014202, 109.610631, 105.547128, 99.924740, 178.835884, 163.587640, 105.019604, 181.795867, 149.997843, 212.709445], [252.070714, 230.823118, 127.587652, 154.855032, 246.478949, 179.803816, 115.458236, 242.687511, 162.764401, 184.637330], [78.166002, 50.374157, 63.513471, 93.464886, 38.135185, 103.434033, 48.387644, 90.170681, 83.704976, 80.490861], [96.235516, 136.090334, 126.956653, 34.323999, 94.050962, 77.485891, 55.651688, 107.828341, 76.334774, 121.663300], [152.851583, 140.122953, 91.279993, 126.219612, 102.348781, 122.168274, 88.912430, 145.068628, 104.533136, 90.789227], [107.418305, 160.570756, 137.190600, 106.717098, 61.846294, 94.581453, 97.059358, 112.137238, 87.682898, 147.640867], [130.027318, 126.770241, 73.308285, 64.285748, 131.695596, 100.600280, 64.209516, 148.501427, 151.279299, 106.677191], [295.138983, 224.648984, 217.074054, 148.817116, 228.876285, 229.994504, 157.715265, 239.430660, 165.173501, 224.711407], [116.568873, 90.451194, 80.617293, 73.758274, 123.221060, 73.881098, 42.619946, 81.731198, 82.935698, 133.592039], [138.166870, 149.760542, 81.864033, 121.545525, 167.536584, 123.099192, 43.980848, 162.250358, 186.179110, 170.402478]]> : tensor<10x10xf64>

        // Validate each element
        %false = arith.constant "false" : i1
        %flag = scf.for %i = %c0 to %rows step %c1 iter_args(%f_iter = %false) -> (i1) {
            %flag_row = scf.for %j = %c0 to %cols step %c1 iter_args(%f_in = %f_iter) -> (i1) {
                %cmp_c = tensor.extract %computed[%i, %j] : tensor<10x10xf64>
                %cmp_e = tensor.extract %expected[%i, %j] : tensor<10x10xf64>
                %neq = arith.cmpf une, %cmp_c, %cmp_e : f64
                %new_f = arith.ori %f_in, %neq : i1
                scf.yield %new_f : i1
            }
            scf.yield %flag_row : i1
        }

        %zero_i32 = arith.constant 0 : i32
        %one_i32 = arith.constant 1 : i32
        %status = scf.if %flag -> (i32) {
            scf.yield %one_i32 : i32
        } else {
            scf.yield %zero_i32 : i32
        }
        return %status : i32
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[7.035847, 7.367091, 5.410685, 7.498275, 2.221170, 9.983156, 2.131624, 2.530901, 8.258812, 3.719481, 9.118077, 2.338340, 1.265068, 5.611102, 3.587272, 6.015766, 3.069062, 7.414665, 4.812993, 2.176401, 2.910648, 2.251283, 0.173005, 8.992292, 9.130606, 1.999106, 6.343057, 0.612028, 3.495722, 8.372401, 4.428653, 2.172173, 4.350573, 5.560878, 6.029914, 9.899689, 1.611145, 8.808217, 8.452389, 1.737808, 2.766935, 4.265082, 2.258386, 8.879845, 7.834223, 6.230528, 2.933485, 3.373707, 1.821600, 4.033616]> : tensor<50xf64>
        %row_ptr = arith.constant dense<[0, 5, 11, 15, 18, 24, 29, 33, 39, 44, 50]> : tensor<11xindex>
        %col_ind = arith.constant dense<[1, 3, 4, 5, 7, 0, 1, 4, 5, 7, 9, 1, 4, 6, 9, 2, 3, 7, 0, 2, 5, 6, 8, 9, 2, 3, 4, 5, 9, 0, 3, 7, 8, 2, 3, 5, 6, 7, 9, 0, 1, 2, 4, 5, 0, 1, 2, 5, 6, 8]> : tensor<50xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<50xindex>), tensor<50xf64> to tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }

}
