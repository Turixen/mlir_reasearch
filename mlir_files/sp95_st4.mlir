// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @matmul(%t : tensor<10x10xf64, #CSR>, %s : tensor<10x10xf64>, %out : tensor<10x10xf64>)
        -> tensor<10x10xf64> {
        %0 = linalg.matmul
            ins(%t, %s: tensor<10x10xf64, #CSR>, tensor<10x10xf64>)
            outs(%out: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %0 : tensor<10x10xf64>
    }

    func.func @main() -> i64 {
        %c = tensor.empty() : tensor<10x10xf64>
        %t_sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %s = arith.constant dense<[
            [5.058107728992639, 9.580297324529573, 0.4618774055123287, 5.639721295271096, 3.648898581036507, 0.9302203016385802, 2.5968033809257585, 0.8327635087399088, 5.112292302133205, 0.886196614788135], [0.3495938303708823, 3.7708531749158327, 5.757999904387463, 8.535823101639542, 0.7009313359053782, 7.086785240765995, 8.634514528727902, 3.690638550389087, 9.175165251092794, 4.945934006379133], [2.8918339891912215, 8.230995652568078, 1.4891901436840138, 3.7084919481637977, 2.917830238647391, 8.287561337333893, 0.652938064298404, 5.5165302496974675, 9.918674328075562, 6.562711870475341], [3.002097237194282, 3.821926930628061, 7.159747150819737, 1.4473134291170653, 3.256408536260004, 5.761192245519284, 5.863724731769736, 2.934458170499398, 4.037307784795824, 7.91041763305222], [9.605059310330594, 2.1954366575885875, 9.750250895457423, 2.03118030152588, 2.8546271299271817, 0.2518629823039542, 0.3088266772696924, 0.5506772559395634, 2.9109615904647876, 9.627273595813202], [9.655017694208325, 2.0799345557590754, 9.345235395485926, 8.421063611131625, 2.5126484811235983, 5.472595381690857, 2.764103194447507, 5.231523216650535, 3.453497896689349, 9.24337754799421], [4.230094976103841, 8.291497169852995, 7.826543119541185, 0.4242829982634222, 7.665480744808617, 0.01321566431688237, 8.069734525002705, 5.847727497298304, 0.4567401726137532, 8.458329804076548], [1.061946540367713, 1.561925644873271, 1.6386629723547852, 3.6289626022885404, 0.026191086564651966, 2.400227076782101, 8.746514284870033, 5.958000684987638, 8.438787152819186, 2.224422508451384], [8.422986307926575, 4.695015893361775, 4.139718930493742, 9.368820855245959, 1.7386790853313083, 3.927189565990954, 0.30181171470769486, 2.4992899952918335, 3.2922905098332267, 2.897599920209024], [6.0271286495932195, 8.597389309176057, 0.536234550352015, 4.249665999626654, 9.691611853278308, 2.1857371999463258, 7.692493066618765, 6.306511200845293, 8.415374508105486, 8.594381104924008]
        ]> : tensor<10x10xf64>
        %result_matrix = call @matmul(%t_sparse, %s, %c) :
            (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %c1 = arith.constant 1 : index

        %element_f64 = tensor.extract %result_matrix[%c1, %c1] : tensor<10x10xf64>
        %element_i64 = arith.fptosi %element_f64 : f64 to i64
        return %element_i64 : i64
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[0.882212, 9.814302, 3.272046, 3.016811, 6.543723]> : tensor<5xf64>
        %row_ptr = arith.constant dense<[0, 2, 2, 2, 2, 2, 2, 2, 2, 5, 5]> : tensor<11xindex>
        %col_ind = arith.constant dense<[0, 8, 0, 4, 8]> : tensor<5xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<5xindex>), tensor<5xf64> to tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }
    
}
