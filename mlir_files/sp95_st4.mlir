// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @matmul(%t : tensor<10x10xf64, #CSR>, %s : tensor<10x10xf64>, %out : tensor<10x10xf64>)
        -> tensor<10x10xf64> {
        %0 = linalg.matmul
            ins(%t, %s: tensor<10x10xf64, #CSR>, tensor<10x10xf64>)
            outs(%out: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %0 : tensor<10x10xf64>
    }

    func.func @main() -> i64 {
        %c = tensor.empty() : tensor<10x10xf64>
        %t_sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %s = arith.constant dense<[
            [1.3831952246478896, 6.543917389853185, 8.45200565341548, 1.6455805597850692, 1.4422466679105161, 3.9397220392479637, 3.773286989694401, 8.2883701372555, 5.01191930074801, 6.4245127253130825], [5.905988061025537, 1.1882729812917758, 9.357032096666721, 5.243535161605616, 0.6973338817200936, 8.019678086777981, 0.1294991454325256, 1.4054019862124878, 0.9781196114554569, 7.094055355744768], [2.8645547804845464, 0.06704040296005909, 4.639916481181881, 8.256726007784327, 0.22386001927192756, 8.864752292210145, 4.979509337428541, 9.65771619000768, 5.131636981049469, 1.3644782155753121], [9.424270515778616, 5.2300217394176975, 1.1897161898038477, 0.7231094087252066, 9.220345545379956, 2.086175879484279, 3.2472232554480085, 7.967258649243155, 0.06709689888178105, 7.223676869387681], [3.911915900294206, 0.6263382133329842, 9.249882301846927, 0.4155743632478204, 1.946698446991899, 2.7531056435846155, 3.5636624204715597, 5.855541902850754, 5.299164155602385, 2.9698562573532996], [6.17482806682723, 5.845032160388356, 9.642690947333119, 5.16664882463586, 6.815539363918068, 3.4904262538275823, 2.400791312310977, 7.439996217774624, 3.411081927586218, 4.404011187221933], [7.423171385453591, 7.1379735905495725, 8.780624741789962, 0.9681383119898823, 1.025140079474901, 9.730686007093425, 1.9927009283969577, 0.2270115740695866, 6.920129635120334, 3.7579316600251502], [3.1275284057511876, 4.804541716208196, 1.0731123697560963, 2.5620129377518372, 1.8739022581064235, 7.499027490316319, 3.6574478414349807, 2.071828935258706, 2.852642195419839, 4.431788037130049], [9.22399725845603, 6.663359957134557, 6.688267775525938, 1.3832832251102356, 1.8901416035788143, 7.297340848646211, 6.061434382367594, 5.735936416117697, 6.465112945220884, 3.3754172271855163], [2.8860916893856636, 1.6069077571400736, 5.525479439804263, 6.346264070968904, 1.5423496351010468, 6.633470673225377, 7.341487070387097, 8.122527678712029, 4.504533310629668, 2.6301491807426203]
        ]> : tensor<10x10xf64>
        %result_matrix = call @matmul(%t_sparse, %s, %c) :
            (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %c1 = arith.constant 1 : index
        %element_f64 = tensor.extract %result_matrix[%c1, %c1] : tensor<10x10xf64>
        %element_i64 = arith.fptosi %element_f64 : f64 to i64
        return %element_i64 : i64
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[4.186493, 1.858323, 6.809555, 9.710715, 5.635200]> : tensor<5xf64>
        %row_ptr = arith.constant dense<[0, 1, 1, 1, 1, 3, 3, 3, 3, 5, 5]> : tensor<11xindex>
        %col_ind = arith.constant dense<[4, 0, 4, 0, 4]> : tensor<5xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<5xindex>), tensor<5xf64> to tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }
    
}
