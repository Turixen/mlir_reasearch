// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @matmul(%t : tensor<10x10xf64, #CSR>, %s : tensor<10x10xf64>, %out : tensor<10x10xf64>)
        -> tensor<10x10xf64> {
        %0 = linalg.matmul
            ins(%t, %s: tensor<10x10xf64, #CSR>, tensor<10x10xf64>)
            outs(%out: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %0 : tensor<10x10xf64>
    }

    func.func @main() -> i64 {
        %c = tensor.empty() : tensor<10x10xf64>
        %t_sparse = call @test_assemble() : () -> tensor<10x10xf64, #CSR>
        %s = arith.constant dense<[
            [1.376068795709663, 0.12840580736960372, 9.76038004290582, 9.0858501705034, 8.4522316649469, 0.5740511520978275, 7.863587852490504, 7.451306988005907, 3.169127180432664, 7.056027648325454], [3.8341924519457047, 4.382034961476756, 4.958724872018321, 7.480584440065784, 1.8178879784711899, 8.658308950779025, 4.358900143923135, 1.7371108779226385, 6.380842701521786, 2.4518111389260113], [8.48943325020381, 7.238308387673057, 7.6757605546033405, 3.4467505640378593, 7.345093998435926, 1.7574378546237945, 4.142077079429533, 6.588762210449735, 1.2549699085517363, 0.1039433726444261], [2.580604570984656, 0.538498585953654, 6.036403624320431, 6.1105671777992825, 0.2886931249841862, 1.1037813917534223, 8.54248805618835, 9.112910080787442, 3.6846616350361563, 8.338265031877906], [5.304152510142178, 0.7739860011479527, 1.8707741907474595, 7.241622686406551, 5.198213160673762, 6.8682762905330215, 3.1026537493720796, 5.267514045133738, 8.91355189720191, 8.22196336504396], [9.339345075782944, 1.810228999829523, 7.948909400856529, 8.090515504618669, 9.28087595354388, 2.9746691386570987, 5.44870742163512, 6.0175314500260955, 6.737642373276419, 4.472274103191609], [6.342032226617408, 3.9413797112059457, 8.577068822456992, 1.5308402415172073, 9.84064180315477, 7.042340761124494, 3.8453382166638095, 3.2742231955675005, 0.17125380992503492, 0.2660059926689684], [0.9827856062258167, 4.081016162978834, 5.182904839493618, 0.6695354609192627, 2.9503660937839635, 1.0012973667404024, 8.826340315910324, 5.325189872917204, 1.039449809466626, 2.7311562513225995], [0.763553467417698, 2.659091026082999, 4.290520161126333, 5.948596926864366, 0.37634633437403475, 8.713364598949353, 5.11251783901463, 1.9000975994859781, 1.925641388109114, 4.2192929062768405], [8.48028424289546, 4.816062931489206, 3.0498804543999225, 8.732334779287843, 5.506155132234481, 7.224124200697908, 6.50799740717562, 1.5502148184073006, 9.127016800244359, 6.924801462242577]
        ]> : tensor<10x10xf64>
        %result_matrix = call @matmul(%t_sparse, %s, %c) :
            (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %c1 = arith.constant 1 : index
        %element_f64 = tensor.extract %result_matrix[%c1, %c1] : tensor<10x10xf64>
        %element_i64 = arith.fptosi %element_f64 : f64 to i64
        return %element_i64 : i64
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[9.317347, 2.454994, 8.876053, 2.998460, 1.092806]> : tensor<5xf64>
        %row_ptr = arith.constant dense<[0, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5]> : tensor<11xindex>
        %col_ind = arith.constant dense<[0, 4, 8, 0, 0]> : tensor<5xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<5xindex>), tensor<5xf64> to tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }
    
}
