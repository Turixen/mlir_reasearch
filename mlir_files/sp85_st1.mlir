// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @matmul(%t : tensor<10x10xf64, #CSR>, %s : tensor<10x10xf64>, %out : tensor<10x10xf64>)
        -> tensor<10x10xf64> {
        %0 = linalg.matmul
            ins(%t, %s: tensor<10x10xf64, #CSR>, tensor<10x10xf64>)
            outs(%out: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %0 : tensor<10x10xf64>
    }

    func.func @main() -> i64 {
        %c = tensor.empty() : tensor<10x10xf64>
        %t_sparse = call @test_assemble() : () -> tensor<10x10xf64, #CSR>
        %s = arith.constant dense<[
            [2.4362886821947805, 2.5673581502387, 0.6525697408291031, 7.738888533428778, 6.235555481683473, 1.2110077821739818, 9.65356685944794, 1.0352539380161285, 1.118982088568684, 1.9137366734476646], [5.53092508862108, 7.5667287335537505, 2.0290028666343227, 8.027294693273259, 1.2194109363100236, 6.6456550525686335, 9.579049505259402, 9.557392423937774, 3.9265424716664854, 1.6856074886387529], [7.732411123331369, 3.5651633332123014, 3.8967870276475605, 5.862884001137405, 1.8509765462964012, 3.2688447753168015, 4.832307841243521, 5.766025572976684, 1.1863222699762377, 9.67013225021559], [5.896136262630786, 3.844688812941197, 7.125593718147422, 3.9220599260705438, 9.277241348576014, 3.402902147267326, 0.4318838637575051, 6.552410076931166, 5.895964513931463, 1.6142633135334905], [7.147864481305843, 0.3137905294073906, 2.743334943795287, 6.180025176856001, 4.406001385403844, 8.31748695648017, 7.658948630506886, 2.8953699089056775, 0.2998894756658632, 4.020066989876707], [3.4367708832420565, 2.041381730421219, 2.219162980761238, 0.20828151973227516, 2.6413826429840537, 5.239191139257825, 5.393984265434078, 8.928478402247386, 7.971602270989421, 5.257472058721087], [9.332442677801222, 4.0621471627523755, 8.341592263224419, 5.309762751325816, 8.18832399609297, 0.010990935270176472, 9.607238937485176, 3.238673478079903, 3.4474966239571856, 6.7030397532254025], [4.345873770944133, 9.176714263362978, 5.078840218195916, 4.0438369713521, 7.250939208655069, 8.60706180142668, 9.453660615346188, 4.44360977987151, 4.785625110078133, 0.09039483888673816], [7.974764657634434, 6.992717585772462, 6.163593967115961, 2.465815553755827, 2.9388925982251224, 6.030044923976555, 1.2844464564060554, 7.112610314398202, 6.696947337955179, 4.629460318936656], [1.453938021817719, 2.3847829461832215, 8.774209132895384, 0.08865519198589356, 6.115060526257688, 1.3884543449433162, 9.395719481251986, 3.8434539384740862, 4.1015472841222085, 0.9291594096976974]
        ]> : tensor<10x10xf64>
        %result_matrix = call @matmul(%t_sparse, %s, %c) :
            (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %c1 = arith.constant 1 : index
        %element_f64 = tensor.extract %result_matrix[%c1, %c1] : tensor<10x10xf64>
        %element_i64 = arith.fptosi %element_f64 : f64 to i64
        return %element_i64 : i64
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[2.686811, 6.554391, 7.124841, 1.239582, 0.220209, 2.026392, 6.366227, 4.532210, 8.169960, 3.117896, 6.105731, 1.849831, 8.530726, 3.516016, 5.847138]> : tensor<15xf64>
        %row_ptr = arith.constant dense<[0, 0, 2, 5, 6, 8, 10, 11, 12, 15, 15]> : tensor<11xindex>
        %col_ind = arith.constant dense<[0, 1, 4, 6, 9, 0, 6, 9, 4, 7, 9, 2, 3, 4, 7]> : tensor<15xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<15xindex>), tensor<15xf64> to tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }
    
}
