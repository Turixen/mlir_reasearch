// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @matmul(%t : tensor<10x10xf64, #CSR>, %s : tensor<10x10xf64>, %out : tensor<10x10xf64>)
        -> tensor<10x10xf64> {
        %0 = linalg.matmul
            ins(%t, %s: tensor<10x10xf64, #CSR>, tensor<10x10xf64>)
            outs(%out: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %0 : tensor<10x10xf64>
    }

    func.func @main() -> i64 {
        %c = tensor.empty() : tensor<10x10xf64>
        %t_sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %s = arith.constant dense<[
            [3.1086512903821517, 6.719006444167176, 0.032811328471135104, 5.177195762817268, 4.169416876353064, 6.839294508130021, 6.162684953214509, 5.648313432644994, 6.248698977733897, 1.741552189493062], [0.21871666417852653, 4.2946986149032185, 1.8772325317302563, 9.826065180834277, 8.68960605502263, 2.0916717769845827, 1.9729393980977028, 6.343602302845456, 3.6496993802859468, 8.154787001073984], [7.5790689599485646, 6.178650418684909, 9.735317286691858, 4.670699808164023, 1.9903399338258954, 5.1436115813132774, 8.477271582963409, 6.883345239882446, 3.8067030455403614, 7.380628112051384], [7.390653792183458, 4.4677623115422405, 5.394304195588915, 2.4162666638388366, 0.13126762152229077, 6.343625272533249, 1.85281608138544, 7.625698198302146, 8.400955537636657, 3.325111364256048], [7.815007794932446, 0.6660325512464227, 5.083955078464934, 1.819773123524907, 6.90373404381687, 0.058504999908736144, 1.8775143178585219, 9.42620947706576, 9.536368771073032, 3.7921409193602864], [5.809948213773043, 1.1667246652050811, 6.069163121994646, 0.21863726585007015, 8.71723528925894, 6.433422820917382, 1.0525162376250408, 5.008792569376616, 8.805533340153989, 3.94895891056656], [6.723707543268719, 3.769343094799924, 3.90054050218788, 1.345090643200687, 8.265896915239514, 1.712770675724441, 2.13012810602537, 3.295696878717538, 7.042941208913248, 9.932844907949578], [8.650902176953151, 2.8691274437377046, 8.663209086516034, 1.551567197007544, 8.430934455109883, 0.4364111790809466, 4.609660783521655, 6.986121625378346, 6.7491542566732114, 7.624368783940736], [6.000841342925634, 2.590564563334994, 7.444532078480179, 9.946883889015501, 6.523514913146232, 8.68891850153271, 8.288491299081027, 3.886013563100917, 8.249379139729166, 1.3214887388449548], [9.486730956439338, 1.0171455340959412, 5.513842424055168, 1.247932674664528, 3.2595203049388024, 7.55086431266098, 9.825512710631116, 4.973928464041709, 6.179847651143434, 7.053308772562595]
        ]> : tensor<10x10xf64>
        %result_matrix = call @matmul(%t_sparse, %s, %c) :
            (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %c1 = arith.constant 1 : index

        %element_f64 = tensor.extract %result_matrix[%c1, %c1] : tensor<10x10xf64>
        %element_i64 = arith.fptosi %element_f64 : f64 to i64
        return %element_i64 : i64
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[9.364918, 0.242588, 6.421422, 3.522533, 9.718620, 8.457168, 2.391286, 4.069630, 9.115823, 5.024112, 6.569876, 6.311482, 9.325556, 9.006979, 9.487137]> : tensor<15xf64>
        %row_ptr = arith.constant dense<[0, 1, 4, 4, 7, 8, 8, 9, 12, 13, 15]> : tensor<11xindex>
        %col_ind = arith.constant dense<[5, 0, 2, 4, 6, 8, 9, 0, 8, 1, 3, 9, 0, 1, 9]> : tensor<15xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<15xindex>), tensor<15xf64> to tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }
    
}
