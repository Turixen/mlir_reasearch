// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @matmul(%t : tensor<10x10xf64, #CSR>, %s : tensor<10x10xf64>, %out : tensor<10x10xf64>)
        -> tensor<10x10xf64> {
        %0 = linalg.matmul
            ins(%t, %s: tensor<10x10xf64, #CSR>, tensor<10x10xf64>)
            outs(%out: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %0 : tensor<10x10xf64>
    }

    func.func @main() -> i64 {
        %c = tensor.empty() : tensor<10x10xf64>
        %t_sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %s = arith.constant dense<[
            [1.4153839642022592, 7.965259007701193, 5.043321413226332, 5.385728650114392, 0.5776910050645112, 4.861989803024416, 8.593024363243956, 8.082948803259255, 8.32667311081897, 8.650948726400179], [5.0303574170579015, 7.387843695734908, 4.202807194111903, 7.758204603624241, 4.453710779962925, 8.997946245412097, 7.261340560584514, 3.3001031050171834, 1.8420756278495387, 4.292742471754391], [4.2753292804296, 3.874215572920562, 9.121444414564737, 7.764207359196767, 0.06679555761113565, 2.675572711720575, 9.083917521597426, 1.0766049600206096, 5.058395891668487, 2.548891225318269], [6.991364800164303, 0.9134415749068792, 7.00572183003847, 2.37486208988698, 3.0492642741862106, 4.705332169138168, 3.388179015216889, 0.26167308562862535, 5.44795151358673, 9.080148945987276], [1.7147660023732958, 7.8016651245130255, 5.753803669659847, 8.743311736594746, 9.032307812680552, 3.1482819168957974, 0.799845326375701, 0.4156431221432966, 2.5835643247004936, 0.9092120613867327], [9.292350041944545, 3.710950696984515, 0.7317415261747084, 3.0583717703265845, 7.055353302161059, 8.386709555015276, 2.2540857282513347, 5.471845354916052, 2.9468249069992014, 3.1983320738699303], [6.533872628062973, 6.732834106274481, 7.126271180486005, 7.590483024558537, 5.628696458601498, 5.420388285969122, 5.586744550924635, 8.430130774170037, 0.8737804050322762, 4.421152782304257], [3.4175410572333242, 8.888263424360085, 7.7524424940074805, 9.177740958716257, 0.8261036571866376, 5.708096609313911, 2.786218136151508, 8.86180596815192, 1.652505599101115, 3.038096613579456], [6.355038104781757, 5.6298187959336, 4.446717359357239, 0.9913401245826048, 0.9032595640944663, 0.3879541455564184, 9.196571987833268, 5.737674338795568, 0.829090876611428, 6.678138393237577], [2.7891936850666585, 0.8820812833938274, 4.140523493817772, 5.667728129055378, 6.480928661218595, 6.915228438464079, 5.793863498520485, 8.698608981852802, 6.734515317932061, 1.2565363715905875]
        ]> : tensor<10x10xf64>
        %result_matrix = call @matmul(%t_sparse, %s, %c) :
            (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %c1 = arith.constant 1 : index
        %element_f64 = tensor.extract %result_matrix[%c1, %c1] : tensor<10x10xf64>
        %element_i64 = arith.fptosi %element_f64 : f64 to i64
        return %element_i64 : i64
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[0.650572, 1.756402, 8.975033, 0.797425, 0.386735, 5.215820, 1.835940, 0.644106, 3.906213, 3.488061, 6.964792, 9.364500, 9.542016, 5.630598, 6.237096]> : tensor<15xf64>
        %row_ptr = arith.constant dense<[0, 0, 3, 6, 7, 8, 9, 10, 12, 13, 15]> : tensor<11xindex>
        %col_ind = arith.constant dense<[3, 7, 8, 0, 4, 8, 0, 0, 1, 1, 1, 5, 7, 0, 2]> : tensor<15xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<15xindex>), tensor<15xf64> to tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }
    
}
