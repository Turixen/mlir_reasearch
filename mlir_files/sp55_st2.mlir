// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @sparse_dense_matmul(%sparse: tensor<10x10xf64, #CSR>,%dense: tensor<10x10xf64>,%init: tensor<10x10xf64>
    ) -> tensor<10x10xf64> {
        %res = linalg.matmul ins(%sparse, %dense: tensor<10x10xf64, #CSR>, tensor<10x10xf64>) 
            outs(%init: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %res : tensor<10x10xf64>
    }

    func.func @main() -> i32 {
        %c0 = arith.constant 0 : index
        %c1 = arith.constant 1 : index
        %rows = arith.constant 10 : index
        %cols = arith.constant 10 : index
        %zero_f64 = arith.constant 0.0 : f64

        %init = tensor.empty() : tensor<10x10xf64>
        %sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %dense = arith.constant dense<[[3.088945, 4.989125, 0.432958, 8.250593, 8.433200, 6.498951, 6.216907, 9.319877, 6.491572, 1.889842], [0.892357, 0.181093, 5.787551, 0.480151, 7.680571, 6.513354, 7.327977, 8.504064, 4.374038, 0.600398], [7.962970, 9.114802, 1.377794, 4.685941, 5.395522, 1.488509, 6.333430, 1.825814, 7.729237, 5.417833], [9.703137, 6.721178, 9.278174, 5.210825, 6.316142, 5.747056, 6.509749, 4.903568, 4.087541, 7.361259], [7.879009, 4.436652, 8.975412, 8.604278, 1.293671, 3.870518, 4.080013, 8.698517, 2.971702, 1.553975], [6.288966, 7.863963, 0.023115, 7.355733, 6.534123, 5.423224, 0.550607, 0.082108, 5.455698, 3.247598], [4.876269, 2.355058, 9.602019, 2.389354, 3.192273, 4.598383, 0.625806, 5.346128, 7.743606, 6.482567], [6.161532, 8.446545, 4.705790, 4.240413, 2.837535, 7.782519, 3.293806, 1.600587, 7.502841, 4.612832], [4.418410, 4.101168, 0.311891, 1.180538, 4.589946, 3.393258, 5.781854, 6.052638, 2.097532, 2.960048], [1.954986, 4.821296, 9.485910, 4.590435, 5.944670, 6.450140, 9.528538, 7.668521, 0.252907, 4.633141]]> : tensor<10x10xf64>

        %computed = call @sparse_dense_matmul(%sparse, %dense, %init) : (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %expected = arith.constant dense<[[157.242792, 188.082658, 54.065137, 183.416096, 236.061618, 176.859375, 167.469922, 183.806830, 192.337002, 96.567750], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [145.194311, 130.458447, 100.049969, 91.476796, 93.191425, 66.967073, 97.282725, 97.971330, 140.613401, 107.410183], [71.913640, 88.192658, 173.374120, 83.592078, 133.398328, 139.544907, 134.079072, 145.171049, 86.827146, 94.355353], [204.796451, 195.504516, 145.644759, 158.942396, 167.361666, 158.150037, 162.845324, 201.579753, 212.290538, 150.526726], [89.031116, 116.288958, 94.358503, 71.280742, 107.219490, 116.179294, 139.466391, 120.787542, 56.437147, 85.341478], [288.939446, 276.761142, 152.540422, 227.668440, 251.967599, 199.905186, 196.330899, 195.658580, 235.068340, 197.811764], [35.570334, 36.165060, 36.658203, 20.688430, 62.417954, 41.015821, 64.129106, 53.097604, 53.521474, 24.164775], [216.522188, 251.106738, 115.177363, 202.193783, 195.413009, 203.241105, 151.786065, 159.139509, 247.239083, 152.682365], [13.495817, 21.797838, 1.891623, 36.047421, 36.845247, 28.394376, 27.162106, 40.719201, 28.362134, 8.256854]]> : tensor<10x10xf64>

        // Validate each element
        %false = arith.constant false : i1
        %flag = scf.for %i = %c0 to %rows step %c1 iter_args(%f_iter = %false) -> (i1) {
            %flag_row = scf.for %j = %c0 to %cols step %c1 iter_args(%f_in = %f_iter) -> (i1) {
                %cmp_c = tensor.extract %computed[%i, %j] : tensor<10x10xf64>
                %cmp_e = tensor.extract %expected[%i, %j] : tensor<10x10xf64>
                %neq = arith.cmpf une, %cmp_c, %cmp_e : f64
                %new_f = arith.or %f_in, %neq : i1
                scf.yield %new_f : i1
            }
            scf.yield %flag_row : i1
        }

        %zero_i32 = arith.constant 0 : i32
        %one_i32 = arith.constant 1 : i32
        %status = scf.if %flag -> (i32) {
            scf.yield %one_i32 : i32
        } else {
            scf.yield %zero_i32 : i32
        }
        return %status : i32
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[9.975797, 5.622996, 5.009661, 0.249451, 8.951605, 0.671094, 4.522984, 0.329160, 9.721344, 2.861209, 6.233790, 3.129102, 4.997098, 3.023018, 5.362561, 0.606557, 9.491714, 5.740393, 7.046351, 3.865890, 8.205520, 3.674685, 8.564488, 0.421418, 1.193250, 3.597618, 9.215338, 7.444422, 5.054337, 7.428227, 7.883304, 2.152554, 9.556857, 4.661446, 8.575516, 5.415023, 3.860143, 7.808506, 6.120042, 1.475602, 5.535111, 4.583095, 9.529582, 3.658963, 4.369070]> : tensor<45xf64>
        %row_ptr = arith.constant dense<[0, 7, 7, 12, 17, 23, 28, 35, 37, 44, 45]> : tensor<11xindex>
        %col_ind = arith.constant dense<[0, 1, 2, 4, 5, 6, 8, 0, 2, 4, 6, 8, 1, 5, 6, 7, 9, 0, 2, 4, 6, 7, 8, 3, 5, 7, 8, 9, 0, 2, 3, 4, 5, 6, 8, 1, 2, 0, 2, 4, 5, 6, 7, 8, 0]> : tensor<45xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<45xindex>), tensor<45xf64> -> tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }

}
