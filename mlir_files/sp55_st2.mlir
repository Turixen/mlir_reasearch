// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @sparse_dense_matmul(%sparse: tensor<10x10xf64, #CSR>,%dense: tensor<10x10xf64>,%init: tensor<10x10xf64>
    ) -> tensor<10x10xf64> {
        %res = linalg.matmul ins(%sparse, %dense: tensor<10x10xf64, #CSR>, tensor<10x10xf64>) 
            outs(%init: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %res : tensor<10x10xf64>
    }

    func.func @main() -> i32 {
        %c0 = arith.constant 0 : index
        %c1 = arith.constant 1 : index
        %rows = arith.constant 10 : index
        %cols = arith.constant 10 : index
        %zero_f64 = arith.constant 0.0 : f64

        %init = tensor.empty() : tensor<10x10xf64>
        %sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %dense = arith.constant dense<[[9.897974, 2.896417, 4.536376, 4.808469, 5.146579, 6.859685, 3.403706, 2.425217, 1.659164, 7.904850], [5.729814, 3.671273, 4.044933, 9.526099, 2.335797, 8.968902, 4.197819, 3.358449, 7.059626, 1.229781], [7.143013, 7.206260, 1.010831, 5.232109, 6.306007, 9.236616, 9.760163, 5.493674, 6.581582, 3.729471], [7.756544, 6.732037, 3.831079, 5.143700, 4.049380, 8.308103, 4.968419, 4.369669, 6.971528, 0.973627], [4.334330, 1.657506, 3.719632, 4.893642, 7.018310, 6.881889, 3.133830, 4.212141, 3.803804, 4.150066], [5.312689, 5.815059, 4.991536, 1.174822, 1.609448, 2.265741, 6.307614, 7.535534, 7.895621, 0.291095], [3.338985, 5.265217, 4.196058, 7.847265, 2.237501, 7.687572, 1.150740, 2.374800, 0.265859, 0.070678], [8.372276, 4.921055, 8.183662, 2.357638, 9.459872, 9.111883, 5.652828, 6.455407, 3.960980, 0.529245], [8.585642, 1.219124, 4.169738, 4.303254, 5.779249, 8.303343, 7.416855, 0.641570, 5.045879, 6.131113], [2.901168, 5.110116, 3.187606, 2.393768, 5.861787, 0.007688, 6.779246, 3.199610, 7.553830, 5.310575]]> : tensor<10x10xf64>

        %computed = call @sparse_dense_matmul(%sparse, %dense, %init) : (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %expected = arith.constant dense<[[135.063194, 85.939935, 86.232246, 152.030015, 107.818169, 185.472974, 97.654078, 77.209276, 92.303163, 75.003413], [84.734479, 93.152519, 77.305339, 69.122610, 53.696161, 95.527446, 77.053166, 87.399444, 73.825301, 9.599415], [303.609731, 203.086876, 209.558177, 208.540190, 272.763927, 308.097242, 247.126685, 163.090902, 213.092089, 174.947129], [128.557833, 107.957590, 81.582542, 143.012810, 76.010566, 154.520112, 104.856082, 79.217739, 151.686395, 38.568669], [134.979856, 65.008574, 60.945677, 95.149294, 106.489460, 157.819970, 130.931023, 48.719189, 90.715438, 85.891410], [81.895610, 84.978246, 33.540821, 45.921346, 56.348589, 82.061003, 106.974560, 80.846091, 90.994082, 29.904304], [283.107423, 192.323773, 181.923729, 284.498310, 252.987960, 344.465829, 250.299177, 158.011526, 228.648723, 192.484739], [115.252179, 80.994126, 67.402959, 68.629809, 92.183388, 79.133278, 93.743752, 54.735255, 95.401769, 92.033334], [103.844565, 67.298852, 68.054100, 107.867812, 88.030588, 142.863860, 77.167345, 51.581698, 54.866647, 60.991577], [1.688793, 0.992638, 1.650747, 0.475565, 1.908175, 1.837981, 1.140246, 1.302136, 0.798979, 0.106755]]> : tensor<10x10xf64>

        // Validate each element
        %false = arith.constant "false" : i1
        %flag = scf.for %i = %c0 to %rows step %c1 iter_args(%f_iter = %false) -> (i1) {
            %flag_row = scf.for %j = %c0 to %cols step %c1 iter_args(%f_in = %f_iter) -> (i1) {
                %cmp_c = tensor.extract %computed[%i, %j] : tensor<10x10xf64>
                %cmp_e = tensor.extract %expected[%i, %j] : tensor<10x10xf64>
                %neq = arith.cmpf une, %cmp_c, %cmp_e : f64
                %new_f = arith.ori %f_in, %neq : i1
                scf.yield %new_f : i1
            }
            scf.yield %flag_row : i1
        }

        %zero_i32 = arith.constant 0 : i32
        %one_i32 = arith.constant 1 : i32
        %status = scf.if %flag -> (i32) {
            scf.yield %one_i32 : i32
        } else {
            scf.yield %zero_i32 : i32
        }
        return %status : i32
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[2.655393, 4.906054, 2.976064, 5.848890, 5.063576, 1.997885, 1.648158, 6.776670, 6.099622, 1.981872, 5.968425, 2.568980, 4.972143, 3.648574, 6.695388, 7.247171, 7.157337, 9.417560, 9.797560, 8.018637, 3.523660, 0.016044, 5.389446, 1.854410, 2.194562, 9.429572, 7.614253, 5.177585, 4.289831, 6.562076, 6.162806, 9.822609, 9.004582, 7.512803, 7.542988, 5.725881, 3.992913, 0.798114, 7.153683, 1.337783, 2.331358, 4.080446, 6.652144, 3.966260, 0.201713]> : tensor<45xf64>
        %row_ptr = arith.constant dense<[0, 6, 10, 18, 21, 26, 28, 35, 39, 44, 45]> : tensor<11xindex>
        %col_ind = arith.constant dense<[0, 1, 2, 4, 6, 8, 2, 5, 6, 7, 0, 2, 3, 4, 6, 7, 8, 9, 1, 3, 9, 0, 2, 4, 6, 8, 2, 5, 0, 1, 2, 4, 6, 8, 9, 0, 3, 8, 9, 0, 2, 4, 6, 8, 7]> : tensor<45xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<45xindex>), tensor<45xf64> to tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }

}
