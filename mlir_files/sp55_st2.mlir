// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @sparse_dense_matmul(%sparse: tensor<10x10xf64, #CSR>,%dense: tensor<10x10xf64>,%init: tensor<10x10xf64>
    ) -> tensor<10x10xf64> {
        %res = linalg.matmul ins(%sparse, %dense: tensor<10x10xf64, #CSR>, tensor<10x10xf64>) 
            outs(%init: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %res : tensor<10x10xf64>
    }

    func.func @main() -> i32 {
        %c0 = arith.constant 0 : index
        %c1 = arith.constant 1 : index
        %rows = arith.constant 10 : index
        %cols = arith.constant 10 : index
        %zero_f64 = arith.constant 0.0 : f64

        %init = tensor.empty() : tensor<10x10xf64>
        %sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %dense = arith.constant dense<[[1.439268, 7.449253, 3.633528, 9.363714, 2.758375, 7.363793, 8.909431, 3.101358, 2.400864, 4.446073], [1.510814, 6.151888, 1.879436, 1.922714, 4.506716, 2.373303, 8.676333, 0.003919, 3.476227, 0.956438], [9.490495, 4.837312, 8.224233, 6.699583, 3.716457, 4.805324, 3.812730, 3.513696, 6.637585, 6.641153], [5.905174, 4.964306, 1.638481, 9.221044, 7.723620, 0.547210, 9.262860, 7.408255, 3.253009, 6.172659], [4.287277, 1.271263, 1.250053, 9.352601, 3.331223, 6.468080, 3.406798, 8.648632, 4.794736, 0.472305], [3.905904, 5.154291, 7.292662, 6.689444, 1.944647, 2.895257, 0.407543, 0.222483, 2.382757, 3.819563], [7.960006, 2.046144, 7.363084, 1.736691, 2.610896, 4.998338, 8.201530, 5.666248, 0.745275, 6.988166], [4.723516, 0.140683, 5.547929, 0.010629, 5.597860, 2.724453, 8.026522, 4.291693, 7.949767, 7.659792], [1.078886, 4.901558, 0.687224, 4.457298, 3.315909, 7.179306, 2.918008, 2.183287, 1.556374, 5.122359], [7.493179, 7.512406, 6.729647, 4.425151, 9.713927, 4.278542, 7.773240, 4.032735, 1.708372, 8.198979]]> : tensor<10x10xf64>

        %computed = call @sparse_dense_matmul(%sparse, %dense, %init) : (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %expected = arith.constant dense<[[178.585690, 103.183099, 135.314773, 194.415486, 106.265501, 182.095127, 138.545388, 160.972374, 129.904000, 141.273910], [82.323497, 121.295270, 78.302946, 57.230219, 128.020594, 59.632884, 144.822193, 37.541833, 44.946259, 84.254436], [202.222488, 202.134268, 156.859133, 324.276468, 183.553626, 239.245557, 286.941213, 234.347312, 129.640798, 218.063590], [25.322451, 7.906160, 7.995545, 55.058189, 19.567131, 37.904980, 19.853740, 50.320700, 28.122192, 3.126811], [165.113603, 71.989976, 131.133639, 140.805187, 78.567573, 140.117487, 135.810644, 142.684956, 87.158457, 119.818341], [43.446138, 45.702880, 45.575587, 33.249888, 50.919344, 25.959415, 38.756725, 20.126022, 12.490374, 46.751523], [170.283075, 117.242073, 172.174973, 146.281014, 79.304524, 138.845732, 145.109678, 97.280819, 88.045187, 155.783175], [76.743987, 47.973439, 67.442867, 55.584590, 36.495912, 41.504656, 44.111213, 27.499076, 57.656143, 53.537195], [196.772101, 174.639611, 178.095245, 249.601171, 144.562075, 169.715538, 255.227795, 172.527474, 102.081994, 204.579888], [205.395262, 183.046849, 154.716278, 311.870048, 176.237063, 185.343857, 175.856417, 189.886526, 154.457539, 192.795946]]> : tensor<10x10xf64>

        // Validate each element
        %false = arith.constant "false" : i1
        %flag = scf.for %i = %c0 to %rows step %c1 iter_args(%f_iter = %false) -> (i1) {
            %flag_row = scf.for %j = %c0 to %cols step %c1 iter_args(%f_in = %f_iter) -> (i1) {
                %cmp_c = tensor.extract %computed[%i, %j] : tensor<10x10xf64>
                %cmp_e = tensor.extract %expected[%i, %j] : tensor<10x10xf64>
                %neq = arith.cmpf une, %cmp_c, %cmp_e : f64
                %new_f = arith.ori %f_in, %neq : i1
                scf.yield %new_f : i1
            }
            scf.yield %flag_row : i1
        }

        %zero_i32 = arith.constant 0 : i32
        %one_i32 = arith.constant 1 : i32
        %status = scf.if %flag -> (i32) {
            scf.yield %one_i32 : i32
        } else {
            scf.yield %zero_i32 : i32
        }
        return %status : i32
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[0.808477, 9.373631, 9.468281, 4.633427, 0.919980, 6.155311, 8.358613, 9.301151, 9.103706, 2.324277, 8.618206, 8.384625, 2.285790, 7.340866, 7.837106, 0.587907, 5.815783, 0.099485, 0.929616, 6.130049, 7.315285, 9.120046, 1.520230, 1.732337, 4.895092, 4.275377, 9.064667, 0.314300, 3.066366, 7.883124, 1.879113, 1.645720, 7.824419, 8.712198, 4.216605, 7.999459, 1.739681, 3.868570, 9.102932, 1.806408, 7.552693, 9.572462, 8.103145, 8.272853, 9.394884]> : tensor<45xf64>
        %row_ptr = arith.constant dense<[0, 6, 8, 16, 18, 23, 25, 31, 33, 40, 45]> : tensor<11xindex>
        %col_ind = arith.constant dense<[0, 2, 4, 6, 7, 8, 1, 9, 0, 2, 3, 4, 5, 6, 8, 9, 4, 5, 0, 2, 4, 6, 8, 5, 9, 0, 2, 4, 5, 6, 8, 1, 2, 0, 2, 3, 4, 5, 6, 8, 2, 3, 4, 5, 8]> : tensor<45xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<45xindex>), tensor<45xf64> -> tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }

}
