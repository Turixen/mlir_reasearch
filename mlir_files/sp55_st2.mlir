// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @sparse_dense_matmul(%sparse: tensor<10x10xf64, #CSR>,%dense: tensor<10x10xf64>,%init: tensor<10x10xf64>
    ) -> tensor<10x10xf64> {
        %res = linalg.matmul ins(%sparse, %dense: tensor<10x10xf64, #CSR>, tensor<10x10xf64>) 
            outs(%init: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %res : tensor<10x10xf64>
    }

    func.func @main() -> i32 {
        %c0 = arith.constant 0 : index
        %c1 = arith.constant 1 : index
        %rows = arith.constant 10 : index
        %cols = arith.constant 10 : index
        %zero_f64 = arith.constant 0.0 : f64

        %init = tensor.empty() : tensor<10x10xf64>
        %sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %dense = arith.constant dense<[[4.036060, 1.983610, 3.690138, 0.464782, 7.575713, 2.991771, 8.053414, 0.304981, 7.836262, 7.930532], [1.642377, 8.031617, 9.834166, 4.504964, 5.969492, 2.339873, 1.527422, 0.532238, 1.326829, 7.661009], [7.435891, 3.735482, 8.188184, 9.050762, 6.192639, 8.647686, 3.162903, 6.221379, 4.766753, 7.908887], [2.746424, 3.005501, 9.617222, 8.082110, 3.515350, 0.908833, 1.393887, 3.458462, 5.837169, 7.108155], [1.355689, 7.868503, 8.549710, 3.391833, 3.654270, 8.965062, 8.656832, 2.747623, 7.656052, 9.566740], [8.093200, 9.934111, 1.781047, 1.934218, 7.444315, 7.688482, 3.206250, 0.730270, 9.268525, 0.008519], [8.227540, 6.889474, 6.520490, 9.502446, 5.462393, 9.888673, 8.502825, 4.910864, 4.851972, 4.355900], [5.982608, 9.719204, 2.884659, 7.026564, 4.115185, 5.009671, 6.653786, 2.123106, 7.235321, 7.164799], [7.094924, 9.399811, 9.937896, 4.995154, 3.024304, 9.179167, 7.068331, 9.567111, 6.921313, 9.731120], [0.650839, 7.966356, 4.787912, 2.721080, 9.816075, 3.881790, 1.064692, 8.893036, 3.968139, 5.259598]]> : tensor<10x10xf64>

        %computed = call @sparse_dense_matmul(%sparse, %dense, %init) : (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %expected = arith.constant dense<[[126.016656, 139.321070, 159.552833, 116.916413, 116.434067, 176.227642, 173.722047, 100.463098, 147.200462, 171.639269], [82.545851, 101.333723, 102.723984, 70.648357, 46.615914, 106.265377, 83.403268, 97.233753, 72.849159, 94.778407], [223.439303, 333.282665, 315.977462, 218.644980, 282.945540, 333.959102, 318.806800, 254.473367, 302.863929, 355.941556], [120.277391, 152.608436, 148.266478, 115.180603, 139.695766, 132.199915, 55.973019, 55.831362, 105.119510, 118.333038], [118.812598, 165.963864, 183.157552, 146.072372, 110.317439, 185.308967, 154.813324, 98.647886, 120.164119, 163.245416], [70.841935, 126.686342, 41.336175, 31.151877, 116.255642, 85.389400, 32.537670, 55.362177, 98.994251, 29.225530], [166.027765, 220.338528, 289.150220, 174.087306, 220.226200, 218.962865, 209.183286, 117.878063, 200.230904, 304.655091], [82.088150, 153.088576, 171.970370, 94.205647, 84.713416, 108.746831, 83.590954, 84.854234, 73.587262, 148.052599], [250.126432, 226.206036, 343.723283, 281.406424, 227.460320, 277.618580, 255.767802, 209.626419, 276.274712, 336.230161], [17.600469, 103.705676, 109.259415, 50.066811, 82.093870, 54.257316, 39.295009, 37.885595, 43.451255, 98.078833]]> : tensor<10x10xf64>

        // Validate each element
        %false = arith.constant "false" : i1
        %flag = scf.for %i = %c0 to %rows step %c1 iter_args(%f_iter = %false) -> (i1) {
            %flag_row = scf.for %j = %c0 to %cols step %c1 iter_args(%f_in = %f_iter) -> (i1) {
                %cmp_c = tensor.extract %computed[%i, %j] : tensor<10x10xf64>
                %cmp_e = tensor.extract %expected[%i, %j] : tensor<10x10xf64>
                %neq = arith.cmpf une, %cmp_c, %cmp_e : f64
                %new_f = arith.or %f_in, %neq : i1
                scf.yield %new_f : i1
            }
            scf.yield %flag_row : i1
        }

        %zero_i32 = arith.constant 0 : i32
        %one_i32 = arith.constant 1 : i32
        %status = scf.if %flag -> (i32) {
            scf.yield %one_i32 : i32
        } else {
            scf.yield %zero_i32 : i32
        }
        return %status : i32
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[5.372913, 1.773336, 4.393691, 6.331710, 4.664469, 3.025488, 8.072997, 0.578063, 9.412588, 1.075582, 7.468532, 9.262237, 2.496764, 9.926701, 8.842207, 7.617382, 7.576550, 6.354517, 0.369624, 3.564192, 1.762289, 5.508828, 8.414012, 3.054009, 8.307497, 5.543154, 9.786753, 9.956400, 6.694389, 4.508655, 2.853081, 4.342649, 8.560747, 0.295959, 1.893177, 7.336338, 8.867950, 7.660580, 9.935162, 1.927963, 8.455343, 8.161478, 7.146532, 2.917775, 2.930944]> : tensor<45xf64>
        %row_ptr = arith.constant dense<[0, 5, 8, 15, 18, 24, 26, 32, 36, 42, 45]> : tensor<11xindex>
        %col_ind = arith.constant dense<[0, 2, 4, 6, 8, 6, 8, 9, 0, 2, 4, 6, 7, 8, 9, 1, 2, 5, 0, 1, 2, 4, 6, 8, 5, 9, 0, 1, 2, 4, 6, 8, 1, 4, 6, 8, 0, 2, 3, 4, 6, 8, 1, 4, 9]> : tensor<45xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<45xindex>), tensor<45xf64> -> tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }

}
