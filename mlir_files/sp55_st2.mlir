// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @matmul(%t : tensor<10x10xf64, #CSR>, %s : tensor<10x10xf64>, %out : tensor<10x10xf64>)
        -> tensor<10x10xf64> {
        %0 = linalg.matmul
            ins(%t, %s: tensor<10x10xf64, #CSR>, tensor<10x10xf64>)
            outs(%out: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %0 : tensor<10x10xf64>
    }

    func.func @main() -> i64 {
        %c = tensor.empty() : tensor<10x10xf64>
        %t_sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %s = arith.constant dense<[
            [5.324004451231145, 0.7227697828440427, 4.686295720248922, 3.351094482671819, 5.775888244633183, 4.877587371543401, 2.3953549450475276, 4.878359054774334, 5.610548541375971, 0.12415667139666908], [8.223775597404792, 9.177125426848038, 5.666389576549113, 8.152109346602042, 9.1029038105773, 6.3718314643700875, 3.973348795103484, 5.799599911066276, 3.5140982826967058, 1.5921352068972117], [0.7769506591361919, 9.552029440664505, 1.1326190522581359, 0.24533326142540446, 5.439687600675864, 7.063277719465155, 5.515964106479125, 5.636478476575854, 6.110240528769691, 6.863880247401461], [6.210697057253855, 1.2995365635202127, 5.4050127689046725, 9.488727812984608, 9.06218817294145, 9.064680229187717, 4.919179450017705, 4.285646359803113, 4.38059948238188, 1.1233909055057623], [2.083385549592781, 8.66143891722715, 3.004174170432392, 1.7649814576274048, 1.7424086613309386, 9.223723062343112, 9.085664957451199, 8.56033562646971, 7.473780623921064, 9.308794269354786], [2.4324867643748593, 1.0455009991840236, 5.821270137210335, 9.253031099872103, 5.184990296390729, 5.616816669978259, 9.935092206142631, 1.7925316939419478, 7.965283281149912, 6.421686344329953], [0.33118676761966226, 8.681087943970107, 7.890028855697916, 0.6099021229779455, 2.6948309969801185, 4.961374994616525, 5.188802656653856, 2.8278508653975676, 9.86901689972008, 4.266261929108285], [1.077814636329416, 1.7492856821816505, 2.9617894637313125, 8.923877006296836, 6.295725188315079, 4.635616467847887, 5.5765584595499815, 6.207536234136671, 7.3204923985015355, 6.811382587672687], [8.7724553611865, 4.865619290760394, 0.38026779787679543, 2.991761904773705, 8.718454269414327, 8.625469700669523, 0.4208918288067498, 8.937018998880898, 8.558469040303159, 5.971705334294668], [7.37129930586725, 1.1750841589218597, 6.195955393413768, 0.2510326427738918, 5.973869769962005, 1.2872315019952008, 8.103034432279642, 4.4342632027377356, 7.682871483343784, 0.2556510288179481]
        ]> : tensor<10x10xf64>
        %result_matrix = call @matmul(%t_sparse, %s, %c) :
            (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %c1 = arith.constant 1 : index

        %element_f64 = tensor.extract %result_matrix[%c1, %c1] : tensor<10x10xf64>
        %element_i64 = arith.fptosi %element_f64 : f64 to i64
        return %element_i64 : i64
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[2.635350, 0.476835, 9.345050, 7.269115, 2.183542, 6.321734, 2.717645, 6.941124, 5.104556, 8.083419, 8.286134, 2.357578, 2.125412, 9.603312, 2.441907, 9.216960, 4.698833, 0.266386, 9.497017, 0.077675, 3.268152, 2.671975, 7.239152, 4.011799, 4.996699, 7.612246, 4.261324, 3.030783, 0.174752, 7.564554, 1.663029, 4.972220, 6.267787, 8.178078, 9.702477, 6.274794, 3.740631, 6.205859, 2.417510, 3.155065, 3.094247, 2.859766, 4.798940, 0.699348, 3.285143]> : tensor<45xf64>
        %row_ptr = arith.constant dense<[0, 5, 7, 13, 15, 20, 24, 30, 33, 39, 45]> : tensor<11xindex>
        %col_ind = arith.constant dense<[0, 2, 4, 6, 8, 7, 8, 0, 1, 2, 4, 6, 8, 6, 8, 0, 2, 4, 6, 8, 0, 3, 6, 8, 0, 2, 3, 4, 6, 8, 2, 3, 5, 0, 2, 3, 4, 6, 8, 3, 4, 5, 6, 8, 9]> : tensor<45xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<45xindex>), tensor<45xf64> to tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }
    
}
