// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @matmul(%t : tensor<10x10xf64, #CSR>, %s : tensor<10x10xf64>, %out : tensor<10x10xf64>)
        -> tensor<10x10xf64> {
        %0 = linalg.matmul
            ins(%t, %s: tensor<10x10xf64, #CSR>, tensor<10x10xf64>)
            outs(%out: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %0 : tensor<10x10xf64>
    }

    func.func @main() -> i64 {
        %c = tensor.empty() : tensor<10x10xf64>
        %t_sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %s = arith.constant dense<[
            [9.555175439507567, 7.95185216204522, 3.9531983730711784, 1.8733979623984909, 4.8993158413482245, 8.063166196313276, 1.4688465653149718, 8.996644049526196, 5.596264894314085, 7.233138115752866], [8.37171783113113, 0.7428170701464465, 5.494896659529466, 4.0205775871178195, 2.003483743597154, 0.14465173207704907, 4.221064596002514, 9.627038704194309, 0.6255309696013411, 5.5247195073478], [3.5631867954861294, 8.96452408307538, 7.893678762335603, 5.0359424684343725, 4.014444524944183, 1.1372030625366625, 5.894174669563884, 6.243226020564212, 3.8056261941944944, 4.109757916274185], [8.29576869979895, 1.8970744485955338, 5.070757057840187, 3.1244747472695567, 4.943613026872661, 8.62974313424232, 7.11299523886037, 4.689681016421138, 4.844730598600875, 2.1975370080321555], [3.421364555098373, 3.607180673407994, 2.8183212568120752, 6.778193888870691, 0.023384045227418104, 1.1902859375908292, 3.711526271247223, 3.502573692238473, 6.449682784523656, 8.255031520023927], [8.275915670606157, 4.550297357319879, 2.1350336731330968, 0.0009453305704210102, 6.245383604457938, 5.113793062594557, 7.422205558936211, 8.465265394333214, 8.718601866740729, 8.484853691707738], [9.945269483806909, 2.72918870666647, 5.4499334959575565, 6.066018031986316, 0.9321988462487474, 7.732835776186674, 3.0646674917471026, 1.6653802583647004, 7.525380868066299, 6.817113535442813], [8.303859019287719, 6.3178521460442125, 4.036361908924038, 5.170286282341708, 6.734301020595397, 6.953335817653277, 9.234398505221083, 2.143811092487681, 9.74568971894503, 0.8357079061729755], [0.08082100102322576, 4.260328576184471, 6.416801466979126, 9.932248776257374, 6.856946798268443, 2.8928954939492413, 8.638295172495948, 2.880868814756443, 5.501089435927967, 1.1062439434332716], [4.78234194992808, 0.46694653908553874, 5.375699601366998, 6.5511677086743845, 8.92689503629996, 2.587511016207346, 4.943916760802599, 7.469284529861099, 8.0700948243388, 1.8511136704862219]
        ]> : tensor<10x10xf64>
        %result_matrix = call @matmul(%t_sparse, %s, %c) :
            (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %c1 = arith.constant 1 : index
        %element_f64 = tensor.extract %result_matrix[%c1, %c1] : tensor<10x10xf64>
        %element_i64 = arith.fptosi %element_f64 : f64 to i64
        return %element_i64 : i64
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[0.229013, 2.543876, 9.060893, 2.497144, 5.849478, 3.312465, 0.099521, 0.937456, 4.803246, 6.578931, 3.828883, 0.950766, 3.735872, 0.911496, 0.070987, 0.593828, 0.315101, 3.556995, 0.272870, 7.813916, 6.319652, 8.867888, 9.719925, 4.028866, 6.752391, 9.122216, 5.317916, 8.141353, 2.608504, 9.643208, 5.649465, 4.135391, 6.752614, 3.039725, 3.800817, 4.004990, 7.362353, 0.943819, 6.486369, 1.811057, 1.157562, 5.137127, 3.446018, 4.129152, 8.976256]> : tensor<45xf64>
        %row_ptr = arith.constant dense<[0, 5, 6, 13, 13, 21, 22, 30, 33, 41, 45]> : tensor<11xindex>
        %col_ind = arith.constant dense<[0, 2, 4, 6, 8, 4, 0, 2, 4, 5, 6, 7, 8, 0, 2, 4, 5, 6, 7, 8, 9, 7, 0, 2, 3, 4, 5, 6, 7, 8, 0, 1, 5, 0, 2, 3, 4, 5, 6, 8, 9, 1, 5, 6, 8]> : tensor<45xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<45xindex>), tensor<45xf64> to tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }
    
}
