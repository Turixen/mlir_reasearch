// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @matmul(%t : tensor<10x10xf64, #CSR>, %s : tensor<10x10xf64>, %out : tensor<10x10xf64>)
        -> tensor<10x10xf64> {
        %0 = linalg.matmul
            ins(%t, %s: tensor<10x10xf64, #CSR>, tensor<10x10xf64>)
            outs(%out: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %0 : tensor<10x10xf64>
    }

    func.func @main() -> i64 {
        %c = tensor.empty() : tensor<10x10xf64>
        %t_sparse = call @assemble_sparse() : () -> tensor<10x10xf64, #CSR>
        %s = arith.constant dense<[
            [[5.635158, 5.983152, 0.534933, 6.134733, 5.161400, 8.991216, 0.255489, 9.907159, 1.408057, 1.860609], [5.160900, 9.443161, 5.277130, 9.834204, 2.484421, 3.513784, 6.782592, 1.174033, 5.492766, 8.124585], [0.920299, 0.516994, 2.640826, 5.482179, 3.919712, 4.581493, 9.748035, 2.331766, 7.849133, 1.767221], [8.173794, 6.722637, 3.529742, 4.108037, 1.842752, 5.633187, 1.067725, 4.766775, 0.452533, 4.553112], [1.568190, 6.810641, 6.562736, 3.994502, 9.794826, 6.231880, 2.345512, 5.840390, 4.779062, 4.861037], [3.847141, 5.921036, 8.657322, 6.887961, 0.355705, 0.120832, 3.473488, 9.771772, 9.576490, 3.601332], [9.535369, 7.961536, 2.994874, 9.142892, 5.682589, 4.689708, 5.784364, 5.402307, 6.542538, 0.349894], [6.293318, 0.683053, 6.880826, 8.381874, 5.851163, 0.214720, 4.699046, 8.715313, 0.828938, 7.647284], [5.634061, 7.529403, 0.206599, 1.670721, 4.478706, 0.947596, 9.669194, 1.741647, 6.359371, 9.038398], [5.169856, 0.534783, 6.037262, 1.392325, 0.452534, 8.520614, 6.165763, 1.757434, 7.947903, 7.129483]]
        ]> : tensor<10x10xf64>
        %result_matrix = call @matmul(%t_sparse, %s, %c) :
            (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %c1 = arith.constant 1 : index

        %element_f64 = tensor.extract %result_matrix[%c1, %c1] : tensor<10x10xf64>
        %element_i64 = arith.fptosi %element_f64 : f64 to i64
        return %element_i64 : i64
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[2.779479, 6.091256, 9.461726, 8.930472, 2.371674, 9.208550, 7.022853, 1.055772, 9.579708, 9.805163, 1.633705, 8.677185, 4.310837, 8.975070, 4.828794, 4.984656, 2.211107, 8.552802, 8.383625, 2.852600, 2.308299, 7.621083, 9.077696, 5.211112, 1.597652, 4.828395, 1.176931, 9.337111, 4.332312, 2.657705, 2.591640, 5.323410, 0.666418, 3.119795, 4.949794, 2.959672, 3.687192, 4.084611, 2.834307, 9.735824, 9.744453, 8.512388, 8.066063, 9.072310, 8.109414]> : tensor<45xf64>
        %row_ptr = arith.constant dense<[0, 7, 9, 15, 19, 26, 30, 37, 38, 43, 45]> : tensor<11xindex>
        %col_ind = arith.constant dense<[0, 2, 3, 4, 5, 6, 8, 3, 4, 0, 2, 4, 6, 7, 8, 1, 2, 7, 8, 0, 2, 4, 5, 6, 7, 8, 1, 2, 7, 9, 0, 1, 2, 4, 6, 8, 9, 9, 0, 2, 4, 6, 8, 0, 6]> : tensor<45xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<45xindex>), tensor<45xf64> to tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }
    
}
