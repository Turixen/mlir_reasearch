// Sparse-Dense Matrix Multiplication using CSR
#CSR = #sparse_tensor.encoding<{ 
   map = (d0, d1) -> (d0: compressed, d1: dense) 
}>

module {
    func.func @matmul(%t : tensor<10x10xf64, #CSR>, %s : tensor<10x10xf64>, %out : tensor<10x10xf64>)
        -> tensor<10x10xf64> {
        %0 = linalg.matmul
            ins(%t, %s: tensor<10x10xf64, #CSR>, tensor<10x10xf64>)
            outs(%out: tensor<10x10xf64>) -> tensor<10x10xf64>
        return %0 : tensor<10x10xf64>
    }

    func.func @main() -> i64 {
        %c = tensor.empty() : tensor<10x10xf64>
        %t_sparse = call @test_assemble() : () -> tensor<10x10xf64, #CSR>
        %s = arith.constant dense<[
            [8.101780241572659, 1.26904416054052, 5.5786009124015, 7.587873415954577, 2.966398026755729, 5.753820197056406, 5.1513058992292535, 0.7860302868903923, 1.9297256411613428, 9.344806258405772], [5.917682056258851, 8.059584886952308, 4.048306444474194, 9.657861724606247, 0.8135986787268956, 5.801969083327895, 3.1539345863651223, 9.545390468736697, 2.0703352490040516, 9.29081294541286], [1.355584109952539, 4.6632740343772845, 3.570279471354054, 6.352748964119814, 7.265367266838596, 0.4478746265983291, 3.488587872017397, 2.0282876824010176, 8.82621973558008, 5.611286671961978], [2.422922172856855, 1.760550585709636, 1.5739531297966658, 2.575071738430237, 7.154795045933348, 4.836053450118351, 4.261833960079317, 0.6475635734989271, 2.6806558138549317, 1.1177472990420867], [8.059277693795158, 8.485493804771597, 7.9966821071439975, 2.6953964711921996, 9.996776611535672, 3.4471888542369236, 9.450031854304813, 0.7649571612891592, 8.491034076957897, 4.380148782075498], [4.025044455641488, 2.970270247282812, 0.792934056246174, 6.734216761079232, 6.272904788339643, 5.569568302093803, 6.9519604785055265, 4.908156461461259, 6.811331597186284, 7.575591910333661], [4.399776459937152, 6.204163262704936, 2.7687691079641485, 2.677978389187299, 9.45863584689379, 4.1728086233122905, 1.1144871266655787, 8.171539855383108, 6.286287515525061, 6.151304433812913], [0.7366460500459271, 5.11375899084844, 0.3402186906141891, 3.5200281406820952, 9.969088811974721, 3.4462382354016095, 9.526060868378796, 6.2182159930556145, 8.284763726478875, 8.566791268324238], [1.8752981073112485, 1.0757089117593377, 5.541917475068256, 2.6154942429588237, 4.434526613185571, 1.7441771571369935, 4.6212495201761685, 9.993326009953927, 6.490989894033895, 1.8224667825440477], [6.405118413431849, 0.27404683983544453, 7.686916518744558, 6.603152516294079, 4.144885931213796, 5.367232138377879, 9.41996566913663, 4.668776200834498, 5.4143135561892475, 6.361553945272118]
        ]> : tensor<10x10xf64>
        %result_matrix = call @matmul(%t_sparse, %s, %c) :
            (tensor<10x10xf64, #CSR>, tensor<10x10xf64>, tensor<10x10xf64>) -> tensor<10x10xf64>
        %c1 = arith.constant 1 : index
        %element_f64 = tensor.extract %result_matrix[%c1, %c1] : tensor<10x10xf64>
        %element_i64 = arith.fptosi %element_f64 : f64 to i64
        return %element_i64 : i64
    }

    func.func @assemble_sparse() -> tensor<10x10xf64, #CSR> {
        %values = arith.constant dense<[4.953189, 3.165621, 9.066976, 1.057607, 4.509400, 0.860916, 9.092466, 2.872304, 5.914132, 2.525761, 8.564803, 0.355439, 2.033326, 3.738915, 8.750278, 2.762805, 7.947957, 8.205243, 1.882539, 9.483124, 5.707967, 2.607151, 2.831454, 1.518282, 3.106961, 0.991602, 9.604383, 0.598259, 4.060581, 8.234297, 5.917070, 4.149997, 2.375869, 5.863200, 9.839324, 6.914292, 7.869312, 8.858700, 6.267248, 9.462803, 9.550005, 4.159352, 4.448871, 7.338525, 1.311285]> : tensor<45xf64>
        %row_ptr = arith.constant dense<[0, 6, 8, 14, 18, 24, 26, 33, 35, 42, 45]> : tensor<11xindex>
        %col_ind = arith.constant dense<[0, 2, 4, 6, 7, 8, 0, 2, 0, 2, 4, 6, 8, 9, 0, 1, 6, 9, 0, 2, 4, 6, 8, 9, 5, 7, 0, 1, 2, 4, 5, 6, 8, 0, 1, 0, 2, 4, 6, 7, 8, 9, 3, 4, 7]> : tensor<45xindex>
        %s = sparse_tensor.assemble(%row_ptr, %col_ind), %values : (tensor<11xindex>, tensor<45xindex>), tensor<45xf64> to tensor<10x10xf64, #CSR>
        return %s : tensor<10x10xf64, #CSR>
    }
    
}
